
LAB2_MicroconPID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055cc  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080057a4  080057a4  000157a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057e4  080057e4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080057e4  080057e4  000157e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057ec  080057ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057ec  080057ec  000157ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057f0  080057f0  000157f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080057f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000010  08005804  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08005804  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013324  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002607  00000000  00000000  000333a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e8  00000000  00000000  000359b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d39  00000000  00000000  00036a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002701e  00000000  00000000  000377d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000143c0  00000000  00000000  0005e7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ffea0  00000000  00000000  00072baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a24  00000000  00000000  00172a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00177474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800578c 	.word	0x0800578c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	0800578c 	.word	0x0800578c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b970 	b.w	8000eac <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9e08      	ldr	r6, [sp, #32]
 8000bea:	460d      	mov	r5, r1
 8000bec:	4604      	mov	r4, r0
 8000bee:	460f      	mov	r7, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14a      	bne.n	8000c8a <__udivmoddi4+0xa6>
 8000bf4:	428a      	cmp	r2, r1
 8000bf6:	4694      	mov	ip, r2
 8000bf8:	d965      	bls.n	8000cc6 <__udivmoddi4+0xe2>
 8000bfa:	fab2 f382 	clz	r3, r2
 8000bfe:	b143      	cbz	r3, 8000c12 <__udivmoddi4+0x2e>
 8000c00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c04:	f1c3 0220 	rsb	r2, r3, #32
 8000c08:	409f      	lsls	r7, r3
 8000c0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0e:	4317      	orrs	r7, r2
 8000c10:	409c      	lsls	r4, r3
 8000c12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c16:	fa1f f58c 	uxth.w	r5, ip
 8000c1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c1e:	0c22      	lsrs	r2, r4, #16
 8000c20:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c28:	fb01 f005 	mul.w	r0, r1, r5
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	d90a      	bls.n	8000c46 <__udivmoddi4+0x62>
 8000c30:	eb1c 0202 	adds.w	r2, ip, r2
 8000c34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c38:	f080 811c 	bcs.w	8000e74 <__udivmoddi4+0x290>
 8000c3c:	4290      	cmp	r0, r2
 8000c3e:	f240 8119 	bls.w	8000e74 <__udivmoddi4+0x290>
 8000c42:	3902      	subs	r1, #2
 8000c44:	4462      	add	r2, ip
 8000c46:	1a12      	subs	r2, r2, r0
 8000c48:	b2a4      	uxth	r4, r4
 8000c4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c56:	fb00 f505 	mul.w	r5, r0, r5
 8000c5a:	42a5      	cmp	r5, r4
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x90>
 8000c5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c62:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x294>
 8000c6a:	42a5      	cmp	r5, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x294>
 8000c70:	4464      	add	r4, ip
 8000c72:	3802      	subs	r0, #2
 8000c74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c78:	1b64      	subs	r4, r4, r5
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	b11e      	cbz	r6, 8000c86 <__udivmoddi4+0xa2>
 8000c7e:	40dc      	lsrs	r4, r3
 8000c80:	2300      	movs	r3, #0
 8000c82:	e9c6 4300 	strd	r4, r3, [r6]
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0xbc>
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	f000 80ed 	beq.w	8000e6e <__udivmoddi4+0x28a>
 8000c94:	2100      	movs	r1, #0
 8000c96:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca0:	fab3 f183 	clz	r1, r3
 8000ca4:	2900      	cmp	r1, #0
 8000ca6:	d149      	bne.n	8000d3c <__udivmoddi4+0x158>
 8000ca8:	42ab      	cmp	r3, r5
 8000caa:	d302      	bcc.n	8000cb2 <__udivmoddi4+0xce>
 8000cac:	4282      	cmp	r2, r0
 8000cae:	f200 80f8 	bhi.w	8000ea2 <__udivmoddi4+0x2be>
 8000cb2:	1a84      	subs	r4, r0, r2
 8000cb4:	eb65 0203 	sbc.w	r2, r5, r3
 8000cb8:	2001      	movs	r0, #1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d0e2      	beq.n	8000c86 <__udivmoddi4+0xa2>
 8000cc0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc4:	e7df      	b.n	8000c86 <__udivmoddi4+0xa2>
 8000cc6:	b902      	cbnz	r2, 8000cca <__udivmoddi4+0xe6>
 8000cc8:	deff      	udf	#255	; 0xff
 8000cca:	fab2 f382 	clz	r3, r2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f040 8090 	bne.w	8000df4 <__udivmoddi4+0x210>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	2101      	movs	r1, #1
 8000ce0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ce8:	0c22      	lsrs	r2, r4, #16
 8000cea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cee:	fb0e f005 	mul.w	r0, lr, r5
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x124>
 8000cf6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x122>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f200 80cb 	bhi.w	8000e9c <__udivmoddi4+0x2b8>
 8000d06:	4645      	mov	r5, r8
 8000d08:	1a12      	subs	r2, r2, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d10:	fb07 2210 	mls	r2, r7, r0, r2
 8000d14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d18:	fb0e fe00 	mul.w	lr, lr, r0
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x14e>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x14c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2c2>
 8000d30:	4610      	mov	r0, r2
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3a:	e79f      	b.n	8000c7c <__udivmoddi4+0x98>
 8000d3c:	f1c1 0720 	rsb	r7, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d52:	40fd      	lsrs	r5, r7
 8000d54:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d58:	4323      	orrs	r3, r4
 8000d5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d5e:	fa1f fe8c 	uxth.w	lr, ip
 8000d62:	fb09 5518 	mls	r5, r9, r8, r5
 8000d66:	0c1c      	lsrs	r4, r3, #16
 8000d68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d6c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d70:	42a5      	cmp	r5, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b0>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d84:	f080 8088 	bcs.w	8000e98 <__udivmoddi4+0x2b4>
 8000d88:	42a5      	cmp	r5, r4
 8000d8a:	f240 8085 	bls.w	8000e98 <__udivmoddi4+0x2b4>
 8000d8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d92:	4464      	add	r4, ip
 8000d94:	1b64      	subs	r4, r4, r5
 8000d96:	b29d      	uxth	r5, r3
 8000d98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000da0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1da>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db4:	d26c      	bcs.n	8000e90 <__udivmoddi4+0x2ac>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	d96a      	bls.n	8000e90 <__udivmoddi4+0x2ac>
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	4464      	add	r4, ip
 8000dbe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc2:	fba3 9502 	umull	r9, r5, r3, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	42ac      	cmp	r4, r5
 8000dcc:	46c8      	mov	r8, r9
 8000dce:	46ae      	mov	lr, r5
 8000dd0:	d356      	bcc.n	8000e80 <__udivmoddi4+0x29c>
 8000dd2:	d053      	beq.n	8000e7c <__udivmoddi4+0x298>
 8000dd4:	b156      	cbz	r6, 8000dec <__udivmoddi4+0x208>
 8000dd6:	ebb0 0208 	subs.w	r2, r0, r8
 8000dda:	eb64 040e 	sbc.w	r4, r4, lr
 8000dde:	fa04 f707 	lsl.w	r7, r4, r7
 8000de2:	40ca      	lsrs	r2, r1
 8000de4:	40cc      	lsrs	r4, r1
 8000de6:	4317      	orrs	r7, r2
 8000de8:	e9c6 7400 	strd	r7, r4, [r6]
 8000dec:	4618      	mov	r0, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df4:	f1c3 0120 	rsb	r1, r3, #32
 8000df8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dfc:	fa20 f201 	lsr.w	r2, r0, r1
 8000e00:	fa25 f101 	lsr.w	r1, r5, r1
 8000e04:	409d      	lsls	r5, r3
 8000e06:	432a      	orrs	r2, r5
 8000e08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0c:	fa1f fe8c 	uxth.w	lr, ip
 8000e10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e14:	fb07 1510 	mls	r5, r7, r0, r1
 8000e18:	0c11      	lsrs	r1, r2, #16
 8000e1a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e1e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e22:	428d      	cmp	r5, r1
 8000e24:	fa04 f403 	lsl.w	r4, r4, r3
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x258>
 8000e2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e32:	d22f      	bcs.n	8000e94 <__udivmoddi4+0x2b0>
 8000e34:	428d      	cmp	r5, r1
 8000e36:	d92d      	bls.n	8000e94 <__udivmoddi4+0x2b0>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4461      	add	r1, ip
 8000e3c:	1b49      	subs	r1, r1, r5
 8000e3e:	b292      	uxth	r2, r2
 8000e40:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e44:	fb07 1115 	mls	r1, r7, r5, r1
 8000e48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e4c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e50:	4291      	cmp	r1, r2
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x282>
 8000e54:	eb1c 0202 	adds.w	r2, ip, r2
 8000e58:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5c:	d216      	bcs.n	8000e8c <__udivmoddi4+0x2a8>
 8000e5e:	4291      	cmp	r1, r2
 8000e60:	d914      	bls.n	8000e8c <__udivmoddi4+0x2a8>
 8000e62:	3d02      	subs	r5, #2
 8000e64:	4462      	add	r2, ip
 8000e66:	1a52      	subs	r2, r2, r1
 8000e68:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e6c:	e738      	b.n	8000ce0 <__udivmoddi4+0xfc>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e708      	b.n	8000c86 <__udivmoddi4+0xa2>
 8000e74:	4639      	mov	r1, r7
 8000e76:	e6e6      	b.n	8000c46 <__udivmoddi4+0x62>
 8000e78:	4610      	mov	r0, r2
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x90>
 8000e7c:	4548      	cmp	r0, r9
 8000e7e:	d2a9      	bcs.n	8000dd4 <__udivmoddi4+0x1f0>
 8000e80:	ebb9 0802 	subs.w	r8, r9, r2
 8000e84:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	e7a3      	b.n	8000dd4 <__udivmoddi4+0x1f0>
 8000e8c:	4645      	mov	r5, r8
 8000e8e:	e7ea      	b.n	8000e66 <__udivmoddi4+0x282>
 8000e90:	462b      	mov	r3, r5
 8000e92:	e794      	b.n	8000dbe <__udivmoddi4+0x1da>
 8000e94:	4640      	mov	r0, r8
 8000e96:	e7d1      	b.n	8000e3c <__udivmoddi4+0x258>
 8000e98:	46d0      	mov	r8, sl
 8000e9a:	e77b      	b.n	8000d94 <__udivmoddi4+0x1b0>
 8000e9c:	3d02      	subs	r5, #2
 8000e9e:	4462      	add	r2, ip
 8000ea0:	e732      	b.n	8000d08 <__udivmoddi4+0x124>
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e70a      	b.n	8000cbc <__udivmoddi4+0xd8>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x14e>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <PlantSimulation>:
static void MX_DAC1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
//float PlantSimulation(float VIn) ;
float PlantSimulation(float VIn) // run with fix frequency
{
 8000eb0:	b5b0      	push	{r4, r5, r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	ed87 0a01 	vstr	s0, [r7, #4]
static float speed =0;
static float position =0;
float current= VIn - speed * 0.0123;
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff fb10 	bl	80004e0 <__aeabi_f2d>
 8000ec0:	4604      	mov	r4, r0
 8000ec2:	460d      	mov	r5, r1
 8000ec4:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <PlantSimulation+0xd8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fb09 	bl	80004e0 <__aeabi_f2d>
 8000ece:	a328      	add	r3, pc, #160	; (adr r3, 8000f70 <PlantSimulation+0xc0>)
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	f7ff fb5c 	bl	8000590 <__aeabi_dmul>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4620      	mov	r0, r4
 8000ede:	4629      	mov	r1, r5
 8000ee0:	f7ff f99e 	bl	8000220 <__aeabi_dsub>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	4610      	mov	r0, r2
 8000eea:	4619      	mov	r1, r3
 8000eec:	f7ff fe12 	bl	8000b14 <__aeabi_d2f>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	617b      	str	r3, [r7, #20]
float torque = current * 0.456;
 8000ef4:	6978      	ldr	r0, [r7, #20]
 8000ef6:	f7ff faf3 	bl	80004e0 <__aeabi_f2d>
 8000efa:	a31f      	add	r3, pc, #124	; (adr r3, 8000f78 <PlantSimulation+0xc8>)
 8000efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f00:	f7ff fb46 	bl	8000590 <__aeabi_dmul>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f7ff fe02 	bl	8000b14 <__aeabi_d2f>
 8000f10:	4603      	mov	r3, r0
 8000f12:	613b      	str	r3, [r7, #16]
float acc = torque * 0.789;
 8000f14:	6938      	ldr	r0, [r7, #16]
 8000f16:	f7ff fae3 	bl	80004e0 <__aeabi_f2d>
 8000f1a:	a319      	add	r3, pc, #100	; (adr r3, 8000f80 <PlantSimulation+0xd0>)
 8000f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f20:	f7ff fb36 	bl	8000590 <__aeabi_dmul>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f7ff fdf2 	bl	8000b14 <__aeabi_d2f>
 8000f30:	4603      	mov	r3, r0
 8000f32:	60fb      	str	r3, [r7, #12]
speed += acc;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <PlantSimulation+0xd8>)
 8000f36:	ed93 7a00 	vldr	s14, [r3]
 8000f3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <PlantSimulation+0xd8>)
 8000f44:	edc3 7a00 	vstr	s15, [r3]
position += speed;
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <PlantSimulation+0xdc>)
 8000f4a:	ed93 7a00 	vldr	s14, [r3]
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <PlantSimulation+0xd8>)
 8000f50:	edd3 7a00 	vldr	s15, [r3]
 8000f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <PlantSimulation+0xdc>)
 8000f5a:	edc3 7a00 	vstr	s15, [r3]
return position;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <PlantSimulation+0xdc>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	ee07 3a90 	vmov	s15, r3
}
 8000f66:	eeb0 0a67 	vmov.f32	s0, s15
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f70:	0ded288d 	.word	0x0ded288d
 8000f74:	3f8930be 	.word	0x3f8930be
 8000f78:	9fbe76c9 	.word	0x9fbe76c9
 8000f7c:	3fdd2f1a 	.word	0x3fdd2f1a
 8000f80:	ed916873 	.word	0xed916873
 8000f84:	3fe93f7c 	.word	0x3fe93f7c
 8000f88:	200001a0 	.word	0x200001a0
 8000f8c:	200001a4 	.word	0x200001a4

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f96:	f000 fd10 	bl	80019ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9a:	f000 f935 	bl	8001208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9e:	f000 fadd 	bl	800155c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000fa2:	f000 f9b7 	bl	8001314 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000fa6:	f000 fa83 	bl	80014b0 <MX_TIM3_Init>
  MX_DAC1_Init();
 8000faa:	f000 f979 	bl	80012a0 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000fae:	f000 f9fb 	bl	80013a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000fb2:	213c      	movs	r1, #60	; 0x3c
 8000fb4:	4888      	ldr	r0, [pc, #544]	; (80011d8 <main+0x248>)
 8000fb6:	f002 fd2b 	bl	8003a10 <HAL_TIM_Encoder_Start>
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 1);

//  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
  HAL_TIM_Base_Start(&htim2);
 8000fba:	4888      	ldr	r0, [pc, #544]	; (80011dc <main+0x24c>)
 8000fbc:	f002 fa9e 	bl	80034fc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4886      	ldr	r0, [pc, #536]	; (80011dc <main+0x24c>)
 8000fc4:	f002 fb6c 	bl	80036a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000fc8:	2104      	movs	r1, #4
 8000fca:	4884      	ldr	r0, [pc, #528]	; (80011dc <main+0x24c>)
 8000fcc:	f002 fb68 	bl	80036a0 <HAL_TIM_PWM_Start>

  PID.Kp =0.1;
 8000fd0:	4b83      	ldr	r3, [pc, #524]	; (80011e0 <main+0x250>)
 8000fd2:	4a84      	ldr	r2, [pc, #528]	; (80011e4 <main+0x254>)
 8000fd4:	619a      	str	r2, [r3, #24]
  PID.Ki =0.00001;
 8000fd6:	4b82      	ldr	r3, [pc, #520]	; (80011e0 <main+0x250>)
 8000fd8:	4a83      	ldr	r2, [pc, #524]	; (80011e8 <main+0x258>)
 8000fda:	61da      	str	r2, [r3, #28]
  PID.Kd = 0.1;
 8000fdc:	4b80      	ldr	r3, [pc, #512]	; (80011e0 <main+0x250>)
 8000fde:	4a81      	ldr	r2, [pc, #516]	; (80011e4 <main+0x254>)
 8000fe0:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	487e      	ldr	r0, [pc, #504]	; (80011e0 <main+0x250>)
 8000fe6:	f004 fb6f 	bl	80056c8 <arm_pid_init_f32>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8000fea:	4b7b      	ldr	r3, [pc, #492]	; (80011d8 <main+0x248>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	4a7e      	ldr	r2, [pc, #504]	; (80011ec <main+0x25c>)
 8000ff2:	6013      	str	r3, [r2, #0]
	  zeta = QEIReadRaw/3071.0*360.0;
 8000ff4:	4b7d      	ldr	r3, [pc, #500]	; (80011ec <main+0x25c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fa4f 	bl	800049c <__aeabi_ui2d>
 8000ffe:	a370      	add	r3, pc, #448	; (adr r3, 80011c0 <main+0x230>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	f7ff fbee 	bl	80007e4 <__aeabi_ddiv>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	4b76      	ldr	r3, [pc, #472]	; (80011f0 <main+0x260>)
 8001016:	f7ff fabb 	bl	8000590 <__aeabi_dmul>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fd4f 	bl	8000ac4 <__aeabi_d2iz>
 8001026:	4603      	mov	r3, r0
 8001028:	4a72      	ldr	r2, [pc, #456]	; (80011f4 <main+0x264>)
 800102a:	6013      	str	r3, [r2, #0]

	  //PID
	  static uint32_t timestamp =0;
	  if(timestamp < HAL_GetTick())
 800102c:	f000 fd2a 	bl	8001a84 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	4b71      	ldr	r3, [pc, #452]	; (80011f8 <main+0x268>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d94c      	bls.n	80010d4 <main+0x144>
	  {
	  timestamp = HAL_GetTick()+10;
 800103a:	f000 fd23 	bl	8001a84 <HAL_GetTick>
 800103e:	4603      	mov	r3, r0
 8001040:	330a      	adds	r3, #10
 8001042:	4a6d      	ldr	r2, [pc, #436]	; (80011f8 <main+0x268>)
 8001044:	6013      	str	r3, [r2, #0]
	  Vfeedback = arm_pid_f32(&PID, setposition - position);
 8001046:	4b6d      	ldr	r3, [pc, #436]	; (80011fc <main+0x26c>)
 8001048:	ed93 7a00 	vldr	s14, [r3]
 800104c:	4b6c      	ldr	r3, [pc, #432]	; (8001200 <main+0x270>)
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001056:	4b62      	ldr	r3, [pc, #392]	; (80011e0 <main+0x250>)
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	ed93 7a00 	vldr	s14, [r3]
 8001064:	edd7 7a02 	vldr	s15, [r7, #8]
 8001068:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	edd3 7a03 	vldr	s15, [r3, #12]
 8001078:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800107c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	edd3 6a02 	vldr	s13, [r3, #8]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	edd3 7a04 	vldr	s15, [r3, #16]
 800108c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001090:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800109a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109e:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	68da      	ldr	r2, [r3, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a52      	ldr	r2, [pc, #328]	; (8001204 <main+0x274>)
 80010ba:	6013      	str	r3, [r2, #0]
	  position = PlantSimulation(Vfeedback);
 80010bc:	4b51      	ldr	r3, [pc, #324]	; (8001204 <main+0x274>)
 80010be:	edd3 7a00 	vldr	s15, [r3]
 80010c2:	eeb0 0a67 	vmov.f32	s0, s15
 80010c6:	f7ff fef3 	bl	8000eb0 <PlantSimulation>
 80010ca:	eef0 7a40 	vmov.f32	s15, s0
 80010ce:	4b4c      	ldr	r3, [pc, #304]	; (8001200 <main+0x270>)
 80010d0:	edc3 7a00 	vstr	s15, [r3]
	  }

	  //Motordrive
	  if ((zeta>position*0.97 && zeta<position*1.03)||(zeta>355 && zeta<5))//setposition==0&& || zeta<position*1.02
 80010d4:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <main+0x264>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f9ef 	bl	80004bc <__aeabi_i2d>
 80010de:	4604      	mov	r4, r0
 80010e0:	460d      	mov	r5, r1
 80010e2:	4b47      	ldr	r3, [pc, #284]	; (8001200 <main+0x270>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f9fa 	bl	80004e0 <__aeabi_f2d>
 80010ec:	a336      	add	r3, pc, #216	; (adr r3, 80011c8 <main+0x238>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff fa4d 	bl	8000590 <__aeabi_dmul>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4620      	mov	r0, r4
 80010fc:	4629      	mov	r1, r5
 80010fe:	f7ff fcd7 	bl	8000ab0 <__aeabi_dcmpgt>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d019      	beq.n	800113c <main+0x1ac>
 8001108:	4b3a      	ldr	r3, [pc, #232]	; (80011f4 <main+0x264>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f9d5 	bl	80004bc <__aeabi_i2d>
 8001112:	4604      	mov	r4, r0
 8001114:	460d      	mov	r5, r1
 8001116:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <main+0x270>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f9e0 	bl	80004e0 <__aeabi_f2d>
 8001120:	a32b      	add	r3, pc, #172	; (adr r3, 80011d0 <main+0x240>)
 8001122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001126:	f7ff fa33 	bl	8000590 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4620      	mov	r0, r4
 8001130:	4629      	mov	r1, r5
 8001132:	f7ff fc9f 	bl	8000a74 <__aeabi_dcmplt>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d108      	bne.n	800114e <main+0x1be>
 800113c:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <main+0x264>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 8001144:	db0b      	blt.n	800115e <main+0x1ce>
 8001146:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <main+0x264>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b04      	cmp	r3, #4
 800114c:	dc07      	bgt.n	800115e <main+0x1ce>
	  {
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800114e:	4b23      	ldr	r3, [pc, #140]	; (80011dc <main+0x24c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2200      	movs	r2, #0
 8001154:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <main+0x24c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2200      	movs	r2, #0
 800115c:	639a      	str	r2, [r3, #56]	; 0x38
	  }
	  if(zeta<setposition){
 800115e:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <main+0x264>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	ee07 3a90 	vmov	s15, r3
 8001166:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800116a:	4b24      	ldr	r3, [pc, #144]	; (80011fc <main+0x26c>)
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	d508      	bpl.n	800118c <main+0x1fc>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 10000);
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <main+0x24c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001182:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <main+0x24c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2200      	movs	r2, #0
 800118a:	639a      	str	r2, [r3, #56]	; 0x38
	  }if(zeta>setposition){
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <main+0x264>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <main+0x26c>)
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a6:	dd08      	ble.n	80011ba <main+0x22a>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <main+0x24c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2200      	movs	r2, #0
 80011ae:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 10000);
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <main+0x24c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f242 7210 	movw	r2, #10000	; 0x2710
 80011b8:	639a      	str	r2, [r3, #56]	; 0x38
  {
 80011ba:	e716      	b.n	8000fea <main+0x5a>
 80011bc:	f3af 8000 	nop.w
 80011c0:	00000000 	.word	0x00000000
 80011c4:	40a7fe00 	.word	0x40a7fe00
 80011c8:	70a3d70a 	.word	0x70a3d70a
 80011cc:	3fef0a3d 	.word	0x3fef0a3d
 80011d0:	47ae147b 	.word	0x47ae147b
 80011d4:	3ff07ae1 	.word	0x3ff07ae1
 80011d8:	20000120 	.word	0x20000120
 80011dc:	200000d4 	.word	0x200000d4
 80011e0:	20000174 	.word	0x20000174
 80011e4:	3dcccccd 	.word	0x3dcccccd
 80011e8:	3727c5ac 	.word	0x3727c5ac
 80011ec:	2000016c 	.word	0x2000016c
 80011f0:	40768000 	.word	0x40768000
 80011f4:	20000170 	.word	0x20000170
 80011f8:	200001a8 	.word	0x200001a8
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000198 	.word	0x20000198
 8001204:	2000019c 	.word	0x2000019c

08001208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b094      	sub	sp, #80	; 0x50
 800120c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120e:	f107 0318 	add.w	r3, r7, #24
 8001212:	2238      	movs	r2, #56	; 0x38
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f004 fa8c 	bl	8005734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800122a:	2000      	movs	r0, #0
 800122c:	f001 f8de 	bl	80023ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001230:	2302      	movs	r3, #2
 8001232:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800123a:	2340      	movs	r3, #64	; 0x40
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001242:	2302      	movs	r3, #2
 8001244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001246:	2304      	movs	r3, #4
 8001248:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800124a:	2355      	movs	r3, #85	; 0x55
 800124c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800124e:	2302      	movs	r3, #2
 8001250:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 0318 	add.w	r3, r7, #24
 800125e:	4618      	mov	r0, r3
 8001260:	f001 f978 	bl	8002554 <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800126a:	f000 f9e5 	bl	8001638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	230f      	movs	r3, #15
 8001270:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001272:	2303      	movs	r3, #3
 8001274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2104      	movs	r1, #4
 8001286:	4618      	mov	r0, r3
 8001288:	f001 fc76 	bl	8002b78 <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001292:	f000 f9d1 	bl	8001638 <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	3750      	adds	r7, #80	; 0x50
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08c      	sub	sp, #48	; 0x30
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012a6:	463b      	mov	r3, r7
 80012a8:	2230      	movs	r2, #48	; 0x30
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f004 fa41 	bl	8005734 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <MX_DAC1_Init+0x6c>)
 80012b4:	4a16      	ldr	r2, [pc, #88]	; (8001310 <MX_DAC1_Init+0x70>)
 80012b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012b8:	4814      	ldr	r0, [pc, #80]	; (800130c <MX_DAC1_Init+0x6c>)
 80012ba:	f000 fcfe 	bl	8001cba <HAL_DAC_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012c4:	f000 f9b8 	bl	8001638 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80012c8:	2302      	movs	r3, #2
 80012ca:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	4619      	mov	r1, r3
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <MX_DAC1_Init+0x6c>)
 80012f4:	f000 fd04 	bl	8001d00 <HAL_DAC_ConfigChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80012fe:	f000 f99b 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	3730      	adds	r7, #48	; 0x30
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000002c 	.word	0x2000002c
 8001310:	50000800 	.word	0x50000800

08001314 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001318:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <MX_LPUART1_UART_Init+0x8c>)
 800131a:	4a22      	ldr	r2, [pc, #136]	; (80013a4 <MX_LPUART1_UART_Init+0x90>)
 800131c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <MX_LPUART1_UART_Init+0x8c>)
 8001320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001324:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <MX_LPUART1_UART_Init+0x8c>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_LPUART1_UART_Init+0x8c>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <MX_LPUART1_UART_Init+0x8c>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_LPUART1_UART_Init+0x8c>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <MX_LPUART1_UART_Init+0x8c>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001344:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <MX_LPUART1_UART_Init+0x8c>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <MX_LPUART1_UART_Init+0x8c>)
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <MX_LPUART1_UART_Init+0x8c>)
 8001352:	2200      	movs	r2, #0
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001356:	4812      	ldr	r0, [pc, #72]	; (80013a0 <MX_LPUART1_UART_Init+0x8c>)
 8001358:	f003 fb48 	bl	80049ec <HAL_UART_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001362:	f000 f969 	bl	8001638 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001366:	2100      	movs	r1, #0
 8001368:	480d      	ldr	r0, [pc, #52]	; (80013a0 <MX_LPUART1_UART_Init+0x8c>)
 800136a:	f004 f8e3 	bl	8005534 <HAL_UARTEx_SetTxFifoThreshold>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001374:	f000 f960 	bl	8001638 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001378:	2100      	movs	r1, #0
 800137a:	4809      	ldr	r0, [pc, #36]	; (80013a0 <MX_LPUART1_UART_Init+0x8c>)
 800137c:	f004 f918 	bl	80055b0 <HAL_UARTEx_SetRxFifoThreshold>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001386:	f000 f957 	bl	8001638 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_LPUART1_UART_Init+0x8c>)
 800138c:	f004 f899 	bl	80054c2 <HAL_UARTEx_DisableFifoMode>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001396:	f000 f94f 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000040 	.word	0x20000040
 80013a4:	40008000 	.word	0x40008000

080013a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08e      	sub	sp, #56	; 0x38
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c8:	463b      	mov	r3, r7
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]
 80013d6:	615a      	str	r2, [r3, #20]
 80013d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013da:	4b33      	ldr	r3, [pc, #204]	; (80014a8 <MX_TIM2_Init+0x100>)
 80013dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013e2:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <MX_TIM2_Init+0x100>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e8:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <MX_TIM2_Init+0x100>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 80013ee:	4b2e      	ldr	r3, [pc, #184]	; (80014a8 <MX_TIM2_Init+0x100>)
 80013f0:	4a2e      	ldr	r2, [pc, #184]	; (80014ac <MX_TIM2_Init+0x104>)
 80013f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f4:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <MX_TIM2_Init+0x100>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fa:	4b2b      	ldr	r3, [pc, #172]	; (80014a8 <MX_TIM2_Init+0x100>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001400:	4829      	ldr	r0, [pc, #164]	; (80014a8 <MX_TIM2_Init+0x100>)
 8001402:	f002 f823 	bl	800344c <HAL_TIM_Base_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800140c:	f000 f914 	bl	8001638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001416:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800141a:	4619      	mov	r1, r3
 800141c:	4822      	ldr	r0, [pc, #136]	; (80014a8 <MX_TIM2_Init+0x100>)
 800141e:	f002 fc99 	bl	8003d54 <HAL_TIM_ConfigClockSource>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001428:	f000 f906 	bl	8001638 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800142c:	481e      	ldr	r0, [pc, #120]	; (80014a8 <MX_TIM2_Init+0x100>)
 800142e:	f002 f8d5 	bl	80035dc <HAL_TIM_PWM_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001438:	f000 f8fe 	bl	8001638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	4619      	mov	r1, r3
 800144a:	4817      	ldr	r0, [pc, #92]	; (80014a8 <MX_TIM2_Init+0x100>)
 800144c:	f003 fa38 	bl	80048c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001456:	f000 f8ef 	bl	8001638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145a:	2360      	movs	r3, #96	; 0x60
 800145c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50000;
 800145e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001462:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146c:	463b      	mov	r3, r7
 800146e:	2200      	movs	r2, #0
 8001470:	4619      	mov	r1, r3
 8001472:	480d      	ldr	r0, [pc, #52]	; (80014a8 <MX_TIM2_Init+0x100>)
 8001474:	f002 fb5a 	bl	8003b2c <HAL_TIM_PWM_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800147e:	f000 f8db 	bl	8001638 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001482:	463b      	mov	r3, r7
 8001484:	2204      	movs	r2, #4
 8001486:	4619      	mov	r1, r3
 8001488:	4807      	ldr	r0, [pc, #28]	; (80014a8 <MX_TIM2_Init+0x100>)
 800148a:	f002 fb4f 	bl	8003b2c <HAL_TIM_PWM_ConfigChannel>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001494:	f000 f8d0 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001498:	4803      	ldr	r0, [pc, #12]	; (80014a8 <MX_TIM2_Init+0x100>)
 800149a:	f000 f9ed 	bl	8001878 <HAL_TIM_MspPostInit>

}
 800149e:	bf00      	nop
 80014a0:	3738      	adds	r7, #56	; 0x38
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200000d4 	.word	0x200000d4
 80014ac:	0001869f 	.word	0x0001869f

080014b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	; 0x30
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	2224      	movs	r2, #36	; 0x24
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f004 f938 	bl	8005734 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c4:	463b      	mov	r3, r7
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ce:	4b21      	ldr	r3, [pc, #132]	; (8001554 <MX_TIM3_Init+0xa4>)
 80014d0:	4a21      	ldr	r2, [pc, #132]	; (8001558 <MX_TIM3_Init+0xa8>)
 80014d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014d4:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <MX_TIM3_Init+0xa4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014da:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <MX_TIM3_Init+0xa4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <MX_TIM3_Init+0xa4>)
 80014e2:	f640 32ff 	movw	r2, #3071	; 0xbff
 80014e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <MX_TIM3_Init+0xa4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ee:	4b19      	ldr	r3, [pc, #100]	; (8001554 <MX_TIM3_Init+0xa4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014f4:	2303      	movs	r3, #3
 80014f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014fc:	2301      	movs	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800150c:	2301      	movs	r3, #1
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	4619      	mov	r1, r3
 800151e:	480d      	ldr	r0, [pc, #52]	; (8001554 <MX_TIM3_Init+0xa4>)
 8001520:	f002 f9d0 	bl	80038c4 <HAL_TIM_Encoder_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800152a:	f000 f885 	bl	8001638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001536:	463b      	mov	r3, r7
 8001538:	4619      	mov	r1, r3
 800153a:	4806      	ldr	r0, [pc, #24]	; (8001554 <MX_TIM3_Init+0xa4>)
 800153c:	f003 f9c0 	bl	80048c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001546:	f000 f877 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	3730      	adds	r7, #48	; 0x30
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000120 	.word	0x20000120
 8001558:	40000400 	.word	0x40000400

0800155c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001572:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <MX_GPIO_Init+0xd4>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001576:	4a2e      	ldr	r2, [pc, #184]	; (8001630 <MX_GPIO_Init+0xd4>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157e:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <MX_GPIO_Init+0xd4>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800158a:	4b29      	ldr	r3, [pc, #164]	; (8001630 <MX_GPIO_Init+0xd4>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	4a28      	ldr	r2, [pc, #160]	; (8001630 <MX_GPIO_Init+0xd4>)
 8001590:	f043 0320 	orr.w	r3, r3, #32
 8001594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001596:	4b26      	ldr	r3, [pc, #152]	; (8001630 <MX_GPIO_Init+0xd4>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	f003 0320 	and.w	r3, r3, #32
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	4b23      	ldr	r3, [pc, #140]	; (8001630 <MX_GPIO_Init+0xd4>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	4a22      	ldr	r2, [pc, #136]	; (8001630 <MX_GPIO_Init+0xd4>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <MX_GPIO_Init+0xd4>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ba:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <MX_GPIO_Init+0xd4>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <MX_GPIO_Init+0xd4>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <MX_GPIO_Init+0xd4>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2120      	movs	r1, #32
 80015d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015da:	f000 fecb 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	480f      	ldr	r0, [pc, #60]	; (8001634 <MX_GPIO_Init+0xd8>)
 80015f6:	f000 fd3b 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015fa:	2320      	movs	r3, #32
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001614:	f000 fd2c 	bl	8002070 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	2028      	movs	r0, #40	; 0x28
 800161e:	f000 fb18 	bl	8001c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001622:	2028      	movs	r0, #40	; 0x28
 8001624:	f000 fb2f 	bl	8001c86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	; 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000
 8001634:	48000800 	.word	0x48000800

08001638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800163c:	b672      	cpsid	i
}
 800163e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001640:	e7fe      	b.n	8001640 <Error_Handler+0x8>
	...

08001644 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_MspInit+0x44>)
 800164c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164e:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <HAL_MspInit+0x44>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6613      	str	r3, [r2, #96]	; 0x60
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <HAL_MspInit+0x44>)
 8001658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_MspInit+0x44>)
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_MspInit+0x44>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	6593      	str	r3, [r2, #88]	; 0x58
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_MspInit+0x44>)
 8001670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800167a:	f000 ff5b 	bl	8002534 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000

0800168c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a15      	ldr	r2, [pc, #84]	; (8001700 <HAL_DAC_MspInit+0x74>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d124      	bne.n	80016f8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_DAC_MspInit+0x78>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	4a14      	ldr	r2, [pc, #80]	; (8001704 <HAL_DAC_MspInit+0x78>)
 80016b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ba:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_DAC_MspInit+0x78>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <HAL_DAC_MspInit+0x78>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <HAL_DAC_MspInit+0x78>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <HAL_DAC_MspInit+0x78>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016de:	2310      	movs	r3, #16
 80016e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e2:	2303      	movs	r3, #3
 80016e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f4:	f000 fcbc 	bl	8002070 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80016f8:	bf00      	nop
 80016fa:	3728      	adds	r7, #40	; 0x28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	50000800 	.word	0x50000800
 8001704:	40021000 	.word	0x40021000

08001708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b09e      	sub	sp, #120	; 0x78
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	2254      	movs	r2, #84	; 0x54
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f004 f803 	bl	8005734 <memset>
  if(huart->Instance==LPUART1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1f      	ldr	r2, [pc, #124]	; (80017b0 <HAL_UART_MspInit+0xa8>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d136      	bne.n	80017a6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001738:	2320      	movs	r3, #32
 800173a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	4618      	mov	r0, r3
 8001746:	f001 fc33 	bl	8002fb0 <HAL_RCCEx_PeriphCLKConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001750:	f7ff ff72 	bl	8001638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_UART_MspInit+0xac>)
 8001756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001758:	4a16      	ldr	r2, [pc, #88]	; (80017b4 <HAL_UART_MspInit+0xac>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_UART_MspInit+0xac>)
 8001762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_UART_MspInit+0xac>)
 800176e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001770:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <HAL_UART_MspInit+0xac>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <HAL_UART_MspInit+0xac>)
 800177a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001784:	230c      	movs	r3, #12
 8001786:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001794:	230c      	movs	r3, #12
 8001796:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800179c:	4619      	mov	r1, r3
 800179e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a2:	f000 fc65 	bl	8002070 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80017a6:	bf00      	nop
 80017a8:	3778      	adds	r7, #120	; 0x78
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40008000 	.word	0x40008000
 80017b4:	40021000 	.word	0x40021000

080017b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c8:	d10b      	bne.n	80017e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_TIM_Base_MspInit+0x38>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_TIM_Base_MspInit+0x38>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6593      	str	r3, [r2, #88]	; 0x58
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_TIM_Base_MspInit+0x38>)
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000

080017f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a17      	ldr	r2, [pc, #92]	; (8001870 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d128      	bne.n	8001868 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001816:	4b17      	ldr	r3, [pc, #92]	; (8001874 <HAL_TIM_Encoder_MspInit+0x80>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	4a16      	ldr	r2, [pc, #88]	; (8001874 <HAL_TIM_Encoder_MspInit+0x80>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	6593      	str	r3, [r2, #88]	; 0x58
 8001822:	4b14      	ldr	r3, [pc, #80]	; (8001874 <HAL_TIM_Encoder_MspInit+0x80>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_TIM_Encoder_MspInit+0x80>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	4a10      	ldr	r2, [pc, #64]	; (8001874 <HAL_TIM_Encoder_MspInit+0x80>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_TIM_Encoder_MspInit+0x80>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001846:	23c0      	movs	r3, #192	; 0xc0
 8001848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001856:	2302      	movs	r3, #2
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001864:	f000 fc04 	bl	8002070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001868:	bf00      	nop
 800186a:	3728      	adds	r7, #40	; 0x28
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40000400 	.word	0x40000400
 8001874:	40021000 	.word	0x40021000

08001878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001898:	d11c      	bne.n	80018d4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_TIM_MspPostInit+0x64>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <HAL_TIM_MspPostInit+0x64>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_TIM_MspPostInit+0x64>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018b2:	2303      	movs	r3, #3
 80018b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	4619      	mov	r1, r3
 80018cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d0:	f000 fbce 	bl	8002070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018d4:	bf00      	nop
 80018d6:	3720      	adds	r7, #32
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40021000 	.word	0x40021000

080018e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018e4:	e7fe      	b.n	80018e4 <NMI_Handler+0x4>

080018e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <HardFault_Handler+0x4>

080018ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <MemManage_Handler+0x4>

080018f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <UsageFault_Handler+0x4>

080018fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192c:	f000 f898 	bl	8001a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}

08001934 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001938:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800193c:	f000 fd32 	bl	80023a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <SystemInit+0x20>)
 800194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <SystemInit+0x20>)
 8001950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001968:	480d      	ldr	r0, [pc, #52]	; (80019a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800196a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800196c:	f7ff ffea 	bl	8001944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001970:	480c      	ldr	r0, [pc, #48]	; (80019a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001972:	490d      	ldr	r1, [pc, #52]	; (80019a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <LoopForever+0xe>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001978:	e002      	b.n	8001980 <LoopCopyDataInit>

0800197a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800197c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197e:	3304      	adds	r3, #4

08001980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001984:	d3f9      	bcc.n	800197a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001988:	4c0a      	ldr	r4, [pc, #40]	; (80019b4 <LoopForever+0x16>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800198c:	e001      	b.n	8001992 <LoopFillZerobss>

0800198e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001990:	3204      	adds	r2, #4

08001992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001994:	d3fb      	bcc.n	800198e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001996:	f003 fed5 	bl	8005744 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800199a:	f7ff faf9 	bl	8000f90 <main>

0800199e <LoopForever>:

LoopForever:
    b LoopForever
 800199e:	e7fe      	b.n	800199e <LoopForever>
  ldr   r0, =_estack
 80019a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80019ac:	080057f4 	.word	0x080057f4
  ldr r2, =_sbss
 80019b0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80019b4:	200001b0 	.word	0x200001b0

080019b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC1_2_IRQHandler>

080019ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c4:	2003      	movs	r0, #3
 80019c6:	f000 f939 	bl	8001c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ca:	2000      	movs	r0, #0
 80019cc:	f000 f80e 	bl	80019ec <HAL_InitTick>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	71fb      	strb	r3, [r7, #7]
 80019da:	e001      	b.n	80019e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019dc:	f7ff fe32 	bl	8001644 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019e0:	79fb      	ldrb	r3, [r7, #7]

}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <HAL_InitTick+0x68>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d022      	beq.n	8001a46 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_InitTick+0x6c>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <HAL_InitTick+0x68>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f944 	bl	8001ca2 <HAL_SYSTICK_Config>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10f      	bne.n	8001a40 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b0f      	cmp	r3, #15
 8001a24:	d809      	bhi.n	8001a3a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a26:	2200      	movs	r2, #0
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2e:	f000 f910 	bl	8001c52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <HAL_InitTick+0x70>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	e007      	b.n	8001a4a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
 8001a3e:	e004      	b.n	8001a4a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
 8001a44:	e001      	b.n	8001a4a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	2000000c 	.word	0x2000000c
 8001a58:	20000004 	.word	0x20000004
 8001a5c:	20000008 	.word	0x20000008

08001a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_IncTick+0x1c>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_IncTick+0x20>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	4a03      	ldr	r2, [pc, #12]	; (8001a7c <HAL_IncTick+0x1c>)
 8001a70:	6013      	str	r3, [r2, #0]
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	200001ac 	.word	0x200001ac
 8001a80:	2000000c 	.word	0x2000000c

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	200001ac 	.word	0x200001ac

08001a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	60d3      	str	r3, [r2, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <__NVIC_GetPriorityGrouping+0x18>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0307 	and.w	r3, r3, #7
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	db0b      	blt.n	8001b2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f003 021f 	and.w	r2, r3, #31
 8001b18:	4907      	ldr	r1, [pc, #28]	; (8001b38 <__NVIC_EnableIRQ+0x38>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	2001      	movs	r0, #1
 8001b22:	fa00 f202 	lsl.w	r2, r0, r2
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000e100 	.word	0xe000e100

08001b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	db0a      	blt.n	8001b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	490c      	ldr	r1, [pc, #48]	; (8001b88 <__NVIC_SetPriority+0x4c>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b64:	e00a      	b.n	8001b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4908      	ldr	r1, [pc, #32]	; (8001b8c <__NVIC_SetPriority+0x50>)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	3b04      	subs	r3, #4
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	440b      	add	r3, r1
 8001b7a:	761a      	strb	r2, [r3, #24]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000e100 	.word	0xe000e100
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f1c3 0307 	rsb	r3, r3, #7
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	bf28      	it	cs
 8001bae:	2304      	movcs	r3, #4
 8001bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d902      	bls.n	8001bc0 <NVIC_EncodePriority+0x30>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3b03      	subs	r3, #3
 8001bbe:	e000      	b.n	8001bc2 <NVIC_EncodePriority+0x32>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	43d9      	mvns	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	4313      	orrs	r3, r2
         );
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3724      	adds	r7, #36	; 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c08:	d301      	bcc.n	8001c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00f      	b.n	8001c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <SysTick_Config+0x40>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c16:	210f      	movs	r1, #15
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f7ff ff8e 	bl	8001b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <SysTick_Config+0x40>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <SysTick_Config+0x40>)
 8001c28:	2207      	movs	r2, #7
 8001c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	e000e010 	.word	0xe000e010

08001c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff29 	bl	8001a9c <__NVIC_SetPriorityGrouping>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c60:	f7ff ff40 	bl	8001ae4 <__NVIC_GetPriorityGrouping>
 8001c64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	6978      	ldr	r0, [r7, #20]
 8001c6c:	f7ff ff90 	bl	8001b90 <NVIC_EncodePriority>
 8001c70:	4602      	mov	r2, r0
 8001c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff5f 	bl	8001b3c <__NVIC_SetPriority>
}
 8001c7e:	bf00      	nop
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff33 	bl	8001b00 <__NVIC_EnableIRQ>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ffa4 	bl	8001bf8 <SysTick_Config>
 8001cb0:	4603      	mov	r3, r0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e014      	b.n	8001cf6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	791b      	ldrb	r3, [r3, #4]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d105      	bne.n	8001ce2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff fcd5 	bl	800168c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <HAL_DAC_ConfigChannel+0x1c>
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e19e      	b.n	800205e <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	795b      	ldrb	r3, [r3, #5]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_DAC_ConfigChannel+0x2c>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e198      	b.n	800205e <HAL_DAC_ConfigChannel+0x35e>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2202      	movs	r2, #2
 8001d36:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d17a      	bne.n	8001e36 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001d40:	f7ff fea0 	bl	8001a84 <HAL_GetTick>
 8001d44:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d13d      	bne.n	8001dc8 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001d4c:	e018      	b.n	8001d80 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001d4e:	f7ff fe99 	bl	8001a84 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d911      	bls.n	8001d80 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00a      	beq.n	8001d80 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f043 0208 	orr.w	r2, r3, #8
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2203      	movs	r2, #3
 8001d7a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e16e      	b.n	800205e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1df      	bne.n	8001d4e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40
 8001d98:	e020      	b.n	8001ddc <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001d9a:	f7ff fe73 	bl	8001a84 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d90f      	bls.n	8001dc8 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	da0a      	bge.n	8001dc8 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f043 0208 	orr.w	r2, r3, #8
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e14a      	b.n	800205e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	dbe3      	blt.n	8001d9a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dda:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	ea02 0103 	and.w	r1, r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	409a      	lsls	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f003 0310 	and.w	r3, r3, #16
 8001e16:	21ff      	movs	r1, #255	; 0xff
 8001e18:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	ea02 0103 	and.w	r1, r2, r3
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d11d      	bne.n	8001e7a <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	221f      	movs	r2, #31
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e56:	4013      	ands	r3, r2
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e78:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2207      	movs	r2, #7
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e92:	4013      	ands	r3, r2
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d102      	bne.n	8001ea4 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
 8001ea2:	e00f      	b.n	8001ec4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d102      	bne.n	8001eb2 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001eac:	2301      	movs	r3, #1
 8001eae:	623b      	str	r3, [r7, #32]
 8001eb0:	e008      	b.n	8001ec4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d102      	bne.n	8001ec0 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	623b      	str	r3, [r7, #32]
 8001ebe:	e001      	b.n	8001ec4 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	6a3a      	ldr	r2, [r7, #32]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	791b      	ldrb	r3, [r3, #4]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d102      	bne.n	8001ef8 <HAL_DAC_ConfigChannel+0x1f8>
 8001ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ef6:	e000      	b.n	8001efa <HAL_DAC_ConfigChannel+0x1fa>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f12:	4013      	ands	r3, r2
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	795b      	ldrb	r3, [r3, #5]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d102      	bne.n	8001f24 <HAL_DAC_ConfigChannel+0x224>
 8001f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f22:	e000      	b.n	8001f26 <HAL_DAC_ConfigChannel+0x226>
 8001f24:	2300      	movs	r3, #0
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d114      	bne.n	8001f66 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001f3c:	f000 ffba 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8001f40:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4a48      	ldr	r2, [pc, #288]	; (8002068 <HAL_DAC_ConfigChannel+0x368>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d904      	bls.n	8001f54 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
 8001f52:	e00f      	b.n	8001f74 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4a45      	ldr	r2, [pc, #276]	; (800206c <HAL_DAC_ConfigChannel+0x36c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d90a      	bls.n	8001f72 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
 8001f64:	e006      	b.n	8001f74 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f70:	e000      	b.n	8001f74 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001f72:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f82:	4313      	orrs	r3, r2
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6819      	ldr	r1, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	400a      	ands	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6819      	ldr	r1, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	22c0      	movs	r2, #192	; 0xc0
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43da      	mvns	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	400a      	ands	r2, r1
 8002004:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	f640 710f 	movw	r1, #3855	; 0xf0f
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	ea02 0103 	and.w	r1, r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	409a      	lsls	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800205c:	7ffb      	ldrb	r3, [r7, #31]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3728      	adds	r7, #40	; 0x28
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	09896800 	.word	0x09896800
 800206c:	04c4b400 	.word	0x04c4b400

08002070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800207e:	e15a      	b.n	8002336 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2101      	movs	r1, #1
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	4013      	ands	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 814c 	beq.w	8002330 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d005      	beq.n	80020b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d130      	bne.n	8002112 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	2203      	movs	r2, #3
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020e6:	2201      	movs	r2, #1
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	091b      	lsrs	r3, r3, #4
 80020fc:	f003 0201 	and.w	r2, r3, #1
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b03      	cmp	r3, #3
 800211c:	d017      	beq.n	800214e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	2203      	movs	r2, #3
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4013      	ands	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d123      	bne.n	80021a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	08da      	lsrs	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3208      	adds	r2, #8
 8002162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002166:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	220f      	movs	r2, #15
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	08da      	lsrs	r2, r3, #3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3208      	adds	r2, #8
 800219c:	6939      	ldr	r1, [r7, #16]
 800219e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 0203 	and.w	r2, r3, #3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 80a6 	beq.w	8002330 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e4:	4b5b      	ldr	r3, [pc, #364]	; (8002354 <HAL_GPIO_Init+0x2e4>)
 80021e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e8:	4a5a      	ldr	r2, [pc, #360]	; (8002354 <HAL_GPIO_Init+0x2e4>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6613      	str	r3, [r2, #96]	; 0x60
 80021f0:	4b58      	ldr	r3, [pc, #352]	; (8002354 <HAL_GPIO_Init+0x2e4>)
 80021f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021fc:	4a56      	ldr	r2, [pc, #344]	; (8002358 <HAL_GPIO_Init+0x2e8>)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	089b      	lsrs	r3, r3, #2
 8002202:	3302      	adds	r3, #2
 8002204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	220f      	movs	r2, #15
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002226:	d01f      	beq.n	8002268 <HAL_GPIO_Init+0x1f8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a4c      	ldr	r2, [pc, #304]	; (800235c <HAL_GPIO_Init+0x2ec>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d019      	beq.n	8002264 <HAL_GPIO_Init+0x1f4>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a4b      	ldr	r2, [pc, #300]	; (8002360 <HAL_GPIO_Init+0x2f0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d013      	beq.n	8002260 <HAL_GPIO_Init+0x1f0>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a4a      	ldr	r2, [pc, #296]	; (8002364 <HAL_GPIO_Init+0x2f4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d00d      	beq.n	800225c <HAL_GPIO_Init+0x1ec>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a49      	ldr	r2, [pc, #292]	; (8002368 <HAL_GPIO_Init+0x2f8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d007      	beq.n	8002258 <HAL_GPIO_Init+0x1e8>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a48      	ldr	r2, [pc, #288]	; (800236c <HAL_GPIO_Init+0x2fc>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d101      	bne.n	8002254 <HAL_GPIO_Init+0x1e4>
 8002250:	2305      	movs	r3, #5
 8002252:	e00a      	b.n	800226a <HAL_GPIO_Init+0x1fa>
 8002254:	2306      	movs	r3, #6
 8002256:	e008      	b.n	800226a <HAL_GPIO_Init+0x1fa>
 8002258:	2304      	movs	r3, #4
 800225a:	e006      	b.n	800226a <HAL_GPIO_Init+0x1fa>
 800225c:	2303      	movs	r3, #3
 800225e:	e004      	b.n	800226a <HAL_GPIO_Init+0x1fa>
 8002260:	2302      	movs	r3, #2
 8002262:	e002      	b.n	800226a <HAL_GPIO_Init+0x1fa>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <HAL_GPIO_Init+0x1fa>
 8002268:	2300      	movs	r3, #0
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	f002 0203 	and.w	r2, r2, #3
 8002270:	0092      	lsls	r2, r2, #2
 8002272:	4093      	lsls	r3, r2
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800227a:	4937      	ldr	r1, [pc, #220]	; (8002358 <HAL_GPIO_Init+0x2e8>)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	3302      	adds	r3, #2
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002288:	4b39      	ldr	r3, [pc, #228]	; (8002370 <HAL_GPIO_Init+0x300>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	43db      	mvns	r3, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022ac:	4a30      	ldr	r2, [pc, #192]	; (8002370 <HAL_GPIO_Init+0x300>)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022b2:	4b2f      	ldr	r3, [pc, #188]	; (8002370 <HAL_GPIO_Init+0x300>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022d6:	4a26      	ldr	r2, [pc, #152]	; (8002370 <HAL_GPIO_Init+0x300>)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80022dc:	4b24      	ldr	r3, [pc, #144]	; (8002370 <HAL_GPIO_Init+0x300>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002300:	4a1b      	ldr	r2, [pc, #108]	; (8002370 <HAL_GPIO_Init+0x300>)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002306:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <HAL_GPIO_Init+0x300>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800232a:	4a11      	ldr	r2, [pc, #68]	; (8002370 <HAL_GPIO_Init+0x300>)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	3301      	adds	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	f47f ae9d 	bne.w	8002080 <HAL_GPIO_Init+0x10>
  }
}
 8002346:	bf00      	nop
 8002348:	bf00      	nop
 800234a:	371c      	adds	r7, #28
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40021000 	.word	0x40021000
 8002358:	40010000 	.word	0x40010000
 800235c:	48000400 	.word	0x48000400
 8002360:	48000800 	.word	0x48000800
 8002364:	48000c00 	.word	0x48000c00
 8002368:	48001000 	.word	0x48001000
 800236c:	48001400 	.word	0x48001400
 8002370:	40010400 	.word	0x40010400

08002374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
 8002380:	4613      	mov	r3, r2
 8002382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002384:	787b      	ldrb	r3, [r7, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002390:	e002      	b.n	8002398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023ae:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d006      	beq.n	80023c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f806 	bl	80023d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40010400 	.word	0x40010400

080023d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d141      	bne.n	800247e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023fa:	4b4b      	ldr	r3, [pc, #300]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002406:	d131      	bne.n	800246c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002408:	4b47      	ldr	r3, [pc, #284]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800240a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800240e:	4a46      	ldr	r2, [pc, #280]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002414:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002418:	4b43      	ldr	r3, [pc, #268]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002420:	4a41      	ldr	r2, [pc, #260]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002426:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002428:	4b40      	ldr	r3, [pc, #256]	; (800252c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2232      	movs	r2, #50	; 0x32
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	4a3f      	ldr	r2, [pc, #252]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	0c9b      	lsrs	r3, r3, #18
 800243a:	3301      	adds	r3, #1
 800243c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800243e:	e002      	b.n	8002446 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3b01      	subs	r3, #1
 8002444:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002446:	4b38      	ldr	r3, [pc, #224]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002452:	d102      	bne.n	800245a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f2      	bne.n	8002440 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800245a:	4b33      	ldr	r3, [pc, #204]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002466:	d158      	bne.n	800251a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e057      	b.n	800251c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800246c:	4b2e      	ldr	r3, [pc, #184]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800246e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002472:	4a2d      	ldr	r2, [pc, #180]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002478:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800247c:	e04d      	b.n	800251a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002484:	d141      	bne.n	800250a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002486:	4b28      	ldr	r3, [pc, #160]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800248e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002492:	d131      	bne.n	80024f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002494:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800249a:	4a23      	ldr	r2, [pc, #140]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024a4:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024ac:	4a1e      	ldr	r2, [pc, #120]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024b4:	4b1d      	ldr	r3, [pc, #116]	; (800252c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2232      	movs	r2, #50	; 0x32
 80024ba:	fb02 f303 	mul.w	r3, r2, r3
 80024be:	4a1c      	ldr	r2, [pc, #112]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	0c9b      	lsrs	r3, r3, #18
 80024c6:	3301      	adds	r3, #1
 80024c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024ca:	e002      	b.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024de:	d102      	bne.n	80024e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f2      	bne.n	80024cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f2:	d112      	bne.n	800251a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e011      	b.n	800251c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024fe:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002504:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002508:	e007      	b.n	800251a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800250a:	4b07      	ldr	r3, [pc, #28]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002512:	4a05      	ldr	r2, [pc, #20]	; (8002528 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002514:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002518:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	40007000 	.word	0x40007000
 800252c:	20000004 	.word	0x20000004
 8002530:	431bde83 	.word	0x431bde83

08002534 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800253e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002542:	6093      	str	r3, [r2, #8]
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40007000 	.word	0x40007000

08002554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e2fe      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d075      	beq.n	800265e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002572:	4b97      	ldr	r3, [pc, #604]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800257c:	4b94      	ldr	r3, [pc, #592]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	2b0c      	cmp	r3, #12
 800258a:	d102      	bne.n	8002592 <HAL_RCC_OscConfig+0x3e>
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2b03      	cmp	r3, #3
 8002590:	d002      	beq.n	8002598 <HAL_RCC_OscConfig+0x44>
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2b08      	cmp	r3, #8
 8002596:	d10b      	bne.n	80025b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002598:	4b8d      	ldr	r3, [pc, #564]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d05b      	beq.n	800265c <HAL_RCC_OscConfig+0x108>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d157      	bne.n	800265c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e2d9      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b8:	d106      	bne.n	80025c8 <HAL_RCC_OscConfig+0x74>
 80025ba:	4b85      	ldr	r3, [pc, #532]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a84      	ldr	r2, [pc, #528]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	e01d      	b.n	8002604 <HAL_RCC_OscConfig+0xb0>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0x98>
 80025d2:	4b7f      	ldr	r3, [pc, #508]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7e      	ldr	r2, [pc, #504]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 80025d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	4b7c      	ldr	r3, [pc, #496]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a7b      	ldr	r2, [pc, #492]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 80025e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e00b      	b.n	8002604 <HAL_RCC_OscConfig+0xb0>
 80025ec:	4b78      	ldr	r3, [pc, #480]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a77      	ldr	r2, [pc, #476]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 80025f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	4b75      	ldr	r3, [pc, #468]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a74      	ldr	r2, [pc, #464]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 80025fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d013      	beq.n	8002634 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7ff fa3a 	bl	8001a84 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002614:	f7ff fa36 	bl	8001a84 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	; 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e29e      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002626:	4b6a      	ldr	r3, [pc, #424]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0xc0>
 8002632:	e014      	b.n	800265e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7ff fa26 	bl	8001a84 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800263c:	f7ff fa22 	bl	8001a84 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	; 0x64
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e28a      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800264e:	4b60      	ldr	r3, [pc, #384]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0xe8>
 800265a:	e000      	b.n	800265e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d075      	beq.n	8002756 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800266a:	4b59      	ldr	r3, [pc, #356]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002674:	4b56      	ldr	r3, [pc, #344]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	2b0c      	cmp	r3, #12
 8002682:	d102      	bne.n	800268a <HAL_RCC_OscConfig+0x136>
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d002      	beq.n	8002690 <HAL_RCC_OscConfig+0x13c>
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b04      	cmp	r3, #4
 800268e:	d11f      	bne.n	80026d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002690:	4b4f      	ldr	r3, [pc, #316]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_OscConfig+0x154>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e25d      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a8:	4b49      	ldr	r3, [pc, #292]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	061b      	lsls	r3, r3, #24
 80026b6:	4946      	ldr	r1, [pc, #280]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026bc:	4b45      	ldr	r3, [pc, #276]	; (80027d4 <HAL_RCC_OscConfig+0x280>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff f993 	bl	80019ec <HAL_InitTick>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d043      	beq.n	8002754 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e249      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d023      	beq.n	8002720 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d8:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a3c      	ldr	r2, [pc, #240]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 80026de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7ff f9ce 	bl	8001a84 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ec:	f7ff f9ca 	bl	8001a84 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e232      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026fe:	4b34      	ldr	r3, [pc, #208]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270a:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	061b      	lsls	r3, r3, #24
 8002718:	492d      	ldr	r1, [pc, #180]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
 800271e:	e01a      	b.n	8002756 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a2a      	ldr	r2, [pc, #168]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 8002726:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800272a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7ff f9aa 	bl	8001a84 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002734:	f7ff f9a6 	bl	8001a84 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e20e      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002746:	4b22      	ldr	r3, [pc, #136]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x1e0>
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002754:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d041      	beq.n	80027e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d01c      	beq.n	80027a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800276a:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 800276c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002770:	4a17      	ldr	r2, [pc, #92]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277a:	f7ff f983 	bl	8001a84 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002782:	f7ff f97f 	bl	8001a84 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e1e7      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 8002796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0ef      	beq.n	8002782 <HAL_RCC_OscConfig+0x22e>
 80027a2:	e020      	b.n	80027e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a4:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 80027a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027aa:	4a09      	ldr	r2, [pc, #36]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b4:	f7ff f966 	bl	8001a84 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027ba:	e00d      	b.n	80027d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027bc:	f7ff f962 	bl	8001a84 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d906      	bls.n	80027d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e1ca      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027d8:	4b8c      	ldr	r3, [pc, #560]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 80027da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1ea      	bne.n	80027bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 80a6 	beq.w	8002940 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f4:	2300      	movs	r3, #0
 80027f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027f8:	4b84      	ldr	r3, [pc, #528]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCC_OscConfig+0x2b4>
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x2b6>
 8002808:	2300      	movs	r3, #0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00d      	beq.n	800282a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	4b7f      	ldr	r3, [pc, #508]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002812:	4a7e      	ldr	r2, [pc, #504]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 8002814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002818:	6593      	str	r3, [r2, #88]	; 0x58
 800281a:	4b7c      	ldr	r3, [pc, #496]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002826:	2301      	movs	r3, #1
 8002828:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800282a:	4b79      	ldr	r3, [pc, #484]	; (8002a10 <HAL_RCC_OscConfig+0x4bc>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002832:	2b00      	cmp	r3, #0
 8002834:	d118      	bne.n	8002868 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002836:	4b76      	ldr	r3, [pc, #472]	; (8002a10 <HAL_RCC_OscConfig+0x4bc>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a75      	ldr	r2, [pc, #468]	; (8002a10 <HAL_RCC_OscConfig+0x4bc>)
 800283c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002840:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002842:	f7ff f91f 	bl	8001a84 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284a:	f7ff f91b 	bl	8001a84 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e183      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800285c:	4b6c      	ldr	r3, [pc, #432]	; (8002a10 <HAL_RCC_OscConfig+0x4bc>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f0      	beq.n	800284a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d108      	bne.n	8002882 <HAL_RCC_OscConfig+0x32e>
 8002870:	4b66      	ldr	r3, [pc, #408]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002876:	4a65      	ldr	r2, [pc, #404]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002880:	e024      	b.n	80028cc <HAL_RCC_OscConfig+0x378>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b05      	cmp	r3, #5
 8002888:	d110      	bne.n	80028ac <HAL_RCC_OscConfig+0x358>
 800288a:	4b60      	ldr	r3, [pc, #384]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002890:	4a5e      	ldr	r2, [pc, #376]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 8002892:	f043 0304 	orr.w	r3, r3, #4
 8002896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800289a:	4b5c      	ldr	r3, [pc, #368]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 800289c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a0:	4a5a      	ldr	r2, [pc, #360]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028aa:	e00f      	b.n	80028cc <HAL_RCC_OscConfig+0x378>
 80028ac:	4b57      	ldr	r3, [pc, #348]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	4a56      	ldr	r2, [pc, #344]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028bc:	4b53      	ldr	r3, [pc, #332]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	4a52      	ldr	r2, [pc, #328]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 80028c4:	f023 0304 	bic.w	r3, r3, #4
 80028c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d016      	beq.n	8002902 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d4:	f7ff f8d6 	bl	8001a84 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028dc:	f7ff f8d2 	bl	8001a84 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e138      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f2:	4b46      	ldr	r3, [pc, #280]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ed      	beq.n	80028dc <HAL_RCC_OscConfig+0x388>
 8002900:	e015      	b.n	800292e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002902:	f7ff f8bf 	bl	8001a84 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290a:	f7ff f8bb 	bl	8001a84 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	; 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e121      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002920:	4b3a      	ldr	r3, [pc, #232]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1ed      	bne.n	800290a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800292e:	7ffb      	ldrb	r3, [r7, #31]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d105      	bne.n	8002940 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002934:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	4a34      	ldr	r2, [pc, #208]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 800293a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b00      	cmp	r3, #0
 800294a:	d03c      	beq.n	80029c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01c      	beq.n	800298e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002954:	4b2d      	ldr	r3, [pc, #180]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 8002956:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800295a:	4a2c      	ldr	r2, [pc, #176]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7ff f88e 	bl	8001a84 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800296c:	f7ff f88a 	bl	8001a84 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e0f2      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800297e:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 8002980:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0ef      	beq.n	800296c <HAL_RCC_OscConfig+0x418>
 800298c:	e01b      	b.n	80029c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800298e:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 8002990:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002994:	4a1d      	ldr	r2, [pc, #116]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299e:	f7ff f871 	bl	8001a84 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029a6:	f7ff f86d 	bl	8001a84 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e0d5      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 80029ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1ef      	bne.n	80029a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 80c9 	beq.w	8002b62 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029d0:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b0c      	cmp	r3, #12
 80029da:	f000 8083 	beq.w	8002ae4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d15e      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a08      	ldr	r2, [pc, #32]	; (8002a0c <HAL_RCC_OscConfig+0x4b8>)
 80029ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f2:	f7ff f847 	bl	8001a84 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f8:	e00c      	b.n	8002a14 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fa:	f7ff f843 	bl	8001a84 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d905      	bls.n	8002a14 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e0ab      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a14:	4b55      	ldr	r3, [pc, #340]	; (8002b6c <HAL_RCC_OscConfig+0x618>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ec      	bne.n	80029fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a20:	4b52      	ldr	r3, [pc, #328]	; (8002b6c <HAL_RCC_OscConfig+0x618>)
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	4b52      	ldr	r3, [pc, #328]	; (8002b70 <HAL_RCC_OscConfig+0x61c>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6a11      	ldr	r1, [r2, #32]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a30:	3a01      	subs	r2, #1
 8002a32:	0112      	lsls	r2, r2, #4
 8002a34:	4311      	orrs	r1, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002a3a:	0212      	lsls	r2, r2, #8
 8002a3c:	4311      	orrs	r1, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a42:	0852      	lsrs	r2, r2, #1
 8002a44:	3a01      	subs	r2, #1
 8002a46:	0552      	lsls	r2, r2, #21
 8002a48:	4311      	orrs	r1, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a4e:	0852      	lsrs	r2, r2, #1
 8002a50:	3a01      	subs	r2, #1
 8002a52:	0652      	lsls	r2, r2, #25
 8002a54:	4311      	orrs	r1, r2
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a5a:	06d2      	lsls	r2, r2, #27
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	4943      	ldr	r1, [pc, #268]	; (8002b6c <HAL_RCC_OscConfig+0x618>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a64:	4b41      	ldr	r3, [pc, #260]	; (8002b6c <HAL_RCC_OscConfig+0x618>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a40      	ldr	r2, [pc, #256]	; (8002b6c <HAL_RCC_OscConfig+0x618>)
 8002a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a70:	4b3e      	ldr	r3, [pc, #248]	; (8002b6c <HAL_RCC_OscConfig+0x618>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4a3d      	ldr	r2, [pc, #244]	; (8002b6c <HAL_RCC_OscConfig+0x618>)
 8002a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7ff f802 	bl	8001a84 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a84:	f7fe fffe 	bl	8001a84 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e066      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a96:	4b35      	ldr	r3, [pc, #212]	; (8002b6c <HAL_RCC_OscConfig+0x618>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x530>
 8002aa2:	e05e      	b.n	8002b62 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa4:	4b31      	ldr	r3, [pc, #196]	; (8002b6c <HAL_RCC_OscConfig+0x618>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a30      	ldr	r2, [pc, #192]	; (8002b6c <HAL_RCC_OscConfig+0x618>)
 8002aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe ffe8 	bl	8001a84 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe ffe4 	bl	8001a84 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e04c      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aca:	4b28      	ldr	r3, [pc, #160]	; (8002b6c <HAL_RCC_OscConfig+0x618>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002ad6:	4b25      	ldr	r3, [pc, #148]	; (8002b6c <HAL_RCC_OscConfig+0x618>)
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	4924      	ldr	r1, [pc, #144]	; (8002b6c <HAL_RCC_OscConfig+0x618>)
 8002adc:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <HAL_RCC_OscConfig+0x620>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	60cb      	str	r3, [r1, #12]
 8002ae2:	e03e      	b.n	8002b62 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e039      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002af0:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <HAL_RCC_OscConfig+0x618>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f003 0203 	and.w	r2, r3, #3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d12c      	bne.n	8002b5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d123      	bne.n	8002b5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b20:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d11b      	bne.n	8002b5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d113      	bne.n	8002b5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	085b      	lsrs	r3, r3, #1
 8002b42:	3b01      	subs	r3, #1
 8002b44:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d109      	bne.n	8002b5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	3b01      	subs	r3, #1
 8002b58:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3720      	adds	r7, #32
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	019f800c 	.word	0x019f800c
 8002b74:	feeefffc 	.word	0xfeeefffc

08002b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e11e      	b.n	8002dce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b90:	4b91      	ldr	r3, [pc, #580]	; (8002dd8 <HAL_RCC_ClockConfig+0x260>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d910      	bls.n	8002bc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b8e      	ldr	r3, [pc, #568]	; (8002dd8 <HAL_RCC_ClockConfig+0x260>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 020f 	bic.w	r2, r3, #15
 8002ba6:	498c      	ldr	r1, [pc, #560]	; (8002dd8 <HAL_RCC_ClockConfig+0x260>)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bae:	4b8a      	ldr	r3, [pc, #552]	; (8002dd8 <HAL_RCC_ClockConfig+0x260>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e106      	b.n	8002dce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d073      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d129      	bne.n	8002c28 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd4:	4b81      	ldr	r3, [pc, #516]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0f4      	b.n	8002dce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002be4:	f000 f99e 	bl	8002f24 <RCC_GetSysClockFreqFromPLLSource>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4a7c      	ldr	r2, [pc, #496]	; (8002de0 <HAL_RCC_ClockConfig+0x268>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d93f      	bls.n	8002c72 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002bf2:	4b7a      	ldr	r3, [pc, #488]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d033      	beq.n	8002c72 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d12f      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c12:	4b72      	ldr	r3, [pc, #456]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c1a:	4a70      	ldr	r2, [pc, #448]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	e024      	b.n	8002c72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d107      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c30:	4b6a      	ldr	r3, [pc, #424]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d109      	bne.n	8002c50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0c6      	b.n	8002dce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c40:	4b66      	ldr	r3, [pc, #408]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0be      	b.n	8002dce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002c50:	f000 f8ce 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8002c54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4a61      	ldr	r2, [pc, #388]	; (8002de0 <HAL_RCC_ClockConfig+0x268>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d909      	bls.n	8002c72 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c5e:	4b5f      	ldr	r3, [pc, #380]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c66:	4a5d      	ldr	r2, [pc, #372]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c72:	4b5a      	ldr	r3, [pc, #360]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f023 0203 	bic.w	r2, r3, #3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4957      	ldr	r1, [pc, #348]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c84:	f7fe fefe 	bl	8001a84 <HAL_GetTick>
 8002c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8a:	e00a      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c8c:	f7fe fefa 	bl	8001a84 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e095      	b.n	8002dce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	4b4e      	ldr	r3, [pc, #312]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 020c 	and.w	r2, r3, #12
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d1eb      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d023      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ccc:	4b43      	ldr	r3, [pc, #268]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4a42      	ldr	r2, [pc, #264]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002cd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cd6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d007      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ce4:	4b3d      	ldr	r3, [pc, #244]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002cec:	4a3b      	ldr	r2, [pc, #236]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002cee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cf2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf4:	4b39      	ldr	r3, [pc, #228]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4936      	ldr	r1, [pc, #216]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b80      	cmp	r3, #128	; 0x80
 8002d0c:	d105      	bne.n	8002d1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d0e:	4b33      	ldr	r3, [pc, #204]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	4a32      	ldr	r2, [pc, #200]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002d14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d1a:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <HAL_RCC_ClockConfig+0x260>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d21d      	bcs.n	8002d64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d28:	4b2b      	ldr	r3, [pc, #172]	; (8002dd8 <HAL_RCC_ClockConfig+0x260>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f023 020f 	bic.w	r2, r3, #15
 8002d30:	4929      	ldr	r1, [pc, #164]	; (8002dd8 <HAL_RCC_ClockConfig+0x260>)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d38:	f7fe fea4 	bl	8001a84 <HAL_GetTick>
 8002d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d40:	f7fe fea0 	bl	8001a84 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e03b      	b.n	8002dce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <HAL_RCC_ClockConfig+0x260>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d1ed      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d70:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4917      	ldr	r1, [pc, #92]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d009      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d8e:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	490f      	ldr	r1, [pc, #60]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002da2:	f000 f825 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8002da6:	4602      	mov	r2, r0
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <HAL_RCC_ClockConfig+0x264>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	490c      	ldr	r1, [pc, #48]	; (8002de4 <HAL_RCC_ClockConfig+0x26c>)
 8002db4:	5ccb      	ldrb	r3, [r1, r3]
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <HAL_RCC_ClockConfig+0x270>)
 8002dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_RCC_ClockConfig+0x274>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe fe10 	bl	80019ec <HAL_InitTick>
 8002dcc:	4603      	mov	r3, r0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40022000 	.word	0x40022000
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	04c4b400 	.word	0x04c4b400
 8002de4:	080057a4 	.word	0x080057a4
 8002de8:	20000004 	.word	0x20000004
 8002dec:	20000008 	.word	0x20000008

08002df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002df6:	4b2c      	ldr	r3, [pc, #176]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d102      	bne.n	8002e08 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e02:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	e047      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e08:	4b27      	ldr	r3, [pc, #156]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d102      	bne.n	8002e1a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e14:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	e03e      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002e1a:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b0c      	cmp	r3, #12
 8002e24:	d136      	bne.n	8002e94 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e26:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e30:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d10c      	bne.n	8002e5e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e44:	4a1a      	ldr	r2, [pc, #104]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4c:	4a16      	ldr	r2, [pc, #88]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e4e:	68d2      	ldr	r2, [r2, #12]
 8002e50:	0a12      	lsrs	r2, r2, #8
 8002e52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e56:	fb02 f303 	mul.w	r3, r2, r3
 8002e5a:	617b      	str	r3, [r7, #20]
      break;
 8002e5c:	e00c      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e5e:	4a13      	ldr	r2, [pc, #76]	; (8002eac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e66:	4a10      	ldr	r2, [pc, #64]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e68:	68d2      	ldr	r2, [r2, #12]
 8002e6a:	0a12      	lsrs	r2, r2, #8
 8002e6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e70:	fb02 f303 	mul.w	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]
      break;
 8002e76:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	0e5b      	lsrs	r3, r3, #25
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	3301      	adds	r3, #1
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	e001      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e98:	693b      	ldr	r3, [r7, #16]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	00f42400 	.word	0x00f42400
 8002eb0:	016e3600 	.word	0x016e3600

08002eb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eba:	681b      	ldr	r3, [r3, #0]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	20000004 	.word	0x20000004

08002ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ed0:	f7ff fff0 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	0a1b      	lsrs	r3, r3, #8
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	4904      	ldr	r1, [pc, #16]	; (8002ef4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	080057b4 	.word	0x080057b4

08002ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002efc:	f7ff ffda 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8002f00:	4602      	mov	r2, r0
 8002f02:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	0adb      	lsrs	r3, r3, #11
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	4904      	ldr	r1, [pc, #16]	; (8002f20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f0e:	5ccb      	ldrb	r3, [r1, r3]
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	080057b4 	.word	0x080057b4

08002f24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	; (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d10c      	bne.n	8002f62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f48:	4a17      	ldr	r2, [pc, #92]	; (8002fa8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f50:	4a14      	ldr	r2, [pc, #80]	; (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f52:	68d2      	ldr	r2, [r2, #12]
 8002f54:	0a12      	lsrs	r2, r2, #8
 8002f56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f5a:	fb02 f303 	mul.w	r3, r2, r3
 8002f5e:	617b      	str	r3, [r7, #20]
    break;
 8002f60:	e00c      	b.n	8002f7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f62:	4a12      	ldr	r2, [pc, #72]	; (8002fac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6a:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f6c:	68d2      	ldr	r2, [r2, #12]
 8002f6e:	0a12      	lsrs	r2, r2, #8
 8002f70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f74:	fb02 f303 	mul.w	r3, r2, r3
 8002f78:	617b      	str	r3, [r7, #20]
    break;
 8002f7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	0e5b      	lsrs	r3, r3, #25
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	3301      	adds	r3, #1
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002f96:	687b      	ldr	r3, [r7, #4]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	016e3600 	.word	0x016e3600
 8002fac:	00f42400 	.word	0x00f42400

08002fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fb8:	2300      	movs	r3, #0
 8002fba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8098 	beq.w	80030fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd2:	4b43      	ldr	r3, [pc, #268]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10d      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	4b40      	ldr	r3, [pc, #256]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe2:	4a3f      	ldr	r2, [pc, #252]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8002fea:	4b3d      	ldr	r3, [pc, #244]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ffa:	4b3a      	ldr	r3, [pc, #232]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a39      	ldr	r2, [pc, #228]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003004:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003006:	f7fe fd3d 	bl	8001a84 <HAL_GetTick>
 800300a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800300c:	e009      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300e:	f7fe fd39 	bl	8001a84 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d902      	bls.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	74fb      	strb	r3, [r7, #19]
        break;
 8003020:	e005      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003022:	4b30      	ldr	r3, [pc, #192]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0ef      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800302e:	7cfb      	ldrb	r3, [r7, #19]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d159      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003034:	4b2a      	ldr	r3, [pc, #168]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01e      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	429a      	cmp	r2, r3
 800304e:	d019      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003050:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800305c:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003062:	4a1f      	ldr	r2, [pc, #124]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800306c:	4b1c      	ldr	r3, [pc, #112]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003072:	4a1b      	ldr	r2, [pc, #108]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800307c:	4a18      	ldr	r2, [pc, #96]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d016      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308e:	f7fe fcf9 	bl	8001a84 <HAL_GetTick>
 8003092:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003094:	e00b      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fe fcf5 	bl	8001a84 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d902      	bls.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	74fb      	strb	r3, [r7, #19]
            break;
 80030ac:	e006      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ae:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0ec      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10b      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030c2:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d0:	4903      	ldr	r1, [pc, #12]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030d8:	e008      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	74bb      	strb	r3, [r7, #18]
 80030de:	e005      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	7cfb      	ldrb	r3, [r7, #19]
 80030ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ec:	7c7b      	ldrb	r3, [r7, #17]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d105      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f2:	4ba7      	ldr	r3, [pc, #668]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	4aa6      	ldr	r2, [pc, #664]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800310a:	4ba1      	ldr	r3, [pc, #644]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800310c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003110:	f023 0203 	bic.w	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	499d      	ldr	r1, [pc, #628]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800312c:	4b98      	ldr	r3, [pc, #608]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003132:	f023 020c 	bic.w	r2, r3, #12
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	4995      	ldr	r1, [pc, #596]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800314e:	4b90      	ldr	r3, [pc, #576]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003154:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	498c      	ldr	r1, [pc, #560]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003170:	4b87      	ldr	r3, [pc, #540]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003176:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	4984      	ldr	r1, [pc, #528]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003192:	4b7f      	ldr	r3, [pc, #508]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	497b      	ldr	r1, [pc, #492]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00a      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031b4:	4b76      	ldr	r3, [pc, #472]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	4973      	ldr	r1, [pc, #460]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031d6:	4b6e      	ldr	r3, [pc, #440]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	496a      	ldr	r1, [pc, #424]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031f8:	4b65      	ldr	r3, [pc, #404]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	4962      	ldr	r1, [pc, #392]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00a      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800321a:	4b5d      	ldr	r3, [pc, #372]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800321c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003220:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	4959      	ldr	r1, [pc, #356]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00a      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800323c:	4b54      	ldr	r3, [pc, #336]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800323e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003242:	f023 0203 	bic.w	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	4951      	ldr	r1, [pc, #324]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800325e:	4b4c      	ldr	r3, [pc, #304]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003264:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	4948      	ldr	r1, [pc, #288]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327c:	2b00      	cmp	r3, #0
 800327e:	d015      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003280:	4b43      	ldr	r3, [pc, #268]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003286:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	4940      	ldr	r1, [pc, #256]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800329e:	d105      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032a0:	4b3b      	ldr	r3, [pc, #236]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4a3a      	ldr	r2, [pc, #232]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d015      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032b8:	4b35      	ldr	r3, [pc, #212]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c6:	4932      	ldr	r1, [pc, #200]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032d6:	d105      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d8:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4a2c      	ldr	r2, [pc, #176]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d015      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032f0:	4b27      	ldr	r3, [pc, #156]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	4924      	ldr	r1, [pc, #144]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800330e:	d105      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003310:	4b1f      	ldr	r3, [pc, #124]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4a1e      	ldr	r2, [pc, #120]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800331a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d015      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003336:	4916      	ldr	r1, [pc, #88]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003346:	d105      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003348:	4b11      	ldr	r3, [pc, #68]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4a10      	ldr	r2, [pc, #64]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800334e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003352:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d019      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003366:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	4908      	ldr	r1, [pc, #32]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800337e:	d109      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003380:	4b03      	ldr	r3, [pc, #12]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4a02      	ldr	r2, [pc, #8]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800338a:	60d3      	str	r3, [r2, #12]
 800338c:	e002      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d015      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033a0:	4b29      	ldr	r3, [pc, #164]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	4926      	ldr	r1, [pc, #152]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033be:	d105      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80033c0:	4b21      	ldr	r3, [pc, #132]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4a20      	ldr	r2, [pc, #128]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d015      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80033d8:	4b1b      	ldr	r3, [pc, #108]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033de:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e6:	4918      	ldr	r1, [pc, #96]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f6:	d105      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80033f8:	4b13      	ldr	r3, [pc, #76]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4a12      	ldr	r2, [pc, #72]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003402:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d015      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003410:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003412:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003416:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341e:	490a      	ldr	r1, [pc, #40]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800342e:	d105      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a04      	ldr	r2, [pc, #16]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800343a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800343c:	7cbb      	ldrb	r3, [r7, #18]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000

0800344c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e049      	b.n	80034f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7fe f9a0 	bl	80017b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3304      	adds	r3, #4
 8003488:	4619      	mov	r1, r3
 800348a:	4610      	mov	r0, r2
 800348c:	f000 fd78 	bl	8003f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b01      	cmp	r3, #1
 800350e:	d001      	beq.n	8003514 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e04c      	b.n	80035ae <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a26      	ldr	r2, [pc, #152]	; (80035bc <HAL_TIM_Base_Start+0xc0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d022      	beq.n	800356c <HAL_TIM_Base_Start+0x70>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352e:	d01d      	beq.n	800356c <HAL_TIM_Base_Start+0x70>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a22      	ldr	r2, [pc, #136]	; (80035c0 <HAL_TIM_Base_Start+0xc4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d018      	beq.n	800356c <HAL_TIM_Base_Start+0x70>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a21      	ldr	r2, [pc, #132]	; (80035c4 <HAL_TIM_Base_Start+0xc8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d013      	beq.n	800356c <HAL_TIM_Base_Start+0x70>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1f      	ldr	r2, [pc, #124]	; (80035c8 <HAL_TIM_Base_Start+0xcc>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00e      	beq.n	800356c <HAL_TIM_Base_Start+0x70>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1e      	ldr	r2, [pc, #120]	; (80035cc <HAL_TIM_Base_Start+0xd0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d009      	beq.n	800356c <HAL_TIM_Base_Start+0x70>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1c      	ldr	r2, [pc, #112]	; (80035d0 <HAL_TIM_Base_Start+0xd4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d004      	beq.n	800356c <HAL_TIM_Base_Start+0x70>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1b      	ldr	r2, [pc, #108]	; (80035d4 <HAL_TIM_Base_Start+0xd8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d115      	bne.n	8003598 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <HAL_TIM_Base_Start+0xdc>)
 8003574:	4013      	ands	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b06      	cmp	r3, #6
 800357c:	d015      	beq.n	80035aa <HAL_TIM_Base_Start+0xae>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003584:	d011      	beq.n	80035aa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003596:	e008      	b.n	80035aa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	e000      	b.n	80035ac <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40012c00 	.word	0x40012c00
 80035c0:	40000400 	.word	0x40000400
 80035c4:	40000800 	.word	0x40000800
 80035c8:	40000c00 	.word	0x40000c00
 80035cc:	40013400 	.word	0x40013400
 80035d0:	40014000 	.word	0x40014000
 80035d4:	40015000 	.word	0x40015000
 80035d8:	00010007 	.word	0x00010007

080035dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e049      	b.n	8003682 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f841 	bl	800368a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3304      	adds	r3, #4
 8003618:	4619      	mov	r1, r3
 800361a:	4610      	mov	r0, r2
 800361c:	f000 fcb0 	bl	8003f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
	...

080036a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d109      	bne.n	80036c4 <HAL_TIM_PWM_Start+0x24>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	bf14      	ite	ne
 80036bc:	2301      	movne	r3, #1
 80036be:	2300      	moveq	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	e03c      	b.n	800373e <HAL_TIM_PWM_Start+0x9e>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d109      	bne.n	80036de <HAL_TIM_PWM_Start+0x3e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	bf14      	ite	ne
 80036d6:	2301      	movne	r3, #1
 80036d8:	2300      	moveq	r3, #0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	e02f      	b.n	800373e <HAL_TIM_PWM_Start+0x9e>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d109      	bne.n	80036f8 <HAL_TIM_PWM_Start+0x58>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	bf14      	ite	ne
 80036f0:	2301      	movne	r3, #1
 80036f2:	2300      	moveq	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	e022      	b.n	800373e <HAL_TIM_PWM_Start+0x9e>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b0c      	cmp	r3, #12
 80036fc:	d109      	bne.n	8003712 <HAL_TIM_PWM_Start+0x72>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	bf14      	ite	ne
 800370a:	2301      	movne	r3, #1
 800370c:	2300      	moveq	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	e015      	b.n	800373e <HAL_TIM_PWM_Start+0x9e>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b10      	cmp	r3, #16
 8003716:	d109      	bne.n	800372c <HAL_TIM_PWM_Start+0x8c>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	bf14      	ite	ne
 8003724:	2301      	movne	r3, #1
 8003726:	2300      	moveq	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	e008      	b.n	800373e <HAL_TIM_PWM_Start+0x9e>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	bf14      	ite	ne
 8003738:	2301      	movne	r3, #1
 800373a:	2300      	moveq	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e0a6      	b.n	8003894 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d104      	bne.n	8003756 <HAL_TIM_PWM_Start+0xb6>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003754:	e023      	b.n	800379e <HAL_TIM_PWM_Start+0xfe>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b04      	cmp	r3, #4
 800375a:	d104      	bne.n	8003766 <HAL_TIM_PWM_Start+0xc6>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003764:	e01b      	b.n	800379e <HAL_TIM_PWM_Start+0xfe>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b08      	cmp	r3, #8
 800376a:	d104      	bne.n	8003776 <HAL_TIM_PWM_Start+0xd6>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003774:	e013      	b.n	800379e <HAL_TIM_PWM_Start+0xfe>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b0c      	cmp	r3, #12
 800377a:	d104      	bne.n	8003786 <HAL_TIM_PWM_Start+0xe6>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003784:	e00b      	b.n	800379e <HAL_TIM_PWM_Start+0xfe>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b10      	cmp	r3, #16
 800378a:	d104      	bne.n	8003796 <HAL_TIM_PWM_Start+0xf6>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003794:	e003      	b.n	800379e <HAL_TIM_PWM_Start+0xfe>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2202      	movs	r2, #2
 800379a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2201      	movs	r2, #1
 80037a4:	6839      	ldr	r1, [r7, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 f864 	bl	8004874 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a3a      	ldr	r2, [pc, #232]	; (800389c <HAL_TIM_PWM_Start+0x1fc>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d018      	beq.n	80037e8 <HAL_TIM_PWM_Start+0x148>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a39      	ldr	r2, [pc, #228]	; (80038a0 <HAL_TIM_PWM_Start+0x200>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d013      	beq.n	80037e8 <HAL_TIM_PWM_Start+0x148>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a37      	ldr	r2, [pc, #220]	; (80038a4 <HAL_TIM_PWM_Start+0x204>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00e      	beq.n	80037e8 <HAL_TIM_PWM_Start+0x148>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a36      	ldr	r2, [pc, #216]	; (80038a8 <HAL_TIM_PWM_Start+0x208>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d009      	beq.n	80037e8 <HAL_TIM_PWM_Start+0x148>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a34      	ldr	r2, [pc, #208]	; (80038ac <HAL_TIM_PWM_Start+0x20c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <HAL_TIM_PWM_Start+0x148>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a33      	ldr	r2, [pc, #204]	; (80038b0 <HAL_TIM_PWM_Start+0x210>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d101      	bne.n	80037ec <HAL_TIM_PWM_Start+0x14c>
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <HAL_TIM_PWM_Start+0x14e>
 80037ec:	2300      	movs	r3, #0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003800:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a25      	ldr	r2, [pc, #148]	; (800389c <HAL_TIM_PWM_Start+0x1fc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d022      	beq.n	8003852 <HAL_TIM_PWM_Start+0x1b2>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003814:	d01d      	beq.n	8003852 <HAL_TIM_PWM_Start+0x1b2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a26      	ldr	r2, [pc, #152]	; (80038b4 <HAL_TIM_PWM_Start+0x214>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d018      	beq.n	8003852 <HAL_TIM_PWM_Start+0x1b2>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a24      	ldr	r2, [pc, #144]	; (80038b8 <HAL_TIM_PWM_Start+0x218>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d013      	beq.n	8003852 <HAL_TIM_PWM_Start+0x1b2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a23      	ldr	r2, [pc, #140]	; (80038bc <HAL_TIM_PWM_Start+0x21c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00e      	beq.n	8003852 <HAL_TIM_PWM_Start+0x1b2>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a19      	ldr	r2, [pc, #100]	; (80038a0 <HAL_TIM_PWM_Start+0x200>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d009      	beq.n	8003852 <HAL_TIM_PWM_Start+0x1b2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a18      	ldr	r2, [pc, #96]	; (80038a4 <HAL_TIM_PWM_Start+0x204>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d004      	beq.n	8003852 <HAL_TIM_PWM_Start+0x1b2>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a18      	ldr	r2, [pc, #96]	; (80038b0 <HAL_TIM_PWM_Start+0x210>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d115      	bne.n	800387e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_TIM_PWM_Start+0x220>)
 800385a:	4013      	ands	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b06      	cmp	r3, #6
 8003862:	d015      	beq.n	8003890 <HAL_TIM_PWM_Start+0x1f0>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386a:	d011      	beq.n	8003890 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800387c:	e008      	b.n	8003890 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0201 	orr.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e000      	b.n	8003892 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003890:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40012c00 	.word	0x40012c00
 80038a0:	40013400 	.word	0x40013400
 80038a4:	40014000 	.word	0x40014000
 80038a8:	40014400 	.word	0x40014400
 80038ac:	40014800 	.word	0x40014800
 80038b0:	40015000 	.word	0x40015000
 80038b4:	40000400 	.word	0x40000400
 80038b8:	40000800 	.word	0x40000800
 80038bc:	40000c00 	.word	0x40000c00
 80038c0:	00010007 	.word	0x00010007

080038c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e097      	b.n	8003a08 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d106      	bne.n	80038f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7fd ff81 	bl	80017f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2202      	movs	r2, #2
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003908:	f023 0307 	bic.w	r3, r3, #7
 800390c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3304      	adds	r3, #4
 8003916:	4619      	mov	r1, r3
 8003918:	4610      	mov	r0, r2
 800391a:	f000 fb31 	bl	8003f80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003946:	f023 0303 	bic.w	r3, r3, #3
 800394a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	4313      	orrs	r3, r2
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003964:	f023 030c 	bic.w	r3, r3, #12
 8003968:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003970:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003974:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	4313      	orrs	r3, r2
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	011a      	lsls	r2, r3, #4
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	031b      	lsls	r3, r3, #12
 8003994:	4313      	orrs	r3, r2
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80039a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80039aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	4313      	orrs	r3, r2
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d110      	bne.n	8003a62 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d102      	bne.n	8003a4c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a46:	7b7b      	ldrb	r3, [r7, #13]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d001      	beq.n	8003a50 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e069      	b.n	8003b24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a60:	e031      	b.n	8003ac6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d110      	bne.n	8003a8a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a68:	7bbb      	ldrb	r3, [r7, #14]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d102      	bne.n	8003a74 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a6e:	7b3b      	ldrb	r3, [r7, #12]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d001      	beq.n	8003a78 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e055      	b.n	8003b24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a88:	e01d      	b.n	8003ac6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d108      	bne.n	8003aa2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a90:	7bbb      	ldrb	r3, [r7, #14]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d105      	bne.n	8003aa2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a96:	7b7b      	ldrb	r3, [r7, #13]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d102      	bne.n	8003aa2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a9c:	7b3b      	ldrb	r3, [r7, #12]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d001      	beq.n	8003aa6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e03e      	b.n	8003b24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_TIM_Encoder_Start+0xc4>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d008      	beq.n	8003ae4 <HAL_TIM_Encoder_Start+0xd4>
 8003ad2:	e00f      	b.n	8003af4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	2100      	movs	r1, #0
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fec9 	bl	8004874 <TIM_CCxChannelCmd>
      break;
 8003ae2:	e016      	b.n	8003b12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	2104      	movs	r1, #4
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fec1 	bl	8004874 <TIM_CCxChannelCmd>
      break;
 8003af2:	e00e      	b.n	8003b12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2201      	movs	r2, #1
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 feb9 	bl	8004874 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2201      	movs	r2, #1
 8003b08:	2104      	movs	r1, #4
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 feb2 	bl	8004874 <TIM_CCxChannelCmd>
      break;
 8003b10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0201 	orr.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e0ff      	b.n	8003d4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b14      	cmp	r3, #20
 8003b56:	f200 80f0 	bhi.w	8003d3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003b5a:	a201      	add	r2, pc, #4	; (adr r2, 8003b60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b60:	08003bb5 	.word	0x08003bb5
 8003b64:	08003d3b 	.word	0x08003d3b
 8003b68:	08003d3b 	.word	0x08003d3b
 8003b6c:	08003d3b 	.word	0x08003d3b
 8003b70:	08003bf5 	.word	0x08003bf5
 8003b74:	08003d3b 	.word	0x08003d3b
 8003b78:	08003d3b 	.word	0x08003d3b
 8003b7c:	08003d3b 	.word	0x08003d3b
 8003b80:	08003c37 	.word	0x08003c37
 8003b84:	08003d3b 	.word	0x08003d3b
 8003b88:	08003d3b 	.word	0x08003d3b
 8003b8c:	08003d3b 	.word	0x08003d3b
 8003b90:	08003c77 	.word	0x08003c77
 8003b94:	08003d3b 	.word	0x08003d3b
 8003b98:	08003d3b 	.word	0x08003d3b
 8003b9c:	08003d3b 	.word	0x08003d3b
 8003ba0:	08003cb9 	.word	0x08003cb9
 8003ba4:	08003d3b 	.word	0x08003d3b
 8003ba8:	08003d3b 	.word	0x08003d3b
 8003bac:	08003d3b 	.word	0x08003d3b
 8003bb0:	08003cf9 	.word	0x08003cf9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fa94 	bl	80040e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699a      	ldr	r2, [r3, #24]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0208 	orr.w	r2, r2, #8
 8003bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0204 	bic.w	r2, r2, #4
 8003bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6999      	ldr	r1, [r3, #24]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	691a      	ldr	r2, [r3, #16]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	619a      	str	r2, [r3, #24]
      break;
 8003bf2:	e0a5      	b.n	8003d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fb0e 	bl	800421c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699a      	ldr	r2, [r3, #24]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6999      	ldr	r1, [r3, #24]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	021a      	lsls	r2, r3, #8
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	619a      	str	r2, [r3, #24]
      break;
 8003c34:	e084      	b.n	8003d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68b9      	ldr	r1, [r7, #8]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fb81 	bl	8004344 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69da      	ldr	r2, [r3, #28]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0208 	orr.w	r2, r2, #8
 8003c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69da      	ldr	r2, [r3, #28]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0204 	bic.w	r2, r2, #4
 8003c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69d9      	ldr	r1, [r3, #28]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	61da      	str	r2, [r3, #28]
      break;
 8003c74:	e064      	b.n	8003d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68b9      	ldr	r1, [r7, #8]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fbf3 	bl	8004468 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69da      	ldr	r2, [r3, #28]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69da      	ldr	r2, [r3, #28]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69d9      	ldr	r1, [r3, #28]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	021a      	lsls	r2, r3, #8
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	61da      	str	r2, [r3, #28]
      break;
 8003cb6:	e043      	b.n	8003d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fc66 	bl	8004590 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0208 	orr.w	r2, r2, #8
 8003cd2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0204 	bic.w	r2, r2, #4
 8003ce2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003cf6:	e023      	b.n	8003d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fcb0 	bl	8004664 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d22:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	021a      	lsls	r2, r3, #8
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003d38:	e002      	b.n	8003d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop

08003d54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIM_ConfigClockSource+0x1c>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e0f6      	b.n	8003f5e <HAL_TIM_ConfigClockSource+0x20a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003d8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a6f      	ldr	r2, [pc, #444]	; (8003f68 <HAL_TIM_ConfigClockSource+0x214>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	f000 80c1 	beq.w	8003f32 <HAL_TIM_ConfigClockSource+0x1de>
 8003db0:	4a6d      	ldr	r2, [pc, #436]	; (8003f68 <HAL_TIM_ConfigClockSource+0x214>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	f200 80c6 	bhi.w	8003f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003db8:	4a6c      	ldr	r2, [pc, #432]	; (8003f6c <HAL_TIM_ConfigClockSource+0x218>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	f000 80b9 	beq.w	8003f32 <HAL_TIM_ConfigClockSource+0x1de>
 8003dc0:	4a6a      	ldr	r2, [pc, #424]	; (8003f6c <HAL_TIM_ConfigClockSource+0x218>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	f200 80be 	bhi.w	8003f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003dc8:	4a69      	ldr	r2, [pc, #420]	; (8003f70 <HAL_TIM_ConfigClockSource+0x21c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	f000 80b1 	beq.w	8003f32 <HAL_TIM_ConfigClockSource+0x1de>
 8003dd0:	4a67      	ldr	r2, [pc, #412]	; (8003f70 <HAL_TIM_ConfigClockSource+0x21c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	f200 80b6 	bhi.w	8003f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003dd8:	4a66      	ldr	r2, [pc, #408]	; (8003f74 <HAL_TIM_ConfigClockSource+0x220>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	f000 80a9 	beq.w	8003f32 <HAL_TIM_ConfigClockSource+0x1de>
 8003de0:	4a64      	ldr	r2, [pc, #400]	; (8003f74 <HAL_TIM_ConfigClockSource+0x220>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	f200 80ae 	bhi.w	8003f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003de8:	4a63      	ldr	r2, [pc, #396]	; (8003f78 <HAL_TIM_ConfigClockSource+0x224>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	f000 80a1 	beq.w	8003f32 <HAL_TIM_ConfigClockSource+0x1de>
 8003df0:	4a61      	ldr	r2, [pc, #388]	; (8003f78 <HAL_TIM_ConfigClockSource+0x224>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	f200 80a6 	bhi.w	8003f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003df8:	4a60      	ldr	r2, [pc, #384]	; (8003f7c <HAL_TIM_ConfigClockSource+0x228>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	f000 8099 	beq.w	8003f32 <HAL_TIM_ConfigClockSource+0x1de>
 8003e00:	4a5e      	ldr	r2, [pc, #376]	; (8003f7c <HAL_TIM_ConfigClockSource+0x228>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	f200 809e 	bhi.w	8003f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e08:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003e0c:	f000 8091 	beq.w	8003f32 <HAL_TIM_ConfigClockSource+0x1de>
 8003e10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003e14:	f200 8096 	bhi.w	8003f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e1c:	f000 8089 	beq.w	8003f32 <HAL_TIM_ConfigClockSource+0x1de>
 8003e20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e24:	f200 808e 	bhi.w	8003f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e2c:	d03e      	beq.n	8003eac <HAL_TIM_ConfigClockSource+0x158>
 8003e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e32:	f200 8087 	bhi.w	8003f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3a:	f000 8086 	beq.w	8003f4a <HAL_TIM_ConfigClockSource+0x1f6>
 8003e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e42:	d87f      	bhi.n	8003f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e44:	2b70      	cmp	r3, #112	; 0x70
 8003e46:	d01a      	beq.n	8003e7e <HAL_TIM_ConfigClockSource+0x12a>
 8003e48:	2b70      	cmp	r3, #112	; 0x70
 8003e4a:	d87b      	bhi.n	8003f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e4c:	2b60      	cmp	r3, #96	; 0x60
 8003e4e:	d050      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0x19e>
 8003e50:	2b60      	cmp	r3, #96	; 0x60
 8003e52:	d877      	bhi.n	8003f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e54:	2b50      	cmp	r3, #80	; 0x50
 8003e56:	d03c      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x17e>
 8003e58:	2b50      	cmp	r3, #80	; 0x50
 8003e5a:	d873      	bhi.n	8003f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e5c:	2b40      	cmp	r3, #64	; 0x40
 8003e5e:	d058      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0x1be>
 8003e60:	2b40      	cmp	r3, #64	; 0x40
 8003e62:	d86f      	bhi.n	8003f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e64:	2b30      	cmp	r3, #48	; 0x30
 8003e66:	d064      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0x1de>
 8003e68:	2b30      	cmp	r3, #48	; 0x30
 8003e6a:	d86b      	bhi.n	8003f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	d060      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0x1de>
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	d867      	bhi.n	8003f44 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d05c      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0x1de>
 8003e78:	2b10      	cmp	r3, #16
 8003e7a:	d05a      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0x1de>
 8003e7c:	e062      	b.n	8003f44 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e8e:	f000 fcd1 	bl	8004834 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ea0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	609a      	str	r2, [r3, #8]
      break;
 8003eaa:	e04f      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ebc:	f000 fcba 	bl	8004834 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ece:	609a      	str	r2, [r3, #8]
      break;
 8003ed0:	e03c      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f000 fc2c 	bl	800473c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2150      	movs	r1, #80	; 0x50
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fc85 	bl	80047fa <TIM_ITRx_SetConfig>
      break;
 8003ef0:	e02c      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003efe:	461a      	mov	r2, r3
 8003f00:	f000 fc4b 	bl	800479a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2160      	movs	r1, #96	; 0x60
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fc75 	bl	80047fa <TIM_ITRx_SetConfig>
      break;
 8003f10:	e01c      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f000 fc0c 	bl	800473c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2140      	movs	r1, #64	; 0x40
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fc65 	bl	80047fa <TIM_ITRx_SetConfig>
      break;
 8003f30:	e00c      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	f000 fc5c 	bl	80047fa <TIM_ITRx_SetConfig>
      break;
 8003f42:	e003      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
      break;
 8003f48:	e000      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003f4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	00100070 	.word	0x00100070
 8003f6c:	00100060 	.word	0x00100060
 8003f70:	00100050 	.word	0x00100050
 8003f74:	00100040 	.word	0x00100040
 8003f78:	00100030 	.word	0x00100030
 8003f7c:	00100020 	.word	0x00100020

08003f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a4c      	ldr	r2, [pc, #304]	; (80040c4 <TIM_Base_SetConfig+0x144>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d017      	beq.n	8003fc8 <TIM_Base_SetConfig+0x48>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9e:	d013      	beq.n	8003fc8 <TIM_Base_SetConfig+0x48>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a49      	ldr	r2, [pc, #292]	; (80040c8 <TIM_Base_SetConfig+0x148>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d00f      	beq.n	8003fc8 <TIM_Base_SetConfig+0x48>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a48      	ldr	r2, [pc, #288]	; (80040cc <TIM_Base_SetConfig+0x14c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00b      	beq.n	8003fc8 <TIM_Base_SetConfig+0x48>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a47      	ldr	r2, [pc, #284]	; (80040d0 <TIM_Base_SetConfig+0x150>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d007      	beq.n	8003fc8 <TIM_Base_SetConfig+0x48>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a46      	ldr	r2, [pc, #280]	; (80040d4 <TIM_Base_SetConfig+0x154>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d003      	beq.n	8003fc8 <TIM_Base_SetConfig+0x48>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a45      	ldr	r2, [pc, #276]	; (80040d8 <TIM_Base_SetConfig+0x158>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d108      	bne.n	8003fda <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a39      	ldr	r2, [pc, #228]	; (80040c4 <TIM_Base_SetConfig+0x144>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d023      	beq.n	800402a <TIM_Base_SetConfig+0xaa>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe8:	d01f      	beq.n	800402a <TIM_Base_SetConfig+0xaa>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a36      	ldr	r2, [pc, #216]	; (80040c8 <TIM_Base_SetConfig+0x148>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01b      	beq.n	800402a <TIM_Base_SetConfig+0xaa>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a35      	ldr	r2, [pc, #212]	; (80040cc <TIM_Base_SetConfig+0x14c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d017      	beq.n	800402a <TIM_Base_SetConfig+0xaa>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a34      	ldr	r2, [pc, #208]	; (80040d0 <TIM_Base_SetConfig+0x150>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d013      	beq.n	800402a <TIM_Base_SetConfig+0xaa>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a33      	ldr	r2, [pc, #204]	; (80040d4 <TIM_Base_SetConfig+0x154>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00f      	beq.n	800402a <TIM_Base_SetConfig+0xaa>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a33      	ldr	r2, [pc, #204]	; (80040dc <TIM_Base_SetConfig+0x15c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00b      	beq.n	800402a <TIM_Base_SetConfig+0xaa>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a32      	ldr	r2, [pc, #200]	; (80040e0 <TIM_Base_SetConfig+0x160>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d007      	beq.n	800402a <TIM_Base_SetConfig+0xaa>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a31      	ldr	r2, [pc, #196]	; (80040e4 <TIM_Base_SetConfig+0x164>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d003      	beq.n	800402a <TIM_Base_SetConfig+0xaa>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2c      	ldr	r2, [pc, #176]	; (80040d8 <TIM_Base_SetConfig+0x158>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d108      	bne.n	800403c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a18      	ldr	r2, [pc, #96]	; (80040c4 <TIM_Base_SetConfig+0x144>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d013      	beq.n	8004090 <TIM_Base_SetConfig+0x110>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a1a      	ldr	r2, [pc, #104]	; (80040d4 <TIM_Base_SetConfig+0x154>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00f      	beq.n	8004090 <TIM_Base_SetConfig+0x110>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a1a      	ldr	r2, [pc, #104]	; (80040dc <TIM_Base_SetConfig+0x15c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00b      	beq.n	8004090 <TIM_Base_SetConfig+0x110>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a19      	ldr	r2, [pc, #100]	; (80040e0 <TIM_Base_SetConfig+0x160>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d007      	beq.n	8004090 <TIM_Base_SetConfig+0x110>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a18      	ldr	r2, [pc, #96]	; (80040e4 <TIM_Base_SetConfig+0x164>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d003      	beq.n	8004090 <TIM_Base_SetConfig+0x110>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a13      	ldr	r2, [pc, #76]	; (80040d8 <TIM_Base_SetConfig+0x158>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d103      	bne.n	8004098 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d105      	bne.n	80040b6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f023 0201 	bic.w	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	611a      	str	r2, [r3, #16]
  }
}
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40012c00 	.word	0x40012c00
 80040c8:	40000400 	.word	0x40000400
 80040cc:	40000800 	.word	0x40000800
 80040d0:	40000c00 	.word	0x40000c00
 80040d4:	40013400 	.word	0x40013400
 80040d8:	40015000 	.word	0x40015000
 80040dc:	40014000 	.word	0x40014000
 80040e0:	40014400 	.word	0x40014400
 80040e4:	40014800 	.word	0x40014800

080040e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f023 0201 	bic.w	r2, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0303 	bic.w	r3, r3, #3
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f023 0302 	bic.w	r3, r3, #2
 8004134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a30      	ldr	r2, [pc, #192]	; (8004204 <TIM_OC1_SetConfig+0x11c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d013      	beq.n	8004170 <TIM_OC1_SetConfig+0x88>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a2f      	ldr	r2, [pc, #188]	; (8004208 <TIM_OC1_SetConfig+0x120>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00f      	beq.n	8004170 <TIM_OC1_SetConfig+0x88>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a2e      	ldr	r2, [pc, #184]	; (800420c <TIM_OC1_SetConfig+0x124>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00b      	beq.n	8004170 <TIM_OC1_SetConfig+0x88>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a2d      	ldr	r2, [pc, #180]	; (8004210 <TIM_OC1_SetConfig+0x128>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d007      	beq.n	8004170 <TIM_OC1_SetConfig+0x88>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a2c      	ldr	r2, [pc, #176]	; (8004214 <TIM_OC1_SetConfig+0x12c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d003      	beq.n	8004170 <TIM_OC1_SetConfig+0x88>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a2b      	ldr	r2, [pc, #172]	; (8004218 <TIM_OC1_SetConfig+0x130>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d10c      	bne.n	800418a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f023 0308 	bic.w	r3, r3, #8
 8004176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f023 0304 	bic.w	r3, r3, #4
 8004188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <TIM_OC1_SetConfig+0x11c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d013      	beq.n	80041ba <TIM_OC1_SetConfig+0xd2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a1c      	ldr	r2, [pc, #112]	; (8004208 <TIM_OC1_SetConfig+0x120>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00f      	beq.n	80041ba <TIM_OC1_SetConfig+0xd2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a1b      	ldr	r2, [pc, #108]	; (800420c <TIM_OC1_SetConfig+0x124>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00b      	beq.n	80041ba <TIM_OC1_SetConfig+0xd2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a1a      	ldr	r2, [pc, #104]	; (8004210 <TIM_OC1_SetConfig+0x128>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d007      	beq.n	80041ba <TIM_OC1_SetConfig+0xd2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a19      	ldr	r2, [pc, #100]	; (8004214 <TIM_OC1_SetConfig+0x12c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d003      	beq.n	80041ba <TIM_OC1_SetConfig+0xd2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a18      	ldr	r2, [pc, #96]	; (8004218 <TIM_OC1_SetConfig+0x130>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d111      	bne.n	80041de <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	621a      	str	r2, [r3, #32]
}
 80041f8:	bf00      	nop
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	40012c00 	.word	0x40012c00
 8004208:	40013400 	.word	0x40013400
 800420c:	40014000 	.word	0x40014000
 8004210:	40014400 	.word	0x40014400
 8004214:	40014800 	.word	0x40014800
 8004218:	40015000 	.word	0x40015000

0800421c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f023 0210 	bic.w	r2, r3, #16
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800424a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f023 0320 	bic.w	r3, r3, #32
 800426a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a2c      	ldr	r2, [pc, #176]	; (800432c <TIM_OC2_SetConfig+0x110>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d007      	beq.n	8004290 <TIM_OC2_SetConfig+0x74>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a2b      	ldr	r2, [pc, #172]	; (8004330 <TIM_OC2_SetConfig+0x114>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d003      	beq.n	8004290 <TIM_OC2_SetConfig+0x74>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a2a      	ldr	r2, [pc, #168]	; (8004334 <TIM_OC2_SetConfig+0x118>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d10d      	bne.n	80042ac <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a1f      	ldr	r2, [pc, #124]	; (800432c <TIM_OC2_SetConfig+0x110>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d013      	beq.n	80042dc <TIM_OC2_SetConfig+0xc0>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a1e      	ldr	r2, [pc, #120]	; (8004330 <TIM_OC2_SetConfig+0x114>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00f      	beq.n	80042dc <TIM_OC2_SetConfig+0xc0>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a1e      	ldr	r2, [pc, #120]	; (8004338 <TIM_OC2_SetConfig+0x11c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00b      	beq.n	80042dc <TIM_OC2_SetConfig+0xc0>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a1d      	ldr	r2, [pc, #116]	; (800433c <TIM_OC2_SetConfig+0x120>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d007      	beq.n	80042dc <TIM_OC2_SetConfig+0xc0>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a1c      	ldr	r2, [pc, #112]	; (8004340 <TIM_OC2_SetConfig+0x124>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d003      	beq.n	80042dc <TIM_OC2_SetConfig+0xc0>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a17      	ldr	r2, [pc, #92]	; (8004334 <TIM_OC2_SetConfig+0x118>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d113      	bne.n	8004304 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40013400 	.word	0x40013400
 8004334:	40015000 	.word	0x40015000
 8004338:	40014000 	.word	0x40014000
 800433c:	40014400 	.word	0x40014400
 8004340:	40014800 	.word	0x40014800

08004344 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0303 	bic.w	r3, r3, #3
 800437e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a2b      	ldr	r2, [pc, #172]	; (8004450 <TIM_OC3_SetConfig+0x10c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d007      	beq.n	80043b6 <TIM_OC3_SetConfig+0x72>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a2a      	ldr	r2, [pc, #168]	; (8004454 <TIM_OC3_SetConfig+0x110>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d003      	beq.n	80043b6 <TIM_OC3_SetConfig+0x72>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a29      	ldr	r2, [pc, #164]	; (8004458 <TIM_OC3_SetConfig+0x114>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d10d      	bne.n	80043d2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a1e      	ldr	r2, [pc, #120]	; (8004450 <TIM_OC3_SetConfig+0x10c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d013      	beq.n	8004402 <TIM_OC3_SetConfig+0xbe>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a1d      	ldr	r2, [pc, #116]	; (8004454 <TIM_OC3_SetConfig+0x110>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00f      	beq.n	8004402 <TIM_OC3_SetConfig+0xbe>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a1d      	ldr	r2, [pc, #116]	; (800445c <TIM_OC3_SetConfig+0x118>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00b      	beq.n	8004402 <TIM_OC3_SetConfig+0xbe>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a1c      	ldr	r2, [pc, #112]	; (8004460 <TIM_OC3_SetConfig+0x11c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d007      	beq.n	8004402 <TIM_OC3_SetConfig+0xbe>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a1b      	ldr	r2, [pc, #108]	; (8004464 <TIM_OC3_SetConfig+0x120>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d003      	beq.n	8004402 <TIM_OC3_SetConfig+0xbe>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a16      	ldr	r2, [pc, #88]	; (8004458 <TIM_OC3_SetConfig+0x114>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d113      	bne.n	800442a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	621a      	str	r2, [r3, #32]
}
 8004444:	bf00      	nop
 8004446:	371c      	adds	r7, #28
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	40012c00 	.word	0x40012c00
 8004454:	40013400 	.word	0x40013400
 8004458:	40015000 	.word	0x40015000
 800445c:	40014000 	.word	0x40014000
 8004460:	40014400 	.word	0x40014400
 8004464:	40014800 	.word	0x40014800

08004468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	021b      	lsls	r3, r3, #8
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	031b      	lsls	r3, r3, #12
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a2c      	ldr	r2, [pc, #176]	; (8004578 <TIM_OC4_SetConfig+0x110>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d007      	beq.n	80044dc <TIM_OC4_SetConfig+0x74>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a2b      	ldr	r2, [pc, #172]	; (800457c <TIM_OC4_SetConfig+0x114>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d003      	beq.n	80044dc <TIM_OC4_SetConfig+0x74>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a2a      	ldr	r2, [pc, #168]	; (8004580 <TIM_OC4_SetConfig+0x118>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d10d      	bne.n	80044f8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	031b      	lsls	r3, r3, #12
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a1f      	ldr	r2, [pc, #124]	; (8004578 <TIM_OC4_SetConfig+0x110>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d013      	beq.n	8004528 <TIM_OC4_SetConfig+0xc0>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a1e      	ldr	r2, [pc, #120]	; (800457c <TIM_OC4_SetConfig+0x114>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00f      	beq.n	8004528 <TIM_OC4_SetConfig+0xc0>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a1e      	ldr	r2, [pc, #120]	; (8004584 <TIM_OC4_SetConfig+0x11c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00b      	beq.n	8004528 <TIM_OC4_SetConfig+0xc0>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a1d      	ldr	r2, [pc, #116]	; (8004588 <TIM_OC4_SetConfig+0x120>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d007      	beq.n	8004528 <TIM_OC4_SetConfig+0xc0>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a1c      	ldr	r2, [pc, #112]	; (800458c <TIM_OC4_SetConfig+0x124>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d003      	beq.n	8004528 <TIM_OC4_SetConfig+0xc0>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a17      	ldr	r2, [pc, #92]	; (8004580 <TIM_OC4_SetConfig+0x118>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d113      	bne.n	8004550 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800452e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004536:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	019b      	lsls	r3, r3, #6
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	019b      	lsls	r3, r3, #6
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	621a      	str	r2, [r3, #32]
}
 800456a:	bf00      	nop
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40013400 	.word	0x40013400
 8004580:	40015000 	.word	0x40015000
 8004584:	40014000 	.word	0x40014000
 8004588:	40014400 	.word	0x40014400
 800458c:	40014800 	.word	0x40014800

08004590 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80045d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	041b      	lsls	r3, r3, #16
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a19      	ldr	r2, [pc, #100]	; (800464c <TIM_OC5_SetConfig+0xbc>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d013      	beq.n	8004612 <TIM_OC5_SetConfig+0x82>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a18      	ldr	r2, [pc, #96]	; (8004650 <TIM_OC5_SetConfig+0xc0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00f      	beq.n	8004612 <TIM_OC5_SetConfig+0x82>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a17      	ldr	r2, [pc, #92]	; (8004654 <TIM_OC5_SetConfig+0xc4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00b      	beq.n	8004612 <TIM_OC5_SetConfig+0x82>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a16      	ldr	r2, [pc, #88]	; (8004658 <TIM_OC5_SetConfig+0xc8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d007      	beq.n	8004612 <TIM_OC5_SetConfig+0x82>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a15      	ldr	r2, [pc, #84]	; (800465c <TIM_OC5_SetConfig+0xcc>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d003      	beq.n	8004612 <TIM_OC5_SetConfig+0x82>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a14      	ldr	r2, [pc, #80]	; (8004660 <TIM_OC5_SetConfig+0xd0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d109      	bne.n	8004626 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004618:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	4313      	orrs	r3, r2
 8004624:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	621a      	str	r2, [r3, #32]
}
 8004640:	bf00      	nop
 8004642:	371c      	adds	r7, #28
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	40012c00 	.word	0x40012c00
 8004650:	40013400 	.word	0x40013400
 8004654:	40014000 	.word	0x40014000
 8004658:	40014400 	.word	0x40014400
 800465c:	40014800 	.word	0x40014800
 8004660:	40015000 	.word	0x40015000

08004664 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	051b      	lsls	r3, r3, #20
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a1a      	ldr	r2, [pc, #104]	; (8004724 <TIM_OC6_SetConfig+0xc0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d013      	beq.n	80046e8 <TIM_OC6_SetConfig+0x84>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a19      	ldr	r2, [pc, #100]	; (8004728 <TIM_OC6_SetConfig+0xc4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00f      	beq.n	80046e8 <TIM_OC6_SetConfig+0x84>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a18      	ldr	r2, [pc, #96]	; (800472c <TIM_OC6_SetConfig+0xc8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00b      	beq.n	80046e8 <TIM_OC6_SetConfig+0x84>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a17      	ldr	r2, [pc, #92]	; (8004730 <TIM_OC6_SetConfig+0xcc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d007      	beq.n	80046e8 <TIM_OC6_SetConfig+0x84>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a16      	ldr	r2, [pc, #88]	; (8004734 <TIM_OC6_SetConfig+0xd0>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d003      	beq.n	80046e8 <TIM_OC6_SetConfig+0x84>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a15      	ldr	r2, [pc, #84]	; (8004738 <TIM_OC6_SetConfig+0xd4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d109      	bne.n	80046fc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	029b      	lsls	r3, r3, #10
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	621a      	str	r2, [r3, #32]
}
 8004716:	bf00      	nop
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40012c00 	.word	0x40012c00
 8004728:	40013400 	.word	0x40013400
 800472c:	40014000 	.word	0x40014000
 8004730:	40014400 	.word	0x40014400
 8004734:	40014800 	.word	0x40014800
 8004738:	40015000 	.word	0x40015000

0800473c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	f023 0201 	bic.w	r2, r3, #1
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f023 030a 	bic.w	r3, r3, #10
 8004778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	621a      	str	r2, [r3, #32]
}
 800478e:	bf00      	nop
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800479a:	b480      	push	{r7}
 800479c:	b087      	sub	sp, #28
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	f023 0210 	bic.w	r2, r3, #16
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	031b      	lsls	r3, r3, #12
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	621a      	str	r2, [r3, #32]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b085      	sub	sp, #20
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	f043 0307 	orr.w	r3, r3, #7
 8004820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	609a      	str	r2, [r3, #8]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800484e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	021a      	lsls	r2, r3, #8
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	431a      	orrs	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4313      	orrs	r3, r2
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	609a      	str	r2, [r3, #8]
}
 8004868:	bf00      	nop
 800486a:	371c      	adds	r7, #28
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	2201      	movs	r2, #1
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a1a      	ldr	r2, [r3, #32]
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	43db      	mvns	r3, r3
 8004896:	401a      	ands	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a1a      	ldr	r2, [r3, #32]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	fa01 f303 	lsl.w	r3, r1, r3
 80048ac:	431a      	orrs	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	621a      	str	r2, [r3, #32]
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e074      	b.n	80049c2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a34      	ldr	r2, [pc, #208]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d009      	beq.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a33      	ldr	r2, [pc, #204]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d004      	beq.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a31      	ldr	r2, [pc, #196]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d108      	bne.n	8004928 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800491c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800492e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a21      	ldr	r2, [pc, #132]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d022      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004958:	d01d      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a1f      	ldr	r2, [pc, #124]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d018      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1d      	ldr	r2, [pc, #116]	; (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d013      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1c      	ldr	r2, [pc, #112]	; (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00e      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a15      	ldr	r2, [pc, #84]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d009      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a18      	ldr	r2, [pc, #96]	; (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d004      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a11      	ldr	r2, [pc, #68]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d10c      	bne.n	80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800499c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40012c00 	.word	0x40012c00
 80049d4:	40013400 	.word	0x40013400
 80049d8:	40015000 	.word	0x40015000
 80049dc:	40000400 	.word	0x40000400
 80049e0:	40000800 	.word	0x40000800
 80049e4:	40000c00 	.word	0x40000c00
 80049e8:	40014000 	.word	0x40014000

080049ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e042      	b.n	8004a84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d106      	bne.n	8004a16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7fc fe79 	bl	8001708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2224      	movs	r2, #36	; 0x24
 8004a1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fb24 	bl	8005084 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f825 	bl	8004a8c <UART_SetConfig>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d101      	bne.n	8004a4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e01b      	b.n	8004a84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fba3 	bl	80051c8 <UART_CheckIdleState>
 8004a82:	4603      	mov	r3, r0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a90:	b08c      	sub	sp, #48	; 0x30
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4baa      	ldr	r3, [pc, #680]	; (8004d64 <UART_SetConfig+0x2d8>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a9f      	ldr	r2, [pc, #636]	; (8004d68 <UART_SetConfig+0x2dc>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004af4:	4313      	orrs	r3, r2
 8004af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b02:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	f023 010f 	bic.w	r1, r3, #15
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a90      	ldr	r2, [pc, #576]	; (8004d6c <UART_SetConfig+0x2e0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d125      	bne.n	8004b7c <UART_SetConfig+0xf0>
 8004b30:	4b8f      	ldr	r3, [pc, #572]	; (8004d70 <UART_SetConfig+0x2e4>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d81a      	bhi.n	8004b74 <UART_SetConfig+0xe8>
 8004b3e:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <UART_SetConfig+0xb8>)
 8004b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b44:	08004b55 	.word	0x08004b55
 8004b48:	08004b65 	.word	0x08004b65
 8004b4c:	08004b5d 	.word	0x08004b5d
 8004b50:	08004b6d 	.word	0x08004b6d
 8004b54:	2301      	movs	r3, #1
 8004b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b5a:	e116      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b62:	e112      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004b64:	2304      	movs	r3, #4
 8004b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b6a:	e10e      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004b6c:	2308      	movs	r3, #8
 8004b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b72:	e10a      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004b74:	2310      	movs	r3, #16
 8004b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b7a:	e106      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a7c      	ldr	r2, [pc, #496]	; (8004d74 <UART_SetConfig+0x2e8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d138      	bne.n	8004bf8 <UART_SetConfig+0x16c>
 8004b86:	4b7a      	ldr	r3, [pc, #488]	; (8004d70 <UART_SetConfig+0x2e4>)
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8c:	f003 030c 	and.w	r3, r3, #12
 8004b90:	2b0c      	cmp	r3, #12
 8004b92:	d82d      	bhi.n	8004bf0 <UART_SetConfig+0x164>
 8004b94:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <UART_SetConfig+0x110>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004bd1 	.word	0x08004bd1
 8004ba0:	08004bf1 	.word	0x08004bf1
 8004ba4:	08004bf1 	.word	0x08004bf1
 8004ba8:	08004bf1 	.word	0x08004bf1
 8004bac:	08004be1 	.word	0x08004be1
 8004bb0:	08004bf1 	.word	0x08004bf1
 8004bb4:	08004bf1 	.word	0x08004bf1
 8004bb8:	08004bf1 	.word	0x08004bf1
 8004bbc:	08004bd9 	.word	0x08004bd9
 8004bc0:	08004bf1 	.word	0x08004bf1
 8004bc4:	08004bf1 	.word	0x08004bf1
 8004bc8:	08004bf1 	.word	0x08004bf1
 8004bcc:	08004be9 	.word	0x08004be9
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bd6:	e0d8      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bde:	e0d4      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004be0:	2304      	movs	r3, #4
 8004be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004be6:	e0d0      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004be8:	2308      	movs	r3, #8
 8004bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bee:	e0cc      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bf6:	e0c8      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a5e      	ldr	r2, [pc, #376]	; (8004d78 <UART_SetConfig+0x2ec>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d125      	bne.n	8004c4e <UART_SetConfig+0x1c2>
 8004c02:	4b5b      	ldr	r3, [pc, #364]	; (8004d70 <UART_SetConfig+0x2e4>)
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c0c:	2b30      	cmp	r3, #48	; 0x30
 8004c0e:	d016      	beq.n	8004c3e <UART_SetConfig+0x1b2>
 8004c10:	2b30      	cmp	r3, #48	; 0x30
 8004c12:	d818      	bhi.n	8004c46 <UART_SetConfig+0x1ba>
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d00a      	beq.n	8004c2e <UART_SetConfig+0x1a2>
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	d814      	bhi.n	8004c46 <UART_SetConfig+0x1ba>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <UART_SetConfig+0x19a>
 8004c20:	2b10      	cmp	r3, #16
 8004c22:	d008      	beq.n	8004c36 <UART_SetConfig+0x1aa>
 8004c24:	e00f      	b.n	8004c46 <UART_SetConfig+0x1ba>
 8004c26:	2300      	movs	r3, #0
 8004c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c2c:	e0ad      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c34:	e0a9      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004c36:	2304      	movs	r3, #4
 8004c38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c3c:	e0a5      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004c3e:	2308      	movs	r3, #8
 8004c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c44:	e0a1      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004c46:	2310      	movs	r3, #16
 8004c48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c4c:	e09d      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a4a      	ldr	r2, [pc, #296]	; (8004d7c <UART_SetConfig+0x2f0>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d125      	bne.n	8004ca4 <UART_SetConfig+0x218>
 8004c58:	4b45      	ldr	r3, [pc, #276]	; (8004d70 <UART_SetConfig+0x2e4>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c62:	2bc0      	cmp	r3, #192	; 0xc0
 8004c64:	d016      	beq.n	8004c94 <UART_SetConfig+0x208>
 8004c66:	2bc0      	cmp	r3, #192	; 0xc0
 8004c68:	d818      	bhi.n	8004c9c <UART_SetConfig+0x210>
 8004c6a:	2b80      	cmp	r3, #128	; 0x80
 8004c6c:	d00a      	beq.n	8004c84 <UART_SetConfig+0x1f8>
 8004c6e:	2b80      	cmp	r3, #128	; 0x80
 8004c70:	d814      	bhi.n	8004c9c <UART_SetConfig+0x210>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <UART_SetConfig+0x1f0>
 8004c76:	2b40      	cmp	r3, #64	; 0x40
 8004c78:	d008      	beq.n	8004c8c <UART_SetConfig+0x200>
 8004c7a:	e00f      	b.n	8004c9c <UART_SetConfig+0x210>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c82:	e082      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004c84:	2302      	movs	r3, #2
 8004c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c8a:	e07e      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004c8c:	2304      	movs	r3, #4
 8004c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c92:	e07a      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004c94:	2308      	movs	r3, #8
 8004c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c9a:	e076      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ca2:	e072      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a35      	ldr	r2, [pc, #212]	; (8004d80 <UART_SetConfig+0x2f4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d12a      	bne.n	8004d04 <UART_SetConfig+0x278>
 8004cae:	4b30      	ldr	r3, [pc, #192]	; (8004d70 <UART_SetConfig+0x2e4>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cbc:	d01a      	beq.n	8004cf4 <UART_SetConfig+0x268>
 8004cbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cc2:	d81b      	bhi.n	8004cfc <UART_SetConfig+0x270>
 8004cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc8:	d00c      	beq.n	8004ce4 <UART_SetConfig+0x258>
 8004cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cce:	d815      	bhi.n	8004cfc <UART_SetConfig+0x270>
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <UART_SetConfig+0x250>
 8004cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cd8:	d008      	beq.n	8004cec <UART_SetConfig+0x260>
 8004cda:	e00f      	b.n	8004cfc <UART_SetConfig+0x270>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ce2:	e052      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cea:	e04e      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004cec:	2304      	movs	r3, #4
 8004cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cf2:	e04a      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004cf4:	2308      	movs	r3, #8
 8004cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cfa:	e046      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d02:	e042      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a17      	ldr	r2, [pc, #92]	; (8004d68 <UART_SetConfig+0x2dc>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d13a      	bne.n	8004d84 <UART_SetConfig+0x2f8>
 8004d0e:	4b18      	ldr	r3, [pc, #96]	; (8004d70 <UART_SetConfig+0x2e4>)
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d1c:	d01a      	beq.n	8004d54 <UART_SetConfig+0x2c8>
 8004d1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d22:	d81b      	bhi.n	8004d5c <UART_SetConfig+0x2d0>
 8004d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d28:	d00c      	beq.n	8004d44 <UART_SetConfig+0x2b8>
 8004d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d2e:	d815      	bhi.n	8004d5c <UART_SetConfig+0x2d0>
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <UART_SetConfig+0x2b0>
 8004d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d38:	d008      	beq.n	8004d4c <UART_SetConfig+0x2c0>
 8004d3a:	e00f      	b.n	8004d5c <UART_SetConfig+0x2d0>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d42:	e022      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004d44:	2302      	movs	r3, #2
 8004d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d4a:	e01e      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d52:	e01a      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004d54:	2308      	movs	r3, #8
 8004d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d5a:	e016      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004d5c:	2310      	movs	r3, #16
 8004d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d62:	e012      	b.n	8004d8a <UART_SetConfig+0x2fe>
 8004d64:	cfff69f3 	.word	0xcfff69f3
 8004d68:	40008000 	.word	0x40008000
 8004d6c:	40013800 	.word	0x40013800
 8004d70:	40021000 	.word	0x40021000
 8004d74:	40004400 	.word	0x40004400
 8004d78:	40004800 	.word	0x40004800
 8004d7c:	40004c00 	.word	0x40004c00
 8004d80:	40005000 	.word	0x40005000
 8004d84:	2310      	movs	r3, #16
 8004d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4aae      	ldr	r2, [pc, #696]	; (8005048 <UART_SetConfig+0x5bc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	f040 8097 	bne.w	8004ec4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d9a:	2b08      	cmp	r3, #8
 8004d9c:	d823      	bhi.n	8004de6 <UART_SetConfig+0x35a>
 8004d9e:	a201      	add	r2, pc, #4	; (adr r2, 8004da4 <UART_SetConfig+0x318>)
 8004da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da4:	08004dc9 	.word	0x08004dc9
 8004da8:	08004de7 	.word	0x08004de7
 8004dac:	08004dd1 	.word	0x08004dd1
 8004db0:	08004de7 	.word	0x08004de7
 8004db4:	08004dd7 	.word	0x08004dd7
 8004db8:	08004de7 	.word	0x08004de7
 8004dbc:	08004de7 	.word	0x08004de7
 8004dc0:	08004de7 	.word	0x08004de7
 8004dc4:	08004ddf 	.word	0x08004ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc8:	f7fe f880 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 8004dcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dce:	e010      	b.n	8004df2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd0:	4b9e      	ldr	r3, [pc, #632]	; (800504c <UART_SetConfig+0x5c0>)
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004dd4:	e00d      	b.n	8004df2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dd6:	f7fe f80b 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8004dda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ddc:	e009      	b.n	8004df2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004de4:	e005      	b.n	8004df2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004df0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8130 	beq.w	800505a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	4a94      	ldr	r2, [pc, #592]	; (8005050 <UART_SetConfig+0x5c4>)
 8004e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e04:	461a      	mov	r2, r3
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	4413      	add	r3, r2
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d305      	bcc.n	8004e2a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d903      	bls.n	8004e32 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e30:	e113      	b.n	800505a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	2200      	movs	r2, #0
 8004e36:	60bb      	str	r3, [r7, #8]
 8004e38:	60fa      	str	r2, [r7, #12]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	4a84      	ldr	r2, [pc, #528]	; (8005050 <UART_SetConfig+0x5c4>)
 8004e40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2200      	movs	r2, #0
 8004e48:	603b      	str	r3, [r7, #0]
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e54:	f7fb feae 	bl	8000bb4 <__aeabi_uldivmod>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4619      	mov	r1, r3
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	020b      	lsls	r3, r1, #8
 8004e6a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e6e:	0202      	lsls	r2, r0, #8
 8004e70:	6979      	ldr	r1, [r7, #20]
 8004e72:	6849      	ldr	r1, [r1, #4]
 8004e74:	0849      	lsrs	r1, r1, #1
 8004e76:	2000      	movs	r0, #0
 8004e78:	460c      	mov	r4, r1
 8004e7a:	4605      	mov	r5, r0
 8004e7c:	eb12 0804 	adds.w	r8, r2, r4
 8004e80:	eb43 0905 	adc.w	r9, r3, r5
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	469a      	mov	sl, r3
 8004e8c:	4693      	mov	fp, r2
 8004e8e:	4652      	mov	r2, sl
 8004e90:	465b      	mov	r3, fp
 8004e92:	4640      	mov	r0, r8
 8004e94:	4649      	mov	r1, r9
 8004e96:	f7fb fe8d 	bl	8000bb4 <__aeabi_uldivmod>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ea8:	d308      	bcc.n	8004ebc <UART_SetConfig+0x430>
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eb0:	d204      	bcs.n	8004ebc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6a3a      	ldr	r2, [r7, #32]
 8004eb8:	60da      	str	r2, [r3, #12]
 8004eba:	e0ce      	b.n	800505a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ec2:	e0ca      	b.n	800505a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ecc:	d166      	bne.n	8004f9c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004ece:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d827      	bhi.n	8004f26 <UART_SetConfig+0x49a>
 8004ed6:	a201      	add	r2, pc, #4	; (adr r2, 8004edc <UART_SetConfig+0x450>)
 8004ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004edc:	08004f01 	.word	0x08004f01
 8004ee0:	08004f09 	.word	0x08004f09
 8004ee4:	08004f11 	.word	0x08004f11
 8004ee8:	08004f27 	.word	0x08004f27
 8004eec:	08004f17 	.word	0x08004f17
 8004ef0:	08004f27 	.word	0x08004f27
 8004ef4:	08004f27 	.word	0x08004f27
 8004ef8:	08004f27 	.word	0x08004f27
 8004efc:	08004f1f 	.word	0x08004f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f00:	f7fd ffe4 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 8004f04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f06:	e014      	b.n	8004f32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f08:	f7fd fff6 	bl	8002ef8 <HAL_RCC_GetPCLK2Freq>
 8004f0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f0e:	e010      	b.n	8004f32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f10:	4b4e      	ldr	r3, [pc, #312]	; (800504c <UART_SetConfig+0x5c0>)
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f14:	e00d      	b.n	8004f32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f16:	f7fd ff6b 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8004f1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f1c:	e009      	b.n	8004f32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f24:	e005      	b.n	8004f32 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 8090 	beq.w	800505a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	4a44      	ldr	r2, [pc, #272]	; (8005050 <UART_SetConfig+0x5c4>)
 8004f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f44:	461a      	mov	r2, r3
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f4c:	005a      	lsls	r2, r3, #1
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	085b      	lsrs	r3, r3, #1
 8004f54:	441a      	add	r2, r3
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	2b0f      	cmp	r3, #15
 8004f64:	d916      	bls.n	8004f94 <UART_SetConfig+0x508>
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6c:	d212      	bcs.n	8004f94 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	f023 030f 	bic.w	r3, r3, #15
 8004f76:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	085b      	lsrs	r3, r3, #1
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	8bfb      	ldrh	r3, [r7, #30]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	8bfa      	ldrh	r2, [r7, #30]
 8004f90:	60da      	str	r2, [r3, #12]
 8004f92:	e062      	b.n	800505a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f9a:	e05e      	b.n	800505a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d828      	bhi.n	8004ff6 <UART_SetConfig+0x56a>
 8004fa4:	a201      	add	r2, pc, #4	; (adr r2, 8004fac <UART_SetConfig+0x520>)
 8004fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004faa:	bf00      	nop
 8004fac:	08004fd1 	.word	0x08004fd1
 8004fb0:	08004fd9 	.word	0x08004fd9
 8004fb4:	08004fe1 	.word	0x08004fe1
 8004fb8:	08004ff7 	.word	0x08004ff7
 8004fbc:	08004fe7 	.word	0x08004fe7
 8004fc0:	08004ff7 	.word	0x08004ff7
 8004fc4:	08004ff7 	.word	0x08004ff7
 8004fc8:	08004ff7 	.word	0x08004ff7
 8004fcc:	08004fef 	.word	0x08004fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fd0:	f7fd ff7c 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 8004fd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fd6:	e014      	b.n	8005002 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fd8:	f7fd ff8e 	bl	8002ef8 <HAL_RCC_GetPCLK2Freq>
 8004fdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fde:	e010      	b.n	8005002 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe0:	4b1a      	ldr	r3, [pc, #104]	; (800504c <UART_SetConfig+0x5c0>)
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fe4:	e00d      	b.n	8005002 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fe6:	f7fd ff03 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8004fea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fec:	e009      	b.n	8005002 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ff4:	e005      	b.n	8005002 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005000:	bf00      	nop
    }

    if (pclk != 0U)
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	2b00      	cmp	r3, #0
 8005006:	d028      	beq.n	800505a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	4a10      	ldr	r2, [pc, #64]	; (8005050 <UART_SetConfig+0x5c4>)
 800500e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005012:	461a      	mov	r2, r3
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	fbb3 f2f2 	udiv	r2, r3, r2
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	085b      	lsrs	r3, r3, #1
 8005020:	441a      	add	r2, r3
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	fbb2 f3f3 	udiv	r3, r2, r3
 800502a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	2b0f      	cmp	r3, #15
 8005030:	d910      	bls.n	8005054 <UART_SetConfig+0x5c8>
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005038:	d20c      	bcs.n	8005054 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	b29a      	uxth	r2, r3
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60da      	str	r2, [r3, #12]
 8005044:	e009      	b.n	800505a <UART_SetConfig+0x5ce>
 8005046:	bf00      	nop
 8005048:	40008000 	.word	0x40008000
 800504c:	00f42400 	.word	0x00f42400
 8005050:	080057bc 	.word	0x080057bc
      }
      else
      {
        ret = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2201      	movs	r2, #1
 800505e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2201      	movs	r2, #1
 8005066:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2200      	movs	r2, #0
 800506e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	2200      	movs	r2, #0
 8005074:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005076:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800507a:	4618      	mov	r0, r3
 800507c:	3730      	adds	r7, #48	; 0x30
 800507e:	46bd      	mov	sp, r7
 8005080:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	f003 0308 	and.w	r3, r3, #8
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00a      	beq.n	80050ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	f003 0304 	and.w	r3, r3, #4
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005160:	2b00      	cmp	r3, #0
 8005162:	d01a      	beq.n	800519a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005182:	d10a      	bne.n	800519a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	605a      	str	r2, [r3, #4]
  }
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b098      	sub	sp, #96	; 0x60
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051d8:	f7fc fc54 	bl	8001a84 <HAL_GetTick>
 80051dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d12f      	bne.n	800524c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051f4:	2200      	movs	r2, #0
 80051f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f88e 	bl	800531c <UART_WaitOnFlagUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d022      	beq.n	800524c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800521a:	653b      	str	r3, [r7, #80]	; 0x50
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	461a      	mov	r2, r3
 8005222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005224:	647b      	str	r3, [r7, #68]	; 0x44
 8005226:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800522a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800522c:	e841 2300 	strex	r3, r2, [r1]
 8005230:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e6      	bne.n	8005206 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e063      	b.n	8005314 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b04      	cmp	r3, #4
 8005258:	d149      	bne.n	80052ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800525a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005262:	2200      	movs	r2, #0
 8005264:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f857 	bl	800531c <UART_WaitOnFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d03c      	beq.n	80052ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	623b      	str	r3, [r7, #32]
   return(result);
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005288:	64fb      	str	r3, [r7, #76]	; 0x4c
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005292:	633b      	str	r3, [r7, #48]	; 0x30
 8005294:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e6      	bne.n	8005274 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3308      	adds	r3, #8
 80052ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3308      	adds	r3, #8
 80052c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052c6:	61fa      	str	r2, [r7, #28]
 80052c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	69b9      	ldr	r1, [r7, #24]
 80052cc:	69fa      	ldr	r2, [r7, #28]
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	617b      	str	r3, [r7, #20]
   return(result);
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e5      	bne.n	80052a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e012      	b.n	8005314 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3758      	adds	r7, #88	; 0x58
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	4613      	mov	r3, r2
 800532a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800532c:	e04f      	b.n	80053ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005334:	d04b      	beq.n	80053ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005336:	f7fc fba5 	bl	8001a84 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	429a      	cmp	r2, r3
 8005344:	d302      	bcc.n	800534c <UART_WaitOnFlagUntilTimeout+0x30>
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e04e      	b.n	80053ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b00      	cmp	r3, #0
 800535c:	d037      	beq.n	80053ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b80      	cmp	r3, #128	; 0x80
 8005362:	d034      	beq.n	80053ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d031      	beq.n	80053ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	f003 0308 	and.w	r3, r3, #8
 8005374:	2b08      	cmp	r3, #8
 8005376:	d110      	bne.n	800539a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2208      	movs	r2, #8
 800537e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 f838 	bl	80053f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2208      	movs	r2, #8
 800538a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e029      	b.n	80053ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053a8:	d111      	bne.n	80053ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 f81e 	bl	80053f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2220      	movs	r2, #32
 80053be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e00f      	b.n	80053ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69da      	ldr	r2, [r3, #28]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4013      	ands	r3, r2
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	429a      	cmp	r2, r3
 80053dc:	bf0c      	ite	eq
 80053de:	2301      	moveq	r3, #1
 80053e0:	2300      	movne	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	461a      	mov	r2, r3
 80053e6:	79fb      	ldrb	r3, [r7, #7]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d0a0      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b095      	sub	sp, #84	; 0x54
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005406:	e853 3f00 	ldrex	r3, [r3]
 800540a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	461a      	mov	r2, r3
 800541a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800541c:	643b      	str	r3, [r7, #64]	; 0x40
 800541e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005422:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e6      	bne.n	80053fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3308      	adds	r3, #8
 8005436:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005446:	f023 0301 	bic.w	r3, r3, #1
 800544a:	64bb      	str	r3, [r7, #72]	; 0x48
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3308      	adds	r3, #8
 8005452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005454:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005456:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800545a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e3      	bne.n	8005430 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800546c:	2b01      	cmp	r3, #1
 800546e:	d118      	bne.n	80054a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	60bb      	str	r3, [r7, #8]
   return(result);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f023 0310 	bic.w	r3, r3, #16
 8005484:	647b      	str	r3, [r7, #68]	; 0x44
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	6979      	ldr	r1, [r7, #20]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	e841 2300 	strex	r3, r2, [r1]
 800549a:	613b      	str	r3, [r7, #16]
   return(result);
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1e6      	bne.n	8005470 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80054b6:	bf00      	nop
 80054b8:	3754      	adds	r7, #84	; 0x54
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d101      	bne.n	80054d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80054d4:	2302      	movs	r3, #2
 80054d6:	e027      	b.n	8005528 <HAL_UARTEx_DisableFifoMode+0x66>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2224      	movs	r2, #36	; 0x24
 80054e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0201 	bic.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005506:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2220      	movs	r2, #32
 800551a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005548:	2302      	movs	r3, #2
 800554a:	e02d      	b.n	80055a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2224      	movs	r2, #36	; 0x24
 8005558:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0201 	bic.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f84f 	bl	800562c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e02d      	b.n	8005624 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2224      	movs	r2, #36	; 0x24
 80055d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0201 	bic.w	r2, r2, #1
 80055ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f811 	bl	800562c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005638:	2b00      	cmp	r3, #0
 800563a:	d108      	bne.n	800564e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800564c:	e031      	b.n	80056b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800564e:	2308      	movs	r3, #8
 8005650:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005652:	2308      	movs	r3, #8
 8005654:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	0e5b      	lsrs	r3, r3, #25
 800565e:	b2db      	uxtb	r3, r3
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	0f5b      	lsrs	r3, r3, #29
 800566e:	b2db      	uxtb	r3, r3
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005676:	7bbb      	ldrb	r3, [r7, #14]
 8005678:	7b3a      	ldrb	r2, [r7, #12]
 800567a:	4911      	ldr	r1, [pc, #68]	; (80056c0 <UARTEx_SetNbDataToProcess+0x94>)
 800567c:	5c8a      	ldrb	r2, [r1, r2]
 800567e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005682:	7b3a      	ldrb	r2, [r7, #12]
 8005684:	490f      	ldr	r1, [pc, #60]	; (80056c4 <UARTEx_SetNbDataToProcess+0x98>)
 8005686:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005688:	fb93 f3f2 	sdiv	r3, r3, r2
 800568c:	b29a      	uxth	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	7b7a      	ldrb	r2, [r7, #13]
 8005698:	4909      	ldr	r1, [pc, #36]	; (80056c0 <UARTEx_SetNbDataToProcess+0x94>)
 800569a:	5c8a      	ldrb	r2, [r1, r2]
 800569c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056a0:	7b7a      	ldrb	r2, [r7, #13]
 80056a2:	4908      	ldr	r1, [pc, #32]	; (80056c4 <UARTEx_SetNbDataToProcess+0x98>)
 80056a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056b2:	bf00      	nop
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	080057d4 	.word	0x080057d4
 80056c4:	080057dc 	.word	0x080057dc

080056c8 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	ed93 7a06 	vldr	s14, [r3, #24]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	edd3 7a07 	vldr	s15, [r3, #28]
 80056de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	edd3 7a08 	vldr	s15, [r3, #32]
 80056e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	edd3 7a06 	vldr	s15, [r3, #24]
 80056f8:	eeb1 7a67 	vneg.f32	s14, s15
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	edd3 7a08 	vldr	s15, [r3, #32]
 8005702:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005706:	ee77 7a67 	vsub.f32	s15, s14, s15
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1a      	ldr	r2, [r3, #32]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d006      	beq.n	800572c <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	330c      	adds	r3, #12
 8005722:	220c      	movs	r2, #12
 8005724:	2100      	movs	r1, #0
 8005726:	4618      	mov	r0, r3
 8005728:	f000 f804 	bl	8005734 <memset>
  }

}
 800572c:	bf00      	nop
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <memset>:
 8005734:	4402      	add	r2, r0
 8005736:	4603      	mov	r3, r0
 8005738:	4293      	cmp	r3, r2
 800573a:	d100      	bne.n	800573e <memset+0xa>
 800573c:	4770      	bx	lr
 800573e:	f803 1b01 	strb.w	r1, [r3], #1
 8005742:	e7f9      	b.n	8005738 <memset+0x4>

08005744 <__libc_init_array>:
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	4d0d      	ldr	r5, [pc, #52]	; (800577c <__libc_init_array+0x38>)
 8005748:	4c0d      	ldr	r4, [pc, #52]	; (8005780 <__libc_init_array+0x3c>)
 800574a:	1b64      	subs	r4, r4, r5
 800574c:	10a4      	asrs	r4, r4, #2
 800574e:	2600      	movs	r6, #0
 8005750:	42a6      	cmp	r6, r4
 8005752:	d109      	bne.n	8005768 <__libc_init_array+0x24>
 8005754:	4d0b      	ldr	r5, [pc, #44]	; (8005784 <__libc_init_array+0x40>)
 8005756:	4c0c      	ldr	r4, [pc, #48]	; (8005788 <__libc_init_array+0x44>)
 8005758:	f000 f818 	bl	800578c <_init>
 800575c:	1b64      	subs	r4, r4, r5
 800575e:	10a4      	asrs	r4, r4, #2
 8005760:	2600      	movs	r6, #0
 8005762:	42a6      	cmp	r6, r4
 8005764:	d105      	bne.n	8005772 <__libc_init_array+0x2e>
 8005766:	bd70      	pop	{r4, r5, r6, pc}
 8005768:	f855 3b04 	ldr.w	r3, [r5], #4
 800576c:	4798      	blx	r3
 800576e:	3601      	adds	r6, #1
 8005770:	e7ee      	b.n	8005750 <__libc_init_array+0xc>
 8005772:	f855 3b04 	ldr.w	r3, [r5], #4
 8005776:	4798      	blx	r3
 8005778:	3601      	adds	r6, #1
 800577a:	e7f2      	b.n	8005762 <__libc_init_array+0x1e>
 800577c:	080057ec 	.word	0x080057ec
 8005780:	080057ec 	.word	0x080057ec
 8005784:	080057ec 	.word	0x080057ec
 8005788:	080057f0 	.word	0x080057f0

0800578c <_init>:
 800578c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578e:	bf00      	nop
 8005790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005792:	bc08      	pop	{r3}
 8005794:	469e      	mov	lr, r3
 8005796:	4770      	bx	lr

08005798 <_fini>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	bf00      	nop
 800579c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579e:	bc08      	pop	{r3}
 80057a0:	469e      	mov	lr, r3
 80057a2:	4770      	bx	lr
