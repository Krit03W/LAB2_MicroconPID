
LAB2_MicroconPID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000947c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009654  08009654  00019654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009694  08009694  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009694  08009694  00019694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800969c  0800969c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800969c  0800969c  0001969c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096a0  080096a0  000196a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080096a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000010  080096b4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  080096b4  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018865  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d29  00000000  00000000  000388e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  0003b618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a0  00000000  00000000  0003cb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028f8e  00000000  00000000  0003dbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018cd0  00000000  00000000  00066b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114829  00000000  00000000  0007f856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e54  00000000  00000000  00194080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00199ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800963c 	.word	0x0800963c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	0800963c 	.word	0x0800963c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b970 	b.w	8000eec <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9e08      	ldr	r6, [sp, #32]
 8000c2a:	460d      	mov	r5, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	460f      	mov	r7, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4694      	mov	ip, r2
 8000c38:	d965      	bls.n	8000d06 <__udivmoddi4+0xe2>
 8000c3a:	fab2 f382 	clz	r3, r2
 8000c3e:	b143      	cbz	r3, 8000c52 <__udivmoddi4+0x2e>
 8000c40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c44:	f1c3 0220 	rsb	r2, r3, #32
 8000c48:	409f      	lsls	r7, r3
 8000c4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c4e:	4317      	orrs	r7, r2
 8000c50:	409c      	lsls	r4, r3
 8000c52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c56:	fa1f f58c 	uxth.w	r5, ip
 8000c5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c5e:	0c22      	lsrs	r2, r4, #16
 8000c60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c68:	fb01 f005 	mul.w	r0, r1, r5
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	d90a      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c70:	eb1c 0202 	adds.w	r2, ip, r2
 8000c74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c78:	f080 811c 	bcs.w	8000eb4 <__udivmoddi4+0x290>
 8000c7c:	4290      	cmp	r0, r2
 8000c7e:	f240 8119 	bls.w	8000eb4 <__udivmoddi4+0x290>
 8000c82:	3902      	subs	r1, #2
 8000c84:	4462      	add	r2, ip
 8000c86:	1a12      	subs	r2, r2, r0
 8000c88:	b2a4      	uxth	r4, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c96:	fb00 f505 	mul.w	r5, r0, r5
 8000c9a:	42a5      	cmp	r5, r4
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x90>
 8000c9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca6:	f080 8107 	bcs.w	8000eb8 <__udivmoddi4+0x294>
 8000caa:	42a5      	cmp	r5, r4
 8000cac:	f240 8104 	bls.w	8000eb8 <__udivmoddi4+0x294>
 8000cb0:	4464      	add	r4, ip
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb8:	1b64      	subs	r4, r4, r5
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11e      	cbz	r6, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40dc      	lsrs	r4, r3
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0xbc>
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f000 80ed 	beq.w	8000eae <__udivmoddi4+0x28a>
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce0:	fab3 f183 	clz	r1, r3
 8000ce4:	2900      	cmp	r1, #0
 8000ce6:	d149      	bne.n	8000d7c <__udivmoddi4+0x158>
 8000ce8:	42ab      	cmp	r3, r5
 8000cea:	d302      	bcc.n	8000cf2 <__udivmoddi4+0xce>
 8000cec:	4282      	cmp	r2, r0
 8000cee:	f200 80f8 	bhi.w	8000ee2 <__udivmoddi4+0x2be>
 8000cf2:	1a84      	subs	r4, r0, r2
 8000cf4:	eb65 0203 	sbc.w	r2, r5, r3
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	4617      	mov	r7, r2
 8000cfc:	2e00      	cmp	r6, #0
 8000cfe:	d0e2      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	e9c6 4700 	strd	r4, r7, [r6]
 8000d04:	e7df      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d06:	b902      	cbnz	r2, 8000d0a <__udivmoddi4+0xe6>
 8000d08:	deff      	udf	#255	; 0xff
 8000d0a:	fab2 f382 	clz	r3, r2
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 8090 	bne.w	8000e34 <__udivmoddi4+0x210>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f fe8c 	uxth.w	lr, ip
 8000d1e:	2101      	movs	r1, #1
 8000d20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d24:	fb07 2015 	mls	r0, r7, r5, r2
 8000d28:	0c22      	lsrs	r2, r4, #16
 8000d2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d2e:	fb0e f005 	mul.w	r0, lr, r5
 8000d32:	4290      	cmp	r0, r2
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x124>
 8000d36:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x122>
 8000d40:	4290      	cmp	r0, r2
 8000d42:	f200 80cb 	bhi.w	8000edc <__udivmoddi4+0x2b8>
 8000d46:	4645      	mov	r5, r8
 8000d48:	1a12      	subs	r2, r2, r0
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d50:	fb07 2210 	mls	r2, r7, r0, r2
 8000d54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d58:	fb0e fe00 	mul.w	lr, lr, r0
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x14e>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d68:	d202      	bcs.n	8000d70 <__udivmoddi4+0x14c>
 8000d6a:	45a6      	cmp	lr, r4
 8000d6c:	f200 80bb 	bhi.w	8000ee6 <__udivmoddi4+0x2c2>
 8000d70:	4610      	mov	r0, r2
 8000d72:	eba4 040e 	sub.w	r4, r4, lr
 8000d76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7a:	e79f      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d7c:	f1c1 0720 	rsb	r7, r1, #32
 8000d80:	408b      	lsls	r3, r1
 8000d82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d92:	40fd      	lsrs	r5, r7
 8000d94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d98:	4323      	orrs	r3, r4
 8000d9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	fb09 5518 	mls	r5, r9, r8, r5
 8000da6:	0c1c      	lsrs	r4, r3, #16
 8000da8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dac:	fb08 f50e 	mul.w	r5, r8, lr
 8000db0:	42a5      	cmp	r5, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	fa00 f001 	lsl.w	r0, r0, r1
 8000dba:	d90b      	bls.n	8000dd4 <__udivmoddi4+0x1b0>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc4:	f080 8088 	bcs.w	8000ed8 <__udivmoddi4+0x2b4>
 8000dc8:	42a5      	cmp	r5, r4
 8000dca:	f240 8085 	bls.w	8000ed8 <__udivmoddi4+0x2b4>
 8000dce:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd2:	4464      	add	r4, ip
 8000dd4:	1b64      	subs	r4, r4, r5
 8000dd6:	b29d      	uxth	r5, r3
 8000dd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ddc:	fb09 4413 	mls	r4, r9, r3, r4
 8000de0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x1da>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df4:	d26c      	bcs.n	8000ed0 <__udivmoddi4+0x2ac>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	d96a      	bls.n	8000ed0 <__udivmoddi4+0x2ac>
 8000dfa:	3b02      	subs	r3, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e02:	fba3 9502 	umull	r9, r5, r3, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	46c8      	mov	r8, r9
 8000e0e:	46ae      	mov	lr, r5
 8000e10:	d356      	bcc.n	8000ec0 <__udivmoddi4+0x29c>
 8000e12:	d053      	beq.n	8000ebc <__udivmoddi4+0x298>
 8000e14:	b156      	cbz	r6, 8000e2c <__udivmoddi4+0x208>
 8000e16:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e22:	40ca      	lsrs	r2, r1
 8000e24:	40cc      	lsrs	r4, r1
 8000e26:	4317      	orrs	r7, r2
 8000e28:	e9c6 7400 	strd	r7, r4, [r6]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	2100      	movs	r1, #0
 8000e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e34:	f1c3 0120 	rsb	r1, r3, #32
 8000e38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000e40:	fa25 f101 	lsr.w	r1, r5, r1
 8000e44:	409d      	lsls	r5, r3
 8000e46:	432a      	orrs	r2, r5
 8000e48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4c:	fa1f fe8c 	uxth.w	lr, ip
 8000e50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e54:	fb07 1510 	mls	r5, r7, r0, r1
 8000e58:	0c11      	lsrs	r1, r2, #16
 8000e5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e62:	428d      	cmp	r5, r1
 8000e64:	fa04 f403 	lsl.w	r4, r4, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x258>
 8000e6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e72:	d22f      	bcs.n	8000ed4 <__udivmoddi4+0x2b0>
 8000e74:	428d      	cmp	r5, r1
 8000e76:	d92d      	bls.n	8000ed4 <__udivmoddi4+0x2b0>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4461      	add	r1, ip
 8000e7c:	1b49      	subs	r1, r1, r5
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e84:	fb07 1115 	mls	r1, r7, r5, r1
 8000e88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e90:	4291      	cmp	r1, r2
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x282>
 8000e94:	eb1c 0202 	adds.w	r2, ip, r2
 8000e98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e9c:	d216      	bcs.n	8000ecc <__udivmoddi4+0x2a8>
 8000e9e:	4291      	cmp	r1, r2
 8000ea0:	d914      	bls.n	8000ecc <__udivmoddi4+0x2a8>
 8000ea2:	3d02      	subs	r5, #2
 8000ea4:	4462      	add	r2, ip
 8000ea6:	1a52      	subs	r2, r2, r1
 8000ea8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eac:	e738      	b.n	8000d20 <__udivmoddi4+0xfc>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000eb4:	4639      	mov	r1, r7
 8000eb6:	e6e6      	b.n	8000c86 <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e6fb      	b.n	8000cb4 <__udivmoddi4+0x90>
 8000ebc:	4548      	cmp	r0, r9
 8000ebe:	d2a9      	bcs.n	8000e14 <__udivmoddi4+0x1f0>
 8000ec0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	e7a3      	b.n	8000e14 <__udivmoddi4+0x1f0>
 8000ecc:	4645      	mov	r5, r8
 8000ece:	e7ea      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000ed0:	462b      	mov	r3, r5
 8000ed2:	e794      	b.n	8000dfe <__udivmoddi4+0x1da>
 8000ed4:	4640      	mov	r0, r8
 8000ed6:	e7d1      	b.n	8000e7c <__udivmoddi4+0x258>
 8000ed8:	46d0      	mov	r8, sl
 8000eda:	e77b      	b.n	8000dd4 <__udivmoddi4+0x1b0>
 8000edc:	3d02      	subs	r5, #2
 8000ede:	4462      	add	r2, ip
 8000ee0:	e732      	b.n	8000d48 <__udivmoddi4+0x124>
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	e70a      	b.n	8000cfc <__udivmoddi4+0xd8>
 8000ee6:	4464      	add	r4, ip
 8000ee8:	3802      	subs	r0, #2
 8000eea:	e742      	b.n	8000d72 <__udivmoddi4+0x14e>

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <PlantSimulation2>:
position += speed;
return position;
}
//ข้อสอง
float PlantSimulation2(float VIn) // run with fix frequency
{
 8000ef0:	b5b0      	push	{r4, r5, r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	ed87 0a01 	vstr	s0, [r7, #4]
static float speed =0;
static float position2 =0;
float current= VIn - speed * 0.0123;
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff faf0 	bl	80004e0 <__aeabi_f2d>
 8000f00:	4604      	mov	r4, r0
 8000f02:	460d      	mov	r5, r1
 8000f04:	4b30      	ldr	r3, [pc, #192]	; (8000fc8 <PlantSimulation2+0xd8>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fae9 	bl	80004e0 <__aeabi_f2d>
 8000f0e:	a328      	add	r3, pc, #160	; (adr r3, 8000fb0 <PlantSimulation2+0xc0>)
 8000f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f14:	f7ff fb3c 	bl	8000590 <__aeabi_dmul>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	4629      	mov	r1, r5
 8000f20:	f7ff f97e 	bl	8000220 <__aeabi_dsub>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f7ff fe12 	bl	8000b54 <__aeabi_d2f>
 8000f30:	4603      	mov	r3, r0
 8000f32:	617b      	str	r3, [r7, #20]
float torque = current * 0.456;
 8000f34:	6978      	ldr	r0, [r7, #20]
 8000f36:	f7ff fad3 	bl	80004e0 <__aeabi_f2d>
 8000f3a:	a31f      	add	r3, pc, #124	; (adr r3, 8000fb8 <PlantSimulation2+0xc8>)
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	f7ff fb26 	bl	8000590 <__aeabi_dmul>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f7ff fe02 	bl	8000b54 <__aeabi_d2f>
 8000f50:	4603      	mov	r3, r0
 8000f52:	613b      	str	r3, [r7, #16]
float acc = torque * 0.789;
 8000f54:	6938      	ldr	r0, [r7, #16]
 8000f56:	f7ff fac3 	bl	80004e0 <__aeabi_f2d>
 8000f5a:	a319      	add	r3, pc, #100	; (adr r3, 8000fc0 <PlantSimulation2+0xd0>)
 8000f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f60:	f7ff fb16 	bl	8000590 <__aeabi_dmul>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f7ff fdf2 	bl	8000b54 <__aeabi_d2f>
 8000f70:	4603      	mov	r3, r0
 8000f72:	60fb      	str	r3, [r7, #12]
speed += acc;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <PlantSimulation2+0xd8>)
 8000f76:	ed93 7a00 	vldr	s14, [r3]
 8000f7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <PlantSimulation2+0xd8>)
 8000f84:	edc3 7a00 	vstr	s15, [r3]
position2 += speed;
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <PlantSimulation2+0xdc>)
 8000f8a:	ed93 7a00 	vldr	s14, [r3]
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <PlantSimulation2+0xd8>)
 8000f90:	edd3 7a00 	vldr	s15, [r3]
 8000f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <PlantSimulation2+0xdc>)
 8000f9a:	edc3 7a00 	vstr	s15, [r3]
return position2;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <PlantSimulation2+0xdc>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	ee07 3a90 	vmov	s15, r3
}
 8000fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bdb0      	pop	{r4, r5, r7, pc}
 8000fb0:	0ded288d 	.word	0x0ded288d
 8000fb4:	3f8930be 	.word	0x3f8930be
 8000fb8:	9fbe76c9 	.word	0x9fbe76c9
 8000fbc:	3fdd2f1a 	.word	0x3fdd2f1a
 8000fc0:	ed916873 	.word	0xed916873
 8000fc4:	3fe93f7c 	.word	0x3fe93f7c
 8000fc8:	200004d4 	.word	0x200004d4
 8000fcc:	200004d8 	.word	0x200004d8

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fd4:	b088      	sub	sp, #32
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd8:	f001 fcb7 	bl	800294a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fdc:	f000 fb66 	bl	80016ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe0:	f000 ff44 	bl	8001e6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000fe4:	f000 ff08 	bl	8001df8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000fe8:	f000 fc54 	bl	8001894 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000fec:	f000 fddc 	bl	8001ba8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000ff0:	f000 fd56 	bl	8001aa0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000ff4:	f000 fba6 	bl	8001744 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000ff8:	f000 fe2c 	bl	8001c54 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000ffc:	f000 feae 	bl	8001d5c <MX_TIM5_Init>
  MX_TIM1_Init();
 8001000:	f000 fc92 	bl	8001928 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //ข้อหนึ่ง
  PID.Kp =0.001;
 8001004:	4b8e      	ldr	r3, [pc, #568]	; (8001240 <main+0x270>)
 8001006:	4a8f      	ldr	r2, [pc, #572]	; (8001244 <main+0x274>)
 8001008:	619a      	str	r2, [r3, #24]
  PID.Ki =0;
 800100a:	4b8d      	ldr	r3, [pc, #564]	; (8001240 <main+0x270>)
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  PID.Kd = 0;
 8001012:	4b8b      	ldr	r3, [pc, #556]	; (8001240 <main+0x270>)
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 800101a:	2100      	movs	r1, #0
 800101c:	4888      	ldr	r0, [pc, #544]	; (8001240 <main+0x270>)
 800101e:	f008 faab 	bl	8009578 <arm_pid_init_f32>

  HAL_TIM_Base_Start(&htim1);
 8001022:	4889      	ldr	r0, [pc, #548]	; (8001248 <main+0x278>)
 8001024:	f005 f856 	bl	80060d4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001028:	2100      	movs	r1, #0
 800102a:	4887      	ldr	r0, [pc, #540]	; (8001248 <main+0x278>)
 800102c:	f005 f99c 	bl	8006368 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001030:	2104      	movs	r1, #4
 8001032:	4885      	ldr	r0, [pc, #532]	; (8001248 <main+0x278>)
 8001034:	f005 f998 	bl	8006368 <HAL_TIM_PWM_Start>
  //ข้อสอง
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001038:	213c      	movs	r1, #60	; 0x3c
 800103a:	4884      	ldr	r0, [pc, #528]	; (800124c <main+0x27c>)
 800103c:	f005 fb4c 	bl	80066d8 <HAL_TIM_Encoder_Start>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001040:	217f      	movs	r1, #127	; 0x7f
 8001042:	4883      	ldr	r0, [pc, #524]	; (8001250 <main+0x280>)
 8001044:	f003 f822 	bl	800408c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 40);
 8001048:	2228      	movs	r2, #40	; 0x28
 800104a:	4982      	ldr	r1, [pc, #520]	; (8001254 <main+0x284>)
 800104c:	4880      	ldr	r0, [pc, #512]	; (8001250 <main+0x280>)
 800104e:	f002 f90f 	bl	8003270 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim2);
 8001052:	4881      	ldr	r0, [pc, #516]	; (8001258 <main+0x288>)
 8001054:	f005 f83e 	bl	80060d4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001058:	2100      	movs	r1, #0
 800105a:	487f      	ldr	r0, [pc, #508]	; (8001258 <main+0x288>)
 800105c:	f005 f984 	bl	8006368 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001060:	2104      	movs	r1, #4
 8001062:	487d      	ldr	r0, [pc, #500]	; (8001258 <main+0x288>)
 8001064:	f005 f980 	bl	8006368 <HAL_TIM_PWM_Start>

  PID2.Kp =0.1;
 8001068:	4b7c      	ldr	r3, [pc, #496]	; (800125c <main+0x28c>)
 800106a:	4a7d      	ldr	r2, [pc, #500]	; (8001260 <main+0x290>)
 800106c:	619a      	str	r2, [r3, #24]
  PID2.Ki =0.00001;
 800106e:	4b7b      	ldr	r3, [pc, #492]	; (800125c <main+0x28c>)
 8001070:	4a7c      	ldr	r2, [pc, #496]	; (8001264 <main+0x294>)
 8001072:	61da      	str	r2, [r3, #28]
  PID2.Kd = 0.1;
 8001074:	4b79      	ldr	r3, [pc, #484]	; (800125c <main+0x28c>)
 8001076:	4a7a      	ldr	r2, [pc, #488]	; (8001260 <main+0x290>)
 8001078:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID2, 0);
 800107a:	2100      	movs	r1, #0
 800107c:	4877      	ldr	r0, [pc, #476]	; (800125c <main+0x28c>)
 800107e:	f008 fa7b 	bl	8009578 <arm_pid_init_f32>

  //ข้อสาม

  HAL_TIM_Base_Start(&htim4);
 8001082:	4879      	ldr	r0, [pc, #484]	; (8001268 <main+0x298>)
 8001084:	f005 f826 	bl	80060d4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8001088:	4878      	ldr	r0, [pc, #480]	; (800126c <main+0x29c>)
 800108a:	f005 f893 	bl	80061b4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 800108e:	2100      	movs	r1, #0
 8001090:	4875      	ldr	r0, [pc, #468]	; (8001268 <main+0x298>)
 8001092:	f005 f969 	bl	8006368 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8001096:	2104      	movs	r1, #4
 8001098:	4873      	ldr	r0, [pc, #460]	; (8001268 <main+0x298>)
 800109a:	f005 f965 	bl	8006368 <HAL_TIM_PWM_Start>
  UARTDMAconfig();
 800109e:	f001 f8bd 	bl	800221c <UARTDMAconfig>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  swapmode();
 80010a2:	f000 ff9b 	bl	8001fdc <swapmode>
	  ADC_pot();
 80010a6:	f000 ffdd 	bl	8002064 <ADC_pot>
	  //ข้อหนึ่ง
	  if (mode == 1){
 80010aa:	4b71      	ldr	r3, [pc, #452]	; (8001270 <main+0x2a0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	f040 810b 	bne.w	80012ca <main+0x2fa>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2120      	movs	r1, #32
 80010b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010bc:	f003 ff2c 	bl	8004f18 <HAL_GPIO_WritePin>
	  question1_lab2();
 80010c0:	f000 ff42 	bl	8001f48 <question1_lab2>
	  	 //PWM_control();

	  	 Vfeedback = arm_pid_f32(&PID, (setposition - position_motor)*10000.0);
 80010c4:	4b6b      	ldr	r3, [pc, #428]	; (8001274 <main+0x2a4>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b6b      	ldr	r3, [pc, #428]	; (8001278 <main+0x2a8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f9f4 	bl	80004bc <__aeabi_i2d>
 80010d4:	a358      	add	r3, pc, #352	; (adr r3, 8001238 <main+0x268>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f7ff fa59 	bl	8000590 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	f7ff fd35 	bl	8000b54 <__aeabi_d2f>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4a54      	ldr	r2, [pc, #336]	; (8001240 <main+0x270>)
 80010ee:	617a      	str	r2, [r7, #20]
 80010f0:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	ed93 7a00 	vldr	s14, [r3]
 80010f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80010fc:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	edd3 6a01 	vldr	s13, [r3, #4]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	edd3 7a03 	vldr	s15, [r3, #12]
 800110c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001110:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	edd3 6a02 	vldr	s13, [r3, #8]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001124:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800112e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001132:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	68da      	ldr	r2, [r3, #12]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4a4b      	ldr	r2, [pc, #300]	; (800127c <main+0x2ac>)
 800114e:	6013      	str	r3, [r2, #0]
	  	 new_speed = ((Vfeedback/360.0)*1000.0);
 8001150:	4b4a      	ldr	r3, [pc, #296]	; (800127c <main+0x2ac>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff f9c3 	bl	80004e0 <__aeabi_f2d>
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	4b48      	ldr	r3, [pc, #288]	; (8001280 <main+0x2b0>)
 8001160:	f7ff fb40 	bl	80007e4 <__aeabi_ddiv>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4b44      	ldr	r3, [pc, #272]	; (8001284 <main+0x2b4>)
 8001172:	f7ff fa0d 	bl	8000590 <__aeabi_dmul>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fce9 	bl	8000b54 <__aeabi_d2f>
 8001182:	4603      	mov	r3, r0
 8001184:	4a40      	ldr	r2, [pc, #256]	; (8001288 <main+0x2b8>)
 8001186:	6013      	str	r3, [r2, #0]
	  	 setposition = position_poten;
 8001188:	4b40      	ldr	r3, [pc, #256]	; (800128c <main+0x2bc>)
 800118a:	edd3 7a00 	vldr	s15, [r3]
 800118e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001192:	ee17 2a90 	vmov	r2, s15
 8001196:	4b37      	ldr	r3, [pc, #220]	; (8001274 <main+0x2a4>)
 8001198:	601a      	str	r2, [r3, #0]

	  	 if(setposition != 0){
 800119a:	4b36      	ldr	r3, [pc, #216]	; (8001274 <main+0x2a4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 8093 	beq.w	80012ca <main+0x2fa>
	  		if (setposition - position_motor > -2 && setposition - position_motor < 2)
 80011a4:	4b33      	ldr	r3, [pc, #204]	; (8001274 <main+0x2a4>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b33      	ldr	r3, [pc, #204]	; (8001278 <main+0x2a8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b2:	db11      	blt.n	80011d8 <main+0x208>
 80011b4:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <main+0x2a4>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b2f      	ldr	r3, [pc, #188]	; (8001278 <main+0x2a8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b01      	cmp	r3, #1
 80011c0:	dc0a      	bgt.n	80011d8 <main+0x208>
	  	 {


	  		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <main+0x278>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2200      	movs	r2, #0
 80011c8:	635a      	str	r2, [r3, #52]	; 0x34
	  		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <main+0x278>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2200      	movs	r2, #0
 80011d0:	639a      	str	r2, [r3, #56]	; 0x38
	  		 Num = 1;
 80011d2:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <main+0x2c0>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	601a      	str	r2, [r3, #0]

	  	 }
	  		if (setposition - position_motor < -3 || setposition - position_motor > 3)
 80011d8:	4b26      	ldr	r3, [pc, #152]	; (8001274 <main+0x2a4>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b26      	ldr	r3, [pc, #152]	; (8001278 <main+0x2a8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	f113 0f03 	cmn.w	r3, #3
 80011e6:	db06      	blt.n	80011f6 <main+0x226>
 80011e8:	4b22      	ldr	r3, [pc, #136]	; (8001274 <main+0x2a4>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <main+0x2a8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	dd69      	ble.n	80012ca <main+0x2fa>
	  			 {
	  				 if(Vfeedback < -1){
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <main+0x2ac>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001200:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001208:	d544      	bpl.n	8001294 <main+0x2c4>
	  					 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <main+0x278>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2200      	movs	r2, #0
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
	  					 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, -new_speed);
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <main+0x2b8>)
 8001214:	edd3 7a00 	vldr	s15, [r3]
 8001218:	eef1 7a67 	vneg.f32	s15, s15
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <main+0x278>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001224:	ee17 2a90 	vmov	r2, s15
 8001228:	639a      	str	r2, [r3, #56]	; 0x38
	  					 Num = 2;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <main+0x2c0>)
 800122c:	2202      	movs	r2, #2
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	e04b      	b.n	80012ca <main+0x2fa>
 8001232:	bf00      	nop
 8001234:	f3af 8000 	nop.w
 8001238:	00000000 	.word	0x00000000
 800123c:	40c38800 	.word	0x40c38800
 8001240:	20000440 	.word	0x20000440
 8001244:	3a83126f 	.word	0x3a83126f
 8001248:	2000024c 	.word	0x2000024c
 800124c:	200002e4 	.word	0x200002e4
 8001250:	2000002c 	.word	0x2000002c
 8001254:	200003c8 	.word	0x200003c8
 8001258:	20000298 	.word	0x20000298
 800125c:	2000047c 	.word	0x2000047c
 8001260:	3dcccccd 	.word	0x3dcccccd
 8001264:	3727c5ac 	.word	0x3727c5ac
 8001268:	20000330 	.word	0x20000330
 800126c:	2000037c 	.word	0x2000037c
 8001270:	20000000 	.word	0x20000000
 8001274:	20000464 	.word	0x20000464
 8001278:	20000438 	.word	0x20000438
 800127c:	20000468 	.word	0x20000468
 8001280:	40768000 	.word	0x40768000
 8001284:	408f4000 	.word	0x408f4000
 8001288:	2000046c 	.word	0x2000046c
 800128c:	2000043c 	.word	0x2000043c
 8001290:	20000470 	.word	0x20000470

	  				 }
	  				 else if(Vfeedback > 1){
 8001294:	4bb4      	ldr	r3, [pc, #720]	; (8001568 <main+0x598>)
 8001296:	edd3 7a00 	vldr	s15, [r3]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd10      	ble.n	80012ca <main+0x2fa>
	  					 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, new_speed);
 80012a8:	4bb0      	ldr	r3, [pc, #704]	; (800156c <main+0x59c>)
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	4bb0      	ldr	r3, [pc, #704]	; (8001570 <main+0x5a0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b6:	ee17 2a90 	vmov	r2, s15
 80012ba:	635a      	str	r2, [r3, #52]	; 0x34
	  					 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80012bc:	4bac      	ldr	r3, [pc, #688]	; (8001570 <main+0x5a0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2200      	movs	r2, #0
 80012c2:	639a      	str	r2, [r3, #56]	; 0x38

	  					 Num = 3;
 80012c4:	4bab      	ldr	r3, [pc, #684]	; (8001574 <main+0x5a4>)
 80012c6:	2203      	movs	r2, #3
 80012c8:	601a      	str	r2, [r3, #0]

	  	 }
	  }

	  //ข้อสอง
	  if (mode == 2){
 80012ca:	4bab      	ldr	r3, [pc, #684]	; (8001578 <main+0x5a8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	f040 80f4 	bne.w	80014bc <main+0x4ec>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2120      	movs	r1, #32
 80012d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012dc:	f003 fe1c 	bl	8004f18 <HAL_GPIO_WritePin>
	  //Encoder
	  QEIReadRaw2 = __HAL_TIM_GET_COUNTER(&htim3);
 80012e0:	4ba6      	ldr	r3, [pc, #664]	; (800157c <main+0x5ac>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	4aa6      	ldr	r2, [pc, #664]	; (8001580 <main+0x5b0>)
 80012e8:	6013      	str	r3, [r2, #0]
	  zeta2 = QEIReadRaw2/3071.0*360.0;
 80012ea:	4ba5      	ldr	r3, [pc, #660]	; (8001580 <main+0x5b0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f8d4 	bl	800049c <__aeabi_ui2d>
 80012f4:	a392      	add	r3, pc, #584	; (adr r3, 8001540 <main+0x570>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f7ff fa73 	bl	80007e4 <__aeabi_ddiv>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b9e      	ldr	r3, [pc, #632]	; (8001584 <main+0x5b4>)
 800130c:	f7ff f940 	bl	8000590 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fbd4 	bl	8000ac4 <__aeabi_d2iz>
 800131c:	4603      	mov	r3, r0
 800131e:	4a9a      	ldr	r2, [pc, #616]	; (8001588 <main+0x5b8>)
 8001320:	6013      	str	r3, [r2, #0]
	  //PID
	  setposition2 = (Avg_pot2/4095.0*359);
 8001322:	4b9a      	ldr	r3, [pc, #616]	; (800158c <main+0x5bc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f8c8 	bl	80004bc <__aeabi_i2d>
 800132c:	a386      	add	r3, pc, #536	; (adr r3, 8001548 <main+0x578>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff fa57 	bl	80007e4 <__aeabi_ddiv>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	a384      	add	r3, pc, #528	; (adr r3, 8001550 <main+0x580>)
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	f7ff f924 	bl	8000590 <__aeabi_dmul>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fbb8 	bl	8000ac4 <__aeabi_d2iz>
 8001354:	4603      	mov	r3, r0
 8001356:	4a8e      	ldr	r2, [pc, #568]	; (8001590 <main+0x5c0>)
 8001358:	6013      	str	r3, [r2, #0]
	  static uint32_t timestamp =0;
	  if(timestamp < HAL_GetTick())
 800135a:	f001 fb5b 	bl	8002a14 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	4b8c      	ldr	r3, [pc, #560]	; (8001594 <main+0x5c4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d94f      	bls.n	8001408 <main+0x438>
	  {
	  timestamp = HAL_GetTick()+1;
 8001368:	f001 fb54 	bl	8002a14 <HAL_GetTick>
 800136c:	4603      	mov	r3, r0
 800136e:	3301      	adds	r3, #1
 8001370:	4a88      	ldr	r2, [pc, #544]	; (8001594 <main+0x5c4>)
 8001372:	6013      	str	r3, [r2, #0]
	  Vfeedback2 = arm_pid_f32(&PID2, setposition2 - position2);
 8001374:	4b86      	ldr	r3, [pc, #536]	; (8001590 <main+0x5c0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	ee07 3a90 	vmov	s15, r3
 800137c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001380:	4b85      	ldr	r3, [pc, #532]	; (8001598 <main+0x5c8>)
 8001382:	edd3 7a00 	vldr	s15, [r3]
 8001386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138a:	4b84      	ldr	r3, [pc, #528]	; (800159c <main+0x5cc>)
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	edc7 7a01 	vstr	s15, [r7, #4]
    out = (S->A0 * in) +
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	ed93 7a00 	vldr	s14, [r3]
 8001398:	edd7 7a01 	vldr	s15, [r7, #4]
 800139c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80013ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80013b0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	edd3 6a02 	vldr	s13, [r3, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80013c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80013ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d2:	edc7 7a00 	vstr	s15, [r7]
    S->state[1] = S->state[0];
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	615a      	str	r2, [r3, #20]
    return (out);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	4a6c      	ldr	r2, [pc, #432]	; (80015a0 <main+0x5d0>)
 80013ee:	6013      	str	r3, [r2, #0]
	  position2 = PlantSimulation2(Vfeedback2);
 80013f0:	4b6b      	ldr	r3, [pc, #428]	; (80015a0 <main+0x5d0>)
 80013f2:	edd3 7a00 	vldr	s15, [r3]
 80013f6:	eeb0 0a67 	vmov.f32	s0, s15
 80013fa:	f7ff fd79 	bl	8000ef0 <PlantSimulation2>
 80013fe:	eef0 7a40 	vmov.f32	s15, s0
 8001402:	4b65      	ldr	r3, [pc, #404]	; (8001598 <main+0x5c8>)
 8001404:	edc3 7a00 	vstr	s15, [r3]
	  }
	  //Motordrive
	  if ((zeta2>position2*0.98 && zeta2<position2*1.02))
 8001408:	4b5f      	ldr	r3, [pc, #380]	; (8001588 <main+0x5b8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f855 	bl	80004bc <__aeabi_i2d>
 8001412:	4680      	mov	r8, r0
 8001414:	4689      	mov	r9, r1
 8001416:	4b60      	ldr	r3, [pc, #384]	; (8001598 <main+0x5c8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f860 	bl	80004e0 <__aeabi_f2d>
 8001420:	a34d      	add	r3, pc, #308	; (adr r3, 8001558 <main+0x588>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7ff f8b3 	bl	8000590 <__aeabi_dmul>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4640      	mov	r0, r8
 8001430:	4649      	mov	r1, r9
 8001432:	f7ff fb3d 	bl	8000ab0 <__aeabi_dcmpgt>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d021      	beq.n	8001480 <main+0x4b0>
 800143c:	4b52      	ldr	r3, [pc, #328]	; (8001588 <main+0x5b8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f83b 	bl	80004bc <__aeabi_i2d>
 8001446:	4680      	mov	r8, r0
 8001448:	4689      	mov	r9, r1
 800144a:	4b53      	ldr	r3, [pc, #332]	; (8001598 <main+0x5c8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f846 	bl	80004e0 <__aeabi_f2d>
 8001454:	a342      	add	r3, pc, #264	; (adr r3, 8001560 <main+0x590>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff f899 	bl	8000590 <__aeabi_dmul>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4640      	mov	r0, r8
 8001464:	4649      	mov	r1, r9
 8001466:	f7ff fb05 	bl	8000a74 <__aeabi_dcmplt>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d007      	beq.n	8001480 <main+0x4b0>
	  {
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001470:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <main+0x5d4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2200      	movs	r2, #0
 8001476:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001478:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <main+0x5d4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2200      	movs	r2, #0
 800147e:	639a      	str	r2, [r3, #56]	; 0x38
	  }
	  if(zeta2<setposition2){
 8001480:	4b41      	ldr	r3, [pc, #260]	; (8001588 <main+0x5b8>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b42      	ldr	r3, [pc, #264]	; (8001590 <main+0x5c0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	da08      	bge.n	800149e <main+0x4ce>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 10000);
 800148c:	4b45      	ldr	r3, [pc, #276]	; (80015a4 <main+0x5d4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f242 7210 	movw	r2, #10000	; 0x2710
 8001494:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001496:	4b43      	ldr	r3, [pc, #268]	; (80015a4 <main+0x5d4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2200      	movs	r2, #0
 800149c:	639a      	str	r2, [r3, #56]	; 0x38
	  }if(zeta2>setposition2){
 800149e:	4b3a      	ldr	r3, [pc, #232]	; (8001588 <main+0x5b8>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4b3b      	ldr	r3, [pc, #236]	; (8001590 <main+0x5c0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	dd08      	ble.n	80014bc <main+0x4ec>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80014aa:	4b3e      	ldr	r3, [pc, #248]	; (80015a4 <main+0x5d4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2200      	movs	r2, #0
 80014b0:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 10000);
 80014b2:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <main+0x5d4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80014ba:	639a      	str	r2, [r3, #56]	; 0x38
	  }
	  }

	  //ข้อสาม
	  if (mode == 3){
 80014bc:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <main+0x5a8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	f47f adee 	bne.w	80010a2 <main+0xd2>

	  adcavg=Avg_pot3;
 80014c6:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <main+0x5d8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	4b37      	ldr	r3, [pc, #220]	; (80015ac <main+0x5dc>)
 80014ce:	801a      	strh	r2, [r3, #0]
	  potentavg=Avg_pot4;
 80014d0:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <main+0x5e0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <main+0x5e4>)
 80014d8:	801a      	strh	r2, [r3, #0]
	  degree=(potentavg*360.0/4095.0);
 80014da:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <main+0x5e4>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe ffec 	bl	80004bc <__aeabi_i2d>
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	4b26      	ldr	r3, [pc, #152]	; (8001584 <main+0x5b4>)
 80014ea:	f7ff f851 	bl	8000590 <__aeabi_dmul>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	a314      	add	r3, pc, #80	; (adr r3, 8001548 <main+0x578>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7ff f972 	bl	80007e4 <__aeabi_ddiv>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f7ff fb04 	bl	8000b14 <__aeabi_d2uiz>
 800150c:	4603      	mov	r3, r0
 800150e:	b29a      	uxth	r2, r3
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <main+0x5e8>)
 8001512:	801a      	strh	r2, [r3, #0]
	  sum=0;
 8001514:	4b29      	ldr	r3, [pc, #164]	; (80015bc <main+0x5ec>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
	  sump=0;
 800151a:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <main+0x5f0>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
		  	 static uint64_t timestamp =0;
		  	 	  int64_t currentTime = micros();
 8001520:	f000 fe62 	bl	80021e8 <micros>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	e9c7 2306 	strd	r2, r3, [r7, #24]

		  	 	  if(currentTime > timestamp)
 800152c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001530:	4924      	ldr	r1, [pc, #144]	; (80015c4 <main+0x5f4>)
 8001532:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001536:	4290      	cmp	r0, r2
 8001538:	eb71 0303 	sbcs.w	r3, r1, r3
 800153c:	d270      	bcs.n	8001620 <main+0x650>
 800153e:	e043      	b.n	80015c8 <main+0x5f8>
 8001540:	00000000 	.word	0x00000000
 8001544:	40a7fe00 	.word	0x40a7fe00
 8001548:	00000000 	.word	0x00000000
 800154c:	40affe00 	.word	0x40affe00
 8001550:	00000000 	.word	0x00000000
 8001554:	40767000 	.word	0x40767000
 8001558:	f5c28f5c 	.word	0xf5c28f5c
 800155c:	3fef5c28 	.word	0x3fef5c28
 8001560:	851eb852 	.word	0x851eb852
 8001564:	3ff051eb 	.word	0x3ff051eb
 8001568:	20000468 	.word	0x20000468
 800156c:	2000046c 	.word	0x2000046c
 8001570:	2000024c 	.word	0x2000024c
 8001574:	20000470 	.word	0x20000470
 8001578:	20000000 	.word	0x20000000
 800157c:	200002e4 	.word	0x200002e4
 8001580:	20000474 	.word	0x20000474
 8001584:	40768000 	.word	0x40768000
 8001588:	20000478 	.word	0x20000478
 800158c:	2000042c 	.word	0x2000042c
 8001590:	200004a4 	.word	0x200004a4
 8001594:	200004dc 	.word	0x200004dc
 8001598:	200004a0 	.word	0x200004a0
 800159c:	2000047c 	.word	0x2000047c
 80015a0:	200004a8 	.word	0x200004a8
 80015a4:	20000298 	.word	0x20000298
 80015a8:	20000430 	.word	0x20000430
 80015ac:	200004c2 	.word	0x200004c2
 80015b0:	20000434 	.word	0x20000434
 80015b4:	200004c4 	.word	0x200004c4
 80015b8:	200004ac 	.word	0x200004ac
 80015bc:	200004c8 	.word	0x200004c8
 80015c0:	200004cc 	.word	0x200004cc
 80015c4:	200004e0 	.word	0x200004e0
		  	 	  {
		  	 		  timestamp = currentTime + 5000;//us
 80015c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015cc:	f241 3188 	movw	r1, #5000	; 0x1388
 80015d0:	1854      	adds	r4, r2, r1
 80015d2:	f143 0500 	adc.w	r5, r3, #0
 80015d6:	4622      	mov	r2, r4
 80015d8:	462b      	mov	r3, r5
 80015da:	492b      	ldr	r1, [pc, #172]	; (8001688 <main+0x6b8>)
 80015dc:	e9c1 2300 	strd	r2, r3, [r1]
		  	 		  convert[0]=0x69;
 80015e0:	4b2a      	ldr	r3, [pc, #168]	; (800168c <main+0x6bc>)
 80015e2:	2269      	movs	r2, #105	; 0x69
 80015e4:	701a      	strb	r2, [r3, #0]
		  	 		  convert[1]=(uint8_t)(adcavg-potentavg & 0xFF);
 80015e6:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <main+0x6c0>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b29      	ldr	r3, [pc, #164]	; (8001694 <main+0x6c4>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	b25a      	sxtb	r2, r3
 80015f8:	4b24      	ldr	r3, [pc, #144]	; (800168c <main+0x6bc>)
 80015fa:	705a      	strb	r2, [r3, #1]
		  	 		 convert[2]=(uint8_t)((adcavg-potentavg>>8) & 0xFF);
 80015fc:	4b24      	ldr	r3, [pc, #144]	; (8001690 <main+0x6c0>)
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b24      	ldr	r3, [pc, #144]	; (8001694 <main+0x6c4>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	121b      	asrs	r3, r3, #8
 800160a:	b25a      	sxtb	r2, r3
 800160c:	4b1f      	ldr	r3, [pc, #124]	; (800168c <main+0x6bc>)
 800160e:	709a      	strb	r2, [r3, #2]
		  	 		 convert[3]=0x0A;
 8001610:	4b1e      	ldr	r3, [pc, #120]	; (800168c <main+0x6bc>)
 8001612:	220a      	movs	r2, #10
 8001614:	70da      	strb	r2, [r3, #3]
		  	  HAL_UART_Transmit_IT(&hlpuart1,convert,sizeof(convert));
 8001616:	2204      	movs	r2, #4
 8001618:	491c      	ldr	r1, [pc, #112]	; (800168c <main+0x6bc>)
 800161a:	481f      	ldr	r0, [pc, #124]	; (8001698 <main+0x6c8>)
 800161c:	f006 fbb4 	bl	8007d88 <HAL_UART_Transmit_IT>
		  	 	  }
		  	 	  UARTDMAconfig();
 8001620:	f000 fdfc 	bl	800221c <UARTDMAconfig>
		  	 	  if(pwm>0){
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <main+0x6cc>)
 8001626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162a:	2b00      	cmp	r3, #0
 800162c:	dd09      	ble.n	8001642 <main+0x672>
		  	 		 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <main+0x6d0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2200      	movs	r2, #0
 8001634:	635a      	str	r2, [r3, #52]	; 0x34
		  	 		 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,tune);
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <main+0x6d4>)
 8001638:	881a      	ldrh	r2, [r3, #0]
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <main+0x6d0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	639a      	str	r2, [r3, #56]	; 0x38
 8001640:	e00d      	b.n	800165e <main+0x68e>

		  	 	  }
		  	 	  else if(pwm<0){
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <main+0x6cc>)
 8001644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001648:	2b00      	cmp	r3, #0
 800164a:	da08      	bge.n	800165e <main+0x68e>
		  	 	 	 		 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,tune);
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <main+0x6d4>)
 800164e:	881a      	ldrh	r2, [r3, #0]
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <main+0x6d0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	635a      	str	r2, [r3, #52]	; 0x34
		  	 	 	 		 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,0);
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <main+0x6d0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2200      	movs	r2, #0
 800165c:	639a      	str	r2, [r3, #56]	; 0x38
		  	 	 	 	  }
	  static uint32_t timeStamp =0;
	  if(HAL_GetTick()>timeStamp){
 800165e:	f001 f9d9 	bl	8002a14 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <main+0x6d8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	f67f ad1a 	bls.w	80010a2 <main+0xd2>
	  	timeStamp = HAL_GetTick()+500;
 800166e:	f001 f9d1 	bl	8002a14 <HAL_GetTick>
 8001672:	4603      	mov	r3, r0
 8001674:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001678:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <main+0x6d8>)
 800167a:	6013      	str	r3, [r2, #0]
	  	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800167c:	2120      	movs	r1, #32
 800167e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001682:	f003 fc61 	bl	8004f48 <HAL_GPIO_TogglePin>
  {
 8001686:	e50c      	b.n	80010a2 <main+0xd2>
 8001688:	200004e0 	.word	0x200004e0
 800168c:	200004b8 	.word	0x200004b8
 8001690:	200004c2 	.word	0x200004c2
 8001694:	200004c4 	.word	0x200004c4
 8001698:	200000f8 	.word	0x200000f8
 800169c:	200004d0 	.word	0x200004d0
 80016a0:	20000330 	.word	0x20000330
 80016a4:	200004d2 	.word	0x200004d2
 80016a8:	200004e8 	.word	0x200004e8

080016ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b094      	sub	sp, #80	; 0x50
 80016b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b2:	f107 0318 	add.w	r3, r7, #24
 80016b6:	2238      	movs	r2, #56	; 0x38
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f007 ff92 	bl	80095e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f003 fc78 	bl	8004fc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d4:	2302      	movs	r3, #2
 80016d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016de:	2340      	movs	r3, #64	; 0x40
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e2:	2302      	movs	r3, #2
 80016e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016e6:	2302      	movs	r3, #2
 80016e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80016ea:	2304      	movs	r3, #4
 80016ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80016ee:	2355      	movs	r3, #85	; 0x55
 80016f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f2:	2302      	movs	r3, #2
 80016f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016f6:	2302      	movs	r3, #2
 80016f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016fa:	2302      	movs	r3, #2
 80016fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fe:	f107 0318 	add.w	r3, r7, #24
 8001702:	4618      	mov	r0, r3
 8001704:	f003 fd12 	bl	800512c <HAL_RCC_OscConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800170e:	f000 fdb9 	bl	8002284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001712:	230f      	movs	r3, #15
 8001714:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001716:	2303      	movs	r3, #3
 8001718:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2104      	movs	r1, #4
 800172a:	4618      	mov	r0, r3
 800172c:	f004 f810 	bl	8005750 <HAL_RCC_ClockConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001736:	f000 fda5 	bl	8002284 <Error_Handler>
  }
}
 800173a:	bf00      	nop
 800173c:	3750      	adds	r7, #80	; 0x50
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08c      	sub	sp, #48	; 0x30
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800174a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2220      	movs	r2, #32
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f007 ff41 	bl	80095e4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001762:	4b47      	ldr	r3, [pc, #284]	; (8001880 <MX_ADC1_Init+0x13c>)
 8001764:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800176a:	4b45      	ldr	r3, [pc, #276]	; (8001880 <MX_ADC1_Init+0x13c>)
 800176c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001770:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001772:	4b43      	ldr	r3, [pc, #268]	; (8001880 <MX_ADC1_Init+0x13c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001778:	4b41      	ldr	r3, [pc, #260]	; (8001880 <MX_ADC1_Init+0x13c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800177e:	4b40      	ldr	r3, [pc, #256]	; (8001880 <MX_ADC1_Init+0x13c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001784:	4b3e      	ldr	r3, [pc, #248]	; (8001880 <MX_ADC1_Init+0x13c>)
 8001786:	2201      	movs	r2, #1
 8001788:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800178a:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <MX_ADC1_Init+0x13c>)
 800178c:	2204      	movs	r2, #4
 800178e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001790:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <MX_ADC1_Init+0x13c>)
 8001792:	2200      	movs	r2, #0
 8001794:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001796:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <MX_ADC1_Init+0x13c>)
 8001798:	2201      	movs	r2, #1
 800179a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 800179c:	4b38      	ldr	r3, [pc, #224]	; (8001880 <MX_ADC1_Init+0x13c>)
 800179e:	2204      	movs	r2, #4
 80017a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017a2:	4b37      	ldr	r3, [pc, #220]	; (8001880 <MX_ADC1_Init+0x13c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017aa:	4b35      	ldr	r3, [pc, #212]	; (8001880 <MX_ADC1_Init+0x13c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017b0:	4b33      	ldr	r3, [pc, #204]	; (8001880 <MX_ADC1_Init+0x13c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80017b6:	4b32      	ldr	r3, [pc, #200]	; (8001880 <MX_ADC1_Init+0x13c>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017be:	4b30      	ldr	r3, [pc, #192]	; (8001880 <MX_ADC1_Init+0x13c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80017c4:	4b2e      	ldr	r3, [pc, #184]	; (8001880 <MX_ADC1_Init+0x13c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017cc:	482c      	ldr	r0, [pc, #176]	; (8001880 <MX_ADC1_Init+0x13c>)
 80017ce:	f001 fb93 	bl	8002ef8 <HAL_ADC_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80017d8:	f000 fd54 	bl	8002284 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e4:	4619      	mov	r1, r3
 80017e6:	4826      	ldr	r0, [pc, #152]	; (8001880 <MX_ADC1_Init+0x13c>)
 80017e8:	f002 fcb2 	bl	8004150 <HAL_ADCEx_MultiModeConfigChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80017f2:	f000 fd47 	bl	8002284 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017f6:	4b23      	ldr	r3, [pc, #140]	; (8001884 <MX_ADC1_Init+0x140>)
 80017f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017fa:	2306      	movs	r3, #6
 80017fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80017fe:	2307      	movs	r3, #7
 8001800:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001802:	237f      	movs	r3, #127	; 0x7f
 8001804:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001806:	2304      	movs	r3, #4
 8001808:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	4619      	mov	r1, r3
 8001812:	481b      	ldr	r0, [pc, #108]	; (8001880 <MX_ADC1_Init+0x13c>)
 8001814:	f001 fe1e 	bl	8003454 <HAL_ADC_ConfigChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800181e:	f000 fd31 	bl	8002284 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <MX_ADC1_Init+0x144>)
 8001824:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001826:	230c      	movs	r3, #12
 8001828:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	4619      	mov	r1, r3
 800182e:	4814      	ldr	r0, [pc, #80]	; (8001880 <MX_ADC1_Init+0x13c>)
 8001830:	f001 fe10 	bl	8003454 <HAL_ADC_ConfigChannel>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800183a:	f000 fd23 	bl	8002284 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <MX_ADC1_Init+0x148>)
 8001840:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001842:	2312      	movs	r3, #18
 8001844:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	4619      	mov	r1, r3
 800184a:	480d      	ldr	r0, [pc, #52]	; (8001880 <MX_ADC1_Init+0x13c>)
 800184c:	f001 fe02 	bl	8003454 <HAL_ADC_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001856:	f000 fd15 	bl	8002284 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <MX_ADC1_Init+0x14c>)
 800185c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800185e:	2318      	movs	r3, #24
 8001860:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	4619      	mov	r1, r3
 8001866:	4806      	ldr	r0, [pc, #24]	; (8001880 <MX_ADC1_Init+0x13c>)
 8001868:	f001 fdf4 	bl	8003454 <HAL_ADC_ConfigChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001872:	f000 fd07 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	3730      	adds	r7, #48	; 0x30
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	2000002c 	.word	0x2000002c
 8001884:	14f00020 	.word	0x14f00020
 8001888:	19200040 	.word	0x19200040
 800188c:	1d500080 	.word	0x1d500080
 8001890:	21800100 	.word	0x21800100

08001894 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001898:	4b21      	ldr	r3, [pc, #132]	; (8001920 <MX_LPUART1_UART_Init+0x8c>)
 800189a:	4a22      	ldr	r2, [pc, #136]	; (8001924 <MX_LPUART1_UART_Init+0x90>)
 800189c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <MX_LPUART1_UART_Init+0x8c>)
 80018a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <MX_LPUART1_UART_Init+0x8c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <MX_LPUART1_UART_Init+0x8c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <MX_LPUART1_UART_Init+0x8c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <MX_LPUART1_UART_Init+0x8c>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b18      	ldr	r3, [pc, #96]	; (8001920 <MX_LPUART1_UART_Init+0x8c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018c4:	4b16      	ldr	r3, [pc, #88]	; (8001920 <MX_LPUART1_UART_Init+0x8c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <MX_LPUART1_UART_Init+0x8c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <MX_LPUART1_UART_Init+0x8c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80018d6:	4812      	ldr	r0, [pc, #72]	; (8001920 <MX_LPUART1_UART_Init+0x8c>)
 80018d8:	f006 f93e 	bl	8007b58 <HAL_UART_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80018e2:	f000 fccf 	bl	8002284 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018e6:	2100      	movs	r1, #0
 80018e8:	480d      	ldr	r0, [pc, #52]	; (8001920 <MX_LPUART1_UART_Init+0x8c>)
 80018ea:	f007 fd7a 	bl	80093e2 <HAL_UARTEx_SetTxFifoThreshold>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80018f4:	f000 fcc6 	bl	8002284 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f8:	2100      	movs	r1, #0
 80018fa:	4809      	ldr	r0, [pc, #36]	; (8001920 <MX_LPUART1_UART_Init+0x8c>)
 80018fc:	f007 fdaf 	bl	800945e <HAL_UARTEx_SetRxFifoThreshold>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001906:	f000 fcbd 	bl	8002284 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_LPUART1_UART_Init+0x8c>)
 800190c:	f007 fd30 	bl	8009370 <HAL_UARTEx_DisableFifoMode>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001916:	f000 fcb5 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200000f8 	.word	0x200000f8
 8001924:	40008000 	.word	0x40008000

08001928 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b09c      	sub	sp, #112	; 0x70
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001948:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
 8001958:	615a      	str	r2, [r3, #20]
 800195a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	2234      	movs	r2, #52	; 0x34
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f007 fe3e 	bl	80095e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001968:	4b4b      	ldr	r3, [pc, #300]	; (8001a98 <MX_TIM1_Init+0x170>)
 800196a:	4a4c      	ldr	r2, [pc, #304]	; (8001a9c <MX_TIM1_Init+0x174>)
 800196c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 800196e:	4b4a      	ldr	r3, [pc, #296]	; (8001a98 <MX_TIM1_Init+0x170>)
 8001970:	22a9      	movs	r2, #169	; 0xa9
 8001972:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001974:	4b48      	ldr	r3, [pc, #288]	; (8001a98 <MX_TIM1_Init+0x170>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800197a:	4b47      	ldr	r3, [pc, #284]	; (8001a98 <MX_TIM1_Init+0x170>)
 800197c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001980:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001982:	4b45      	ldr	r3, [pc, #276]	; (8001a98 <MX_TIM1_Init+0x170>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001988:	4b43      	ldr	r3, [pc, #268]	; (8001a98 <MX_TIM1_Init+0x170>)
 800198a:	2200      	movs	r2, #0
 800198c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198e:	4b42      	ldr	r3, [pc, #264]	; (8001a98 <MX_TIM1_Init+0x170>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001994:	4840      	ldr	r0, [pc, #256]	; (8001a98 <MX_TIM1_Init+0x170>)
 8001996:	f004 fb45 	bl	8006024 <HAL_TIM_Base_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80019a0:	f000 fc70 	bl	8002284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019ae:	4619      	mov	r1, r3
 80019b0:	4839      	ldr	r0, [pc, #228]	; (8001a98 <MX_TIM1_Init+0x170>)
 80019b2:	f005 f983 	bl	8006cbc <HAL_TIM_ConfigClockSource>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80019bc:	f000 fc62 	bl	8002284 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019c0:	4835      	ldr	r0, [pc, #212]	; (8001a98 <MX_TIM1_Init+0x170>)
 80019c2:	f004 fc6f 	bl	80062a4 <HAL_TIM_PWM_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80019cc:	f000 fc5a 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d0:	2300      	movs	r3, #0
 80019d2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019e0:	4619      	mov	r1, r3
 80019e2:	482d      	ldr	r0, [pc, #180]	; (8001a98 <MX_TIM1_Init+0x170>)
 80019e4:	f005 ff48 	bl	8007878 <HAL_TIMEx_MasterConfigSynchronization>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80019ee:	f000 fc49 	bl	8002284 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f2:	2360      	movs	r3, #96	; 0x60
 80019f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019fa:	2300      	movs	r3, #0
 80019fc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019fe:	2300      	movs	r3, #0
 8001a00:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a12:	2200      	movs	r2, #0
 8001a14:	4619      	mov	r1, r3
 8001a16:	4820      	ldr	r0, [pc, #128]	; (8001a98 <MX_TIM1_Init+0x170>)
 8001a18:	f005 f83c 	bl	8006a94 <HAL_TIM_PWM_ConfigChannel>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001a22:	f000 fc2f 	bl	8002284 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	481a      	ldr	r0, [pc, #104]	; (8001a98 <MX_TIM1_Init+0x170>)
 8001a30:	f005 f830 	bl	8006a94 <HAL_TIM_PWM_ConfigChannel>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001a3a:	f000 fc23 	bl	8002284 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4807      	ldr	r0, [pc, #28]	; (8001a98 <MX_TIM1_Init+0x170>)
 8001a7c:	f005 ff92 	bl	80079a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8001a86:	f000 fbfd 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a8a:	4803      	ldr	r0, [pc, #12]	; (8001a98 <MX_TIM1_Init+0x170>)
 8001a8c:	f000 fe20 	bl	80026d0 <HAL_TIM_MspPostInit>

}
 8001a90:	bf00      	nop
 8001a92:	3770      	adds	r7, #112	; 0x70
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2000024c 	.word	0x2000024c
 8001a9c:	40012c00 	.word	0x40012c00

08001aa0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08e      	sub	sp, #56	; 0x38
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab4:	f107 031c 	add.w	r3, r7, #28
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]
 8001ace:	615a      	str	r2, [r3, #20]
 8001ad0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ad2:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <MX_TIM2_Init+0x100>)
 8001ad4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ad8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ada:	4b31      	ldr	r3, [pc, #196]	; (8001ba0 <MX_TIM2_Init+0x100>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae0:	4b2f      	ldr	r3, [pc, #188]	; (8001ba0 <MX_TIM2_Init+0x100>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8001ae6:	4b2e      	ldr	r3, [pc, #184]	; (8001ba0 <MX_TIM2_Init+0x100>)
 8001ae8:	4a2e      	ldr	r2, [pc, #184]	; (8001ba4 <MX_TIM2_Init+0x104>)
 8001aea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aec:	4b2c      	ldr	r3, [pc, #176]	; (8001ba0 <MX_TIM2_Init+0x100>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af2:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <MX_TIM2_Init+0x100>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001af8:	4829      	ldr	r0, [pc, #164]	; (8001ba0 <MX_TIM2_Init+0x100>)
 8001afa:	f004 fa93 	bl	8006024 <HAL_TIM_Base_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001b04:	f000 fbbe 	bl	8002284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b12:	4619      	mov	r1, r3
 8001b14:	4822      	ldr	r0, [pc, #136]	; (8001ba0 <MX_TIM2_Init+0x100>)
 8001b16:	f005 f8d1 	bl	8006cbc <HAL_TIM_ConfigClockSource>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001b20:	f000 fbb0 	bl	8002284 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b24:	481e      	ldr	r0, [pc, #120]	; (8001ba0 <MX_TIM2_Init+0x100>)
 8001b26:	f004 fbbd 	bl	80062a4 <HAL_TIM_PWM_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001b30:	f000 fba8 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	4619      	mov	r1, r3
 8001b42:	4817      	ldr	r0, [pc, #92]	; (8001ba0 <MX_TIM2_Init+0x100>)
 8001b44:	f005 fe98 	bl	8007878 <HAL_TIMEx_MasterConfigSynchronization>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001b4e:	f000 fb99 	bl	8002284 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b52:	2360      	movs	r3, #96	; 0x60
 8001b54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50000;
 8001b56:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001b5a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b64:	463b      	mov	r3, r7
 8001b66:	2200      	movs	r2, #0
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <MX_TIM2_Init+0x100>)
 8001b6c:	f004 ff92 	bl	8006a94 <HAL_TIM_PWM_ConfigChannel>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001b76:	f000 fb85 	bl	8002284 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4807      	ldr	r0, [pc, #28]	; (8001ba0 <MX_TIM2_Init+0x100>)
 8001b82:	f004 ff87 	bl	8006a94 <HAL_TIM_PWM_ConfigChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001b8c:	f000 fb7a 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b90:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <MX_TIM2_Init+0x100>)
 8001b92:	f000 fd9d 	bl	80026d0 <HAL_TIM_MspPostInit>

}
 8001b96:	bf00      	nop
 8001b98:	3738      	adds	r7, #56	; 0x38
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000298 	.word	0x20000298
 8001ba4:	0001869f 	.word	0x0001869f

08001ba8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	; 0x30
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bae:	f107 030c 	add.w	r3, r7, #12
 8001bb2:	2224      	movs	r2, #36	; 0x24
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f007 fd14 	bl	80095e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bc6:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <MX_TIM3_Init+0xa4>)
 8001bc8:	4a21      	ldr	r2, [pc, #132]	; (8001c50 <MX_TIM3_Init+0xa8>)
 8001bca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bcc:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <MX_TIM3_Init+0xa4>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <MX_TIM3_Init+0xa4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <MX_TIM3_Init+0xa4>)
 8001bda:	f640 32ff 	movw	r2, #3071	; 0xbff
 8001bde:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be0:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <MX_TIM3_Init+0xa4>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be6:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <MX_TIM3_Init+0xa4>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bec:	2303      	movs	r3, #3
 8001bee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c00:	2300      	movs	r3, #0
 8001c02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c04:	2301      	movs	r3, #1
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c10:	f107 030c 	add.w	r3, r7, #12
 8001c14:	4619      	mov	r1, r3
 8001c16:	480d      	ldr	r0, [pc, #52]	; (8001c4c <MX_TIM3_Init+0xa4>)
 8001c18:	f004 fcb8 	bl	800658c <HAL_TIM_Encoder_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c22:	f000 fb2f 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c2e:	463b      	mov	r3, r7
 8001c30:	4619      	mov	r1, r3
 8001c32:	4806      	ldr	r0, [pc, #24]	; (8001c4c <MX_TIM3_Init+0xa4>)
 8001c34:	f005 fe20 	bl	8007878 <HAL_TIMEx_MasterConfigSynchronization>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c3e:	f000 fb21 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c42:	bf00      	nop
 8001c44:	3730      	adds	r7, #48	; 0x30
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200002e4 	.word	0x200002e4
 8001c50:	40000400 	.word	0x40000400

08001c54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08e      	sub	sp, #56	; 0x38
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c68:	f107 031c 	add.w	r3, r7, #28
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c74:	463b      	mov	r3, r7
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
 8001c80:	611a      	str	r2, [r3, #16]
 8001c82:	615a      	str	r2, [r3, #20]
 8001c84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c86:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <MX_TIM4_Init+0x100>)
 8001c88:	4a33      	ldr	r2, [pc, #204]	; (8001d58 <MX_TIM4_Init+0x104>)
 8001c8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c8c:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <MX_TIM4_Init+0x100>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c92:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <MX_TIM4_Init+0x100>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65351;
 8001c98:	4b2e      	ldr	r3, [pc, #184]	; (8001d54 <MX_TIM4_Init+0x100>)
 8001c9a:	f64f 7247 	movw	r2, #65351	; 0xff47
 8001c9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca0:	4b2c      	ldr	r3, [pc, #176]	; (8001d54 <MX_TIM4_Init+0x100>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca6:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <MX_TIM4_Init+0x100>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cac:	4829      	ldr	r0, [pc, #164]	; (8001d54 <MX_TIM4_Init+0x100>)
 8001cae:	f004 f9b9 	bl	8006024 <HAL_TIM_Base_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001cb8:	f000 fae4 	bl	8002284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4822      	ldr	r0, [pc, #136]	; (8001d54 <MX_TIM4_Init+0x100>)
 8001cca:	f004 fff7 	bl	8006cbc <HAL_TIM_ConfigClockSource>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001cd4:	f000 fad6 	bl	8002284 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cd8:	481e      	ldr	r0, [pc, #120]	; (8001d54 <MX_TIM4_Init+0x100>)
 8001cda:	f004 fae3 	bl	80062a4 <HAL_TIM_PWM_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001ce4:	f000 face 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4817      	ldr	r0, [pc, #92]	; (8001d54 <MX_TIM4_Init+0x100>)
 8001cf8:	f005 fdbe 	bl	8007878 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001d02:	f000 fabf 	bl	8002284 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d06:	2360      	movs	r3, #96	; 0x60
 8001d08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8001d0a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d18:	463b      	mov	r3, r7
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	480d      	ldr	r0, [pc, #52]	; (8001d54 <MX_TIM4_Init+0x100>)
 8001d20:	f004 feb8 	bl	8006a94 <HAL_TIM_PWM_ConfigChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8001d2a:	f000 faab 	bl	8002284 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d2e:	463b      	mov	r3, r7
 8001d30:	2204      	movs	r2, #4
 8001d32:	4619      	mov	r1, r3
 8001d34:	4807      	ldr	r0, [pc, #28]	; (8001d54 <MX_TIM4_Init+0x100>)
 8001d36:	f004 fead 	bl	8006a94 <HAL_TIM_PWM_ConfigChannel>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8001d40:	f000 faa0 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d44:	4803      	ldr	r0, [pc, #12]	; (8001d54 <MX_TIM4_Init+0x100>)
 8001d46:	f000 fcc3 	bl	80026d0 <HAL_TIM_MspPostInit>

}
 8001d4a:	bf00      	nop
 8001d4c:	3738      	adds	r7, #56	; 0x38
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000330 	.word	0x20000330
 8001d58:	40000800 	.word	0x40000800

08001d5c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d62:	f107 0310 	add.w	r3, r7, #16
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <MX_TIM5_Init+0x94>)
 8001d7c:	4a1d      	ldr	r2, [pc, #116]	; (8001df4 <MX_TIM5_Init+0x98>)
 8001d7e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d80:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <MX_TIM5_Init+0x94>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <MX_TIM5_Init+0x94>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8001d8c:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <MX_TIM5_Init+0x94>)
 8001d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d92:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <MX_TIM5_Init+0x94>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <MX_TIM5_Init+0x94>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001da0:	4813      	ldr	r0, [pc, #76]	; (8001df0 <MX_TIM5_Init+0x94>)
 8001da2:	f004 f93f 	bl	8006024 <HAL_TIM_Base_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001dac:	f000 fa6a 	bl	8002284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001db6:	f107 0310 	add.w	r3, r7, #16
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480c      	ldr	r0, [pc, #48]	; (8001df0 <MX_TIM5_Init+0x94>)
 8001dbe:	f004 ff7d 	bl	8006cbc <HAL_TIM_ConfigClockSource>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001dc8:	f000 fa5c 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4805      	ldr	r0, [pc, #20]	; (8001df0 <MX_TIM5_Init+0x94>)
 8001dda:	f005 fd4d 	bl	8007878 <HAL_TIMEx_MasterConfigSynchronization>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001de4:	f000 fa4e 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001de8:	bf00      	nop
 8001dea:	3720      	adds	r7, #32
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	2000037c 	.word	0x2000037c
 8001df4:	40000c00 	.word	0x40000c00

08001df8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <MX_DMA_Init+0x70>)
 8001e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e02:	4a19      	ldr	r2, [pc, #100]	; (8001e68 <MX_DMA_Init+0x70>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	6493      	str	r3, [r2, #72]	; 0x48
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <MX_DMA_Init+0x70>)
 8001e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e16:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <MX_DMA_Init+0x70>)
 8001e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1a:	4a13      	ldr	r2, [pc, #76]	; (8001e68 <MX_DMA_Init+0x70>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6493      	str	r3, [r2, #72]	; 0x48
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <MX_DMA_Init+0x70>)
 8001e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2100      	movs	r1, #0
 8001e32:	200b      	movs	r0, #11
 8001e34:	f002 fb6f 	bl	8004516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e38:	200b      	movs	r0, #11
 8001e3a:	f002 fb86 	bl	800454a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	200c      	movs	r0, #12
 8001e44:	f002 fb67 	bl	8004516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001e48:	200c      	movs	r0, #12
 8001e4a:	f002 fb7e 	bl	800454a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	200d      	movs	r0, #13
 8001e54:	f002 fb5f 	bl	8004516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001e58:	200d      	movs	r0, #13
 8001e5a:	f002 fb76 	bl	800454a <HAL_NVIC_EnableIRQ>

}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000

08001e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e82:	4b2f      	ldr	r3, [pc, #188]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	4a2e      	ldr	r2, [pc, #184]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e9a:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	4a28      	ldr	r2, [pc, #160]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001ea0:	f043 0320 	orr.w	r3, r3, #32
 8001ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb6:	4a22      	ldr	r2, [pc, #136]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	4a1c      	ldr	r2, [pc, #112]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2120      	movs	r1, #32
 8001ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eea:	f003 f815 	bl	8004f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001eee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ef4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	480f      	ldr	r0, [pc, #60]	; (8001f44 <MX_GPIO_Init+0xd8>)
 8001f06:	f002 fe6d 	bl	8004be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f0a:	2320      	movs	r3, #32
 8001f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f24:	f002 fe5e 	bl	8004be4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2028      	movs	r0, #40	; 0x28
 8001f2e:	f002 faf2 	bl	8004516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f32:	2028      	movs	r0, #40	; 0x28
 8001f34:	f002 fb09 	bl	800454a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f38:	bf00      	nop
 8001f3a:	3728      	adds	r7, #40	; 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	48000800 	.word	0x48000800

08001f48 <question1_lab2>:

/* USER CODE BEGIN 4 */
//ข้อหนึ่ง
question1_lab2()
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
	position_poten =(Avg_pot1 * 360.0)/4095.0;
 8001f4c:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <question1_lab2+0x80>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe fab3 	bl	80004bc <__aeabi_i2d>
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <question1_lab2+0x84>)
 8001f5c:	f7fe fb18 	bl	8000590 <__aeabi_dmul>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	a315      	add	r3, pc, #84	; (adr r3, 8001fc0 <question1_lab2+0x78>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	f7fe fc39 	bl	80007e4 <__aeabi_ddiv>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7fe fdeb 	bl	8000b54 <__aeabi_d2f>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4a13      	ldr	r2, [pc, #76]	; (8001fd0 <question1_lab2+0x88>)
 8001f82:	6013      	str	r3, [r2, #0]
	position_motor =(Avg_pot4 * 360.0)/4095.0;
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <question1_lab2+0x8c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fa97 	bl	80004bc <__aeabi_i2d>
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <question1_lab2+0x84>)
 8001f94:	f7fe fafc 	bl	8000590 <__aeabi_dmul>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	a307      	add	r3, pc, #28	; (adr r3, 8001fc0 <question1_lab2+0x78>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	f7fe fc1d 	bl	80007e4 <__aeabi_ddiv>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f7fe fd87 	bl	8000ac4 <__aeabi_d2iz>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <question1_lab2+0x90>)
 8001fba:	6013      	str	r3, [r2, #0]
//	setposition = position_poten;
}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	40affe00 	.word	0x40affe00
 8001fc8:	20000428 	.word	0x20000428
 8001fcc:	40768000 	.word	0x40768000
 8001fd0:	2000043c 	.word	0x2000043c
 8001fd4:	20000434 	.word	0x20000434
 8001fd8:	20000438 	.word	0x20000438

08001fdc <swapmode>:
//ข้อสอง
void swapmode(){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET && mode == 1) {
 8001fe0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fe4:	481d      	ldr	r0, [pc, #116]	; (800205c <swapmode+0x80>)
 8001fe6:	f002 ff7f 	bl	8004ee8 <HAL_GPIO_ReadPin>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d10b      	bne.n	8002008 <swapmode+0x2c>
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <swapmode+0x84>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d107      	bne.n	8002008 <swapmode+0x2c>
			mode = 2;
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <swapmode+0x84>)
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	601a      	str	r2, [r3, #0]
			HAL_Delay(500);
 8001ffe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002002:	f000 fd13 	bl	8002a2c <HAL_Delay>
 8002006:	e027      	b.n	8002058 <swapmode+0x7c>
		}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET && mode == 2) {
 8002008:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800200c:	4813      	ldr	r0, [pc, #76]	; (800205c <swapmode+0x80>)
 800200e:	f002 ff6b 	bl	8004ee8 <HAL_GPIO_ReadPin>
 8002012:	4603      	mov	r3, r0
 8002014:	2b01      	cmp	r3, #1
 8002016:	d10b      	bne.n	8002030 <swapmode+0x54>
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <swapmode+0x84>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d107      	bne.n	8002030 <swapmode+0x54>
			mode = 3;
 8002020:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <swapmode+0x84>)
 8002022:	2203      	movs	r2, #3
 8002024:	601a      	str	r2, [r3, #0]
			HAL_Delay(500);
 8002026:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800202a:	f000 fcff 	bl	8002a2c <HAL_Delay>
 800202e:	e013      	b.n	8002058 <swapmode+0x7c>
		}

	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET && mode == 3) {
 8002030:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002034:	4809      	ldr	r0, [pc, #36]	; (800205c <swapmode+0x80>)
 8002036:	f002 ff57 	bl	8004ee8 <HAL_GPIO_ReadPin>
 800203a:	4603      	mov	r3, r0
 800203c:	2b01      	cmp	r3, #1
 800203e:	d10b      	bne.n	8002058 <swapmode+0x7c>
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <swapmode+0x84>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d107      	bne.n	8002058 <swapmode+0x7c>
			mode = 1;
 8002048:	4b05      	ldr	r3, [pc, #20]	; (8002060 <swapmode+0x84>)
 800204a:	2201      	movs	r2, #1
 800204c:	601a      	str	r2, [r3, #0]
			HAL_Delay(500);
 800204e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002052:	f000 fceb 	bl	8002a2c <HAL_Delay>
		}
}
 8002056:	e7ff      	b.n	8002058 <swapmode+0x7c>
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	48000800 	.word	0x48000800
 8002060:	20000000 	.word	0x20000000

08002064 <ADC_pot>:
void ADC_pot(){
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
	pot1=0;
 800206a:	4b48      	ldr	r3, [pc, #288]	; (800218c <ADC_pot+0x128>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
	pot2=0;
 8002070:	4b47      	ldr	r3, [pc, #284]	; (8002190 <ADC_pot+0x12c>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
	pot3=0;
 8002076:	4b47      	ldr	r3, [pc, #284]	; (8002194 <ADC_pot+0x130>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
	pot4=0;
 800207c:	4b46      	ldr	r3, [pc, #280]	; (8002198 <ADC_pot+0x134>)
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
	for(int i=0; i<40; i+=4){
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	e02d      	b.n	80020e4 <ADC_pot+0x80>
		pot1+=ADC_RawRead[i];
 8002088:	4a44      	ldr	r2, [pc, #272]	; (800219c <ADC_pot+0x138>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002090:	461a      	mov	r2, r3
 8002092:	4b3e      	ldr	r3, [pc, #248]	; (800218c <ADC_pot+0x128>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4413      	add	r3, r2
 8002098:	4a3c      	ldr	r2, [pc, #240]	; (800218c <ADC_pot+0x128>)
 800209a:	6013      	str	r3, [r2, #0]
		pot2+=ADC_RawRead[i+1];
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3301      	adds	r3, #1
 80020a0:	4a3e      	ldr	r2, [pc, #248]	; (800219c <ADC_pot+0x138>)
 80020a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020a6:	461a      	mov	r2, r3
 80020a8:	4b39      	ldr	r3, [pc, #228]	; (8002190 <ADC_pot+0x12c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4413      	add	r3, r2
 80020ae:	4a38      	ldr	r2, [pc, #224]	; (8002190 <ADC_pot+0x12c>)
 80020b0:	6013      	str	r3, [r2, #0]
		pot3+=ADC_RawRead[i+2];
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3302      	adds	r3, #2
 80020b6:	4a39      	ldr	r2, [pc, #228]	; (800219c <ADC_pot+0x138>)
 80020b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020bc:	461a      	mov	r2, r3
 80020be:	4b35      	ldr	r3, [pc, #212]	; (8002194 <ADC_pot+0x130>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	4a33      	ldr	r2, [pc, #204]	; (8002194 <ADC_pot+0x130>)
 80020c6:	6013      	str	r3, [r2, #0]
		pot4+=ADC_RawRead[i+3];
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3303      	adds	r3, #3
 80020cc:	4a33      	ldr	r2, [pc, #204]	; (800219c <ADC_pot+0x138>)
 80020ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020d2:	461a      	mov	r2, r3
 80020d4:	4b30      	ldr	r3, [pc, #192]	; (8002198 <ADC_pot+0x134>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4413      	add	r3, r2
 80020da:	4a2f      	ldr	r2, [pc, #188]	; (8002198 <ADC_pot+0x134>)
 80020dc:	6013      	str	r3, [r2, #0]
	for(int i=0; i<40; i+=4){
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3304      	adds	r3, #4
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b27      	cmp	r3, #39	; 0x27
 80020e8:	ddce      	ble.n	8002088 <ADC_pot+0x24>
		}
	Avg_pot1=pot1/10.0;
 80020ea:	4b28      	ldr	r3, [pc, #160]	; (800218c <ADC_pot+0x128>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe f9e4 	bl	80004bc <__aeabi_i2d>
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <ADC_pot+0x13c>)
 80020fa:	f7fe fb73 	bl	80007e4 <__aeabi_ddiv>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	f7fe fcdd 	bl	8000ac4 <__aeabi_d2iz>
 800210a:	4603      	mov	r3, r0
 800210c:	4a25      	ldr	r2, [pc, #148]	; (80021a4 <ADC_pot+0x140>)
 800210e:	6013      	str	r3, [r2, #0]
	Avg_pot2=pot2/10.0;
 8002110:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <ADC_pot+0x12c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe f9d1 	bl	80004bc <__aeabi_i2d>
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <ADC_pot+0x13c>)
 8002120:	f7fe fb60 	bl	80007e4 <__aeabi_ddiv>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	f7fe fcca 	bl	8000ac4 <__aeabi_d2iz>
 8002130:	4603      	mov	r3, r0
 8002132:	4a1d      	ldr	r2, [pc, #116]	; (80021a8 <ADC_pot+0x144>)
 8002134:	6013      	str	r3, [r2, #0]
	Avg_pot3=pot3/10.0;
 8002136:	4b17      	ldr	r3, [pc, #92]	; (8002194 <ADC_pot+0x130>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe f9be 	bl	80004bc <__aeabi_i2d>
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <ADC_pot+0x13c>)
 8002146:	f7fe fb4d 	bl	80007e4 <__aeabi_ddiv>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4610      	mov	r0, r2
 8002150:	4619      	mov	r1, r3
 8002152:	f7fe fcb7 	bl	8000ac4 <__aeabi_d2iz>
 8002156:	4603      	mov	r3, r0
 8002158:	4a14      	ldr	r2, [pc, #80]	; (80021ac <ADC_pot+0x148>)
 800215a:	6013      	str	r3, [r2, #0]
	Avg_pot4=pot4/10.0;
 800215c:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <ADC_pot+0x134>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe f9ab 	bl	80004bc <__aeabi_i2d>
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <ADC_pot+0x13c>)
 800216c:	f7fe fb3a 	bl	80007e4 <__aeabi_ddiv>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f7fe fca4 	bl	8000ac4 <__aeabi_d2iz>
 800217c:	4603      	mov	r3, r0
 800217e:	4a0c      	ldr	r2, [pc, #48]	; (80021b0 <ADC_pot+0x14c>)
 8002180:	6013      	str	r3, [r2, #0]
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000418 	.word	0x20000418
 8002190:	2000041c 	.word	0x2000041c
 8002194:	20000420 	.word	0x20000420
 8002198:	20000424 	.word	0x20000424
 800219c:	200003c8 	.word	0x200003c8
 80021a0:	40240000 	.word	0x40240000
 80021a4:	20000428 	.word	0x20000428
 80021a8:	2000042c 	.word	0x2000042c
 80021ac:	20000430 	.word	0x20000430
 80021b0:	20000434 	.word	0x20000434

080021b4 <HAL_TIM_PeriodElapsedCallback>:

//ข้อสาม
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b4b0      	push	{r4, r5, r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
if(htim == &htim5)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d108      	bne.n	80021d6 <HAL_TIM_PeriodElapsedCallback+0x22>
{
_micros += UINT32_MAX;
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80021c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ca:	1e54      	subs	r4, r2, #1
 80021cc:	f143 0500 	adc.w	r5, r3, #0
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80021d2:	e9c3 4500 	strd	r4, r5, [r3]
}
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bcb0      	pop	{r4, r5, r7}
 80021de:	4770      	bx	lr
 80021e0:	2000037c 	.word	0x2000037c
 80021e4:	200004b0 	.word	0x200004b0

080021e8 <micros>:
uint64_t micros()
{
 80021e8:	b4b0      	push	{r4, r5, r7}
 80021ea:	af00      	add	r7, sp, #0
return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <micros+0x2c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	2200      	movs	r2, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	4611      	mov	r1, r2
 80021f8:	4b07      	ldr	r3, [pc, #28]	; (8002218 <micros+0x30>)
 80021fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fe:	1884      	adds	r4, r0, r2
 8002200:	eb41 0503 	adc.w	r5, r1, r3
 8002204:	4622      	mov	r2, r4
 8002206:	462b      	mov	r3, r5
}
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	bcb0      	pop	{r4, r5, r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	2000037c 	.word	0x2000037c
 8002218:	200004b0 	.word	0x200004b0

0800221c <UARTDMAconfig>:
void UARTDMAconfig()
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&hlpuart1, rx, 4,5);
 8002220:	2305      	movs	r3, #5
 8002222:	2204      	movs	r2, #4
 8002224:	4912      	ldr	r1, [pc, #72]	; (8002270 <UARTDMAconfig+0x54>)
 8002226:	4813      	ldr	r0, [pc, #76]	; (8002274 <UARTDMAconfig+0x58>)
 8002228:	f005 fce6 	bl	8007bf8 <HAL_UART_Receive>
	rx[4]='\0';
 800222c:	4b10      	ldr	r3, [pc, #64]	; (8002270 <UARTDMAconfig+0x54>)
 800222e:	2200      	movs	r2, #0
 8002230:	711a      	strb	r2, [r3, #4]
	pwm=(int16_t)(rx[1]+(rx[2]<<8));
 8002232:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <UARTDMAconfig+0x54>)
 8002234:	785b      	ldrb	r3, [r3, #1]
 8002236:	b29a      	uxth	r2, r3
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <UARTDMAconfig+0x54>)
 800223a:	789b      	ldrb	r3, [r3, #2]
 800223c:	b29b      	uxth	r3, r3
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	b29b      	uxth	r3, r3
 8002242:	4413      	add	r3, r2
 8002244:	b29b      	uxth	r3, r3
 8002246:	b21a      	sxth	r2, r3
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <UARTDMAconfig+0x5c>)
 800224a:	801a      	strh	r2, [r3, #0]
	tune=((pwm+32676)*65536)/65352;
 800224c:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <UARTDMAconfig+0x5c>)
 800224e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002252:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8002256:	3324      	adds	r3, #36	; 0x24
 8002258:	041b      	lsls	r3, r3, #16
 800225a:	4a08      	ldr	r2, [pc, #32]	; (800227c <UARTDMAconfig+0x60>)
 800225c:	fb82 1203 	smull	r1, r2, r2, r3
 8002260:	12d2      	asrs	r2, r2, #11
 8002262:	17db      	asrs	r3, r3, #31
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	b29a      	uxth	r2, r3
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <UARTDMAconfig+0x64>)
 800226a:	801a      	strh	r2, [r3, #0]
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	200004bc 	.word	0x200004bc
 8002274:	200000f8 	.word	0x200000f8
 8002278:	200004d0 	.word	0x200004d0
 800227c:	0805c425 	.word	0x0805c425
 8002280:	200004d2 	.word	0x200004d2

08002284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002288:	b672      	cpsid	i
}
 800228a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800228c:	e7fe      	b.n	800228c <Error_Handler+0x8>
	...

08002290 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <HAL_MspInit+0x44>)
 8002298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229a:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <HAL_MspInit+0x44>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6613      	str	r3, [r2, #96]	; 0x60
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <HAL_MspInit+0x44>)
 80022a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_MspInit+0x44>)
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <HAL_MspInit+0x44>)
 80022b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b8:	6593      	str	r3, [r2, #88]	; 0x58
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_MspInit+0x44>)
 80022bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80022c6:	f002 ff21 	bl	800510c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000

080022d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b0a0      	sub	sp, #128	; 0x80
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022f0:	f107 0318 	add.w	r3, r7, #24
 80022f4:	2254      	movs	r2, #84	; 0x54
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f007 f973 	bl	80095e4 <memset>
  if(hadc->Instance==ADC1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002306:	d177      	bne.n	80023f8 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800230c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800230e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002312:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002314:	f107 0318 	add.w	r3, r7, #24
 8002318:	4618      	mov	r0, r3
 800231a:	f003 fc35 	bl	8005b88 <HAL_RCCEx_PeriphCLKConfig>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002324:	f7ff ffae 	bl	8002284 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002328:	4b35      	ldr	r3, [pc, #212]	; (8002400 <HAL_ADC_MspInit+0x128>)
 800232a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232c:	4a34      	ldr	r2, [pc, #208]	; (8002400 <HAL_ADC_MspInit+0x128>)
 800232e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002332:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002334:	4b32      	ldr	r3, [pc, #200]	; (8002400 <HAL_ADC_MspInit+0x128>)
 8002336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002340:	4b2f      	ldr	r3, [pc, #188]	; (8002400 <HAL_ADC_MspInit+0x128>)
 8002342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002344:	4a2e      	ldr	r2, [pc, #184]	; (8002400 <HAL_ADC_MspInit+0x128>)
 8002346:	f043 0304 	orr.w	r3, r3, #4
 800234a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800234c:	4b2c      	ldr	r3, [pc, #176]	; (8002400 <HAL_ADC_MspInit+0x128>)
 800234e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002358:	4b29      	ldr	r3, [pc, #164]	; (8002400 <HAL_ADC_MspInit+0x128>)
 800235a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235c:	4a28      	ldr	r2, [pc, #160]	; (8002400 <HAL_ADC_MspInit+0x128>)
 800235e:	f043 0302 	orr.w	r3, r3, #2
 8002362:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002364:	4b26      	ldr	r3, [pc, #152]	; (8002400 <HAL_ADC_MspInit+0x128>)
 8002366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002370:	2307      	movs	r3, #7
 8002372:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002374:	2303      	movs	r3, #3
 8002376:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800237c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002380:	4619      	mov	r1, r3
 8002382:	4820      	ldr	r0, [pc, #128]	; (8002404 <HAL_ADC_MspInit+0x12c>)
 8002384:	f002 fc2e 	bl	8004be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002388:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800238c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800238e:	2303      	movs	r3, #3
 8002390:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002396:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800239a:	4619      	mov	r1, r3
 800239c:	481a      	ldr	r0, [pc, #104]	; (8002408 <HAL_ADC_MspInit+0x130>)
 800239e:	f002 fc21 	bl	8004be4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80023a2:	4b1a      	ldr	r3, [pc, #104]	; (800240c <HAL_ADC_MspInit+0x134>)
 80023a4:	4a1a      	ldr	r2, [pc, #104]	; (8002410 <HAL_ADC_MspInit+0x138>)
 80023a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80023a8:	4b18      	ldr	r3, [pc, #96]	; (800240c <HAL_ADC_MspInit+0x134>)
 80023aa:	2205      	movs	r2, #5
 80023ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ae:	4b17      	ldr	r3, [pc, #92]	; (800240c <HAL_ADC_MspInit+0x134>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023b4:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_ADC_MspInit+0x134>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <HAL_ADC_MspInit+0x134>)
 80023bc:	2280      	movs	r2, #128	; 0x80
 80023be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_ADC_MspInit+0x134>)
 80023c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023c8:	4b10      	ldr	r3, [pc, #64]	; (800240c <HAL_ADC_MspInit+0x134>)
 80023ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023d0:	4b0e      	ldr	r3, [pc, #56]	; (800240c <HAL_ADC_MspInit+0x134>)
 80023d2:	2220      	movs	r2, #32
 80023d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <HAL_ADC_MspInit+0x134>)
 80023d8:	2200      	movs	r2, #0
 80023da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023dc:	480b      	ldr	r0, [pc, #44]	; (800240c <HAL_ADC_MspInit+0x134>)
 80023de:	f002 f8cf 	bl	8004580 <HAL_DMA_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 80023e8:	f7ff ff4c 	bl	8002284 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a07      	ldr	r2, [pc, #28]	; (800240c <HAL_ADC_MspInit+0x134>)
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54
 80023f2:	4a06      	ldr	r2, [pc, #24]	; (800240c <HAL_ADC_MspInit+0x134>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023f8:	bf00      	nop
 80023fa:	3780      	adds	r7, #128	; 0x80
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40021000 	.word	0x40021000
 8002404:	48000800 	.word	0x48000800
 8002408:	48000400 	.word	0x48000400
 800240c:	20000098 	.word	0x20000098
 8002410:	40020008 	.word	0x40020008

08002414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b09e      	sub	sp, #120	; 0x78
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800242c:	f107 0310 	add.w	r3, r7, #16
 8002430:	2254      	movs	r2, #84	; 0x54
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f007 f8d5 	bl	80095e4 <memset>
  if(huart->Instance==LPUART1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a4d      	ldr	r2, [pc, #308]	; (8002574 <HAL_UART_MspInit+0x160>)
 8002440:	4293      	cmp	r3, r2
 8002442:	f040 8092 	bne.w	800256a <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002446:	2320      	movs	r3, #32
 8002448:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800244a:	2300      	movs	r3, #0
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800244e:	f107 0310 	add.w	r3, r7, #16
 8002452:	4618      	mov	r0, r3
 8002454:	f003 fb98 	bl	8005b88 <HAL_RCCEx_PeriphCLKConfig>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800245e:	f7ff ff11 	bl	8002284 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002462:	4b45      	ldr	r3, [pc, #276]	; (8002578 <HAL_UART_MspInit+0x164>)
 8002464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002466:	4a44      	ldr	r2, [pc, #272]	; (8002578 <HAL_UART_MspInit+0x164>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800246e:	4b42      	ldr	r3, [pc, #264]	; (8002578 <HAL_UART_MspInit+0x164>)
 8002470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247a:	4b3f      	ldr	r3, [pc, #252]	; (8002578 <HAL_UART_MspInit+0x164>)
 800247c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247e:	4a3e      	ldr	r2, [pc, #248]	; (8002578 <HAL_UART_MspInit+0x164>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002486:	4b3c      	ldr	r3, [pc, #240]	; (8002578 <HAL_UART_MspInit+0x164>)
 8002488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002492:	230c      	movs	r3, #12
 8002494:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249e:	2300      	movs	r3, #0
 80024a0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80024a2:	230c      	movs	r3, #12
 80024a4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024aa:	4619      	mov	r1, r3
 80024ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b0:	f002 fb98 	bl	8004be4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80024b4:	4b31      	ldr	r3, [pc, #196]	; (800257c <HAL_UART_MspInit+0x168>)
 80024b6:	4a32      	ldr	r2, [pc, #200]	; (8002580 <HAL_UART_MspInit+0x16c>)
 80024b8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80024ba:	4b30      	ldr	r3, [pc, #192]	; (800257c <HAL_UART_MspInit+0x168>)
 80024bc:	2223      	movs	r2, #35	; 0x23
 80024be:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024c0:	4b2e      	ldr	r3, [pc, #184]	; (800257c <HAL_UART_MspInit+0x168>)
 80024c2:	2210      	movs	r2, #16
 80024c4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c6:	4b2d      	ldr	r3, [pc, #180]	; (800257c <HAL_UART_MspInit+0x168>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024cc:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_UART_MspInit+0x168>)
 80024ce:	2280      	movs	r2, #128	; 0x80
 80024d0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024d2:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_UART_MspInit+0x168>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024d8:	4b28      	ldr	r3, [pc, #160]	; (800257c <HAL_UART_MspInit+0x168>)
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80024de:	4b27      	ldr	r3, [pc, #156]	; (800257c <HAL_UART_MspInit+0x168>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024e4:	4b25      	ldr	r3, [pc, #148]	; (800257c <HAL_UART_MspInit+0x168>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80024ea:	4824      	ldr	r0, [pc, #144]	; (800257c <HAL_UART_MspInit+0x168>)
 80024ec:	f002 f848 	bl	8004580 <HAL_DMA_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80024f6:	f7ff fec5 	bl	8002284 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a1f      	ldr	r2, [pc, #124]	; (800257c <HAL_UART_MspInit+0x168>)
 80024fe:	67da      	str	r2, [r3, #124]	; 0x7c
 8002500:	4a1e      	ldr	r2, [pc, #120]	; (800257c <HAL_UART_MspInit+0x168>)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8002506:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <HAL_UART_MspInit+0x170>)
 8002508:	4a1f      	ldr	r2, [pc, #124]	; (8002588 <HAL_UART_MspInit+0x174>)
 800250a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800250c:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <HAL_UART_MspInit+0x170>)
 800250e:	2222      	movs	r2, #34	; 0x22
 8002510:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002512:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <HAL_UART_MspInit+0x170>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002518:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <HAL_UART_MspInit+0x170>)
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800251e:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_UART_MspInit+0x170>)
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002524:	4b17      	ldr	r3, [pc, #92]	; (8002584 <HAL_UART_MspInit+0x170>)
 8002526:	2200      	movs	r2, #0
 8002528:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800252a:	4b16      	ldr	r3, [pc, #88]	; (8002584 <HAL_UART_MspInit+0x170>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8002530:	4b14      	ldr	r3, [pc, #80]	; (8002584 <HAL_UART_MspInit+0x170>)
 8002532:	2220      	movs	r2, #32
 8002534:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002536:	4b13      	ldr	r3, [pc, #76]	; (8002584 <HAL_UART_MspInit+0x170>)
 8002538:	2200      	movs	r2, #0
 800253a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800253c:	4811      	ldr	r0, [pc, #68]	; (8002584 <HAL_UART_MspInit+0x170>)
 800253e:	f002 f81f 	bl	8004580 <HAL_DMA_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8002548:	f7ff fe9c 	bl	8002284 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <HAL_UART_MspInit+0x170>)
 8002550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002554:	4a0b      	ldr	r2, [pc, #44]	; (8002584 <HAL_UART_MspInit+0x170>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	2100      	movs	r1, #0
 800255e:	205b      	movs	r0, #91	; 0x5b
 8002560:	f001 ffd9 	bl	8004516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002564:	205b      	movs	r0, #91	; 0x5b
 8002566:	f001 fff0 	bl	800454a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800256a:	bf00      	nop
 800256c:	3778      	adds	r7, #120	; 0x78
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40008000 	.word	0x40008000
 8002578:	40021000 	.word	0x40021000
 800257c:	2000018c 	.word	0x2000018c
 8002580:	4002001c 	.word	0x4002001c
 8002584:	200001ec 	.word	0x200001ec
 8002588:	40020030 	.word	0x40020030

0800258c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a28      	ldr	r2, [pc, #160]	; (800263c <HAL_TIM_Base_MspInit+0xb0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10c      	bne.n	80025b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800259e:	4b28      	ldr	r3, [pc, #160]	; (8002640 <HAL_TIM_Base_MspInit+0xb4>)
 80025a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a2:	4a27      	ldr	r2, [pc, #156]	; (8002640 <HAL_TIM_Base_MspInit+0xb4>)
 80025a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025a8:	6613      	str	r3, [r2, #96]	; 0x60
 80025aa:	4b25      	ldr	r3, [pc, #148]	; (8002640 <HAL_TIM_Base_MspInit+0xb4>)
 80025ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80025b6:	e03c      	b.n	8002632 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c0:	d10c      	bne.n	80025dc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025c2:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <HAL_TIM_Base_MspInit+0xb4>)
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	4a1e      	ldr	r2, [pc, #120]	; (8002640 <HAL_TIM_Base_MspInit+0xb4>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6593      	str	r3, [r2, #88]	; 0x58
 80025ce:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <HAL_TIM_Base_MspInit+0xb4>)
 80025d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	693b      	ldr	r3, [r7, #16]
}
 80025da:	e02a      	b.n	8002632 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a18      	ldr	r2, [pc, #96]	; (8002644 <HAL_TIM_Base_MspInit+0xb8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d10c      	bne.n	8002600 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <HAL_TIM_Base_MspInit+0xb4>)
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ea:	4a15      	ldr	r2, [pc, #84]	; (8002640 <HAL_TIM_Base_MspInit+0xb4>)
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	6593      	str	r3, [r2, #88]	; 0x58
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <HAL_TIM_Base_MspInit+0xb4>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
}
 80025fe:	e018      	b.n	8002632 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a10      	ldr	r2, [pc, #64]	; (8002648 <HAL_TIM_Base_MspInit+0xbc>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d113      	bne.n	8002632 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_TIM_Base_MspInit+0xb4>)
 800260c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260e:	4a0c      	ldr	r2, [pc, #48]	; (8002640 <HAL_TIM_Base_MspInit+0xb4>)
 8002610:	f043 0308 	orr.w	r3, r3, #8
 8002614:	6593      	str	r3, [r2, #88]	; 0x58
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <HAL_TIM_Base_MspInit+0xb4>)
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	2032      	movs	r0, #50	; 0x32
 8002628:	f001 ff75 	bl	8004516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800262c:	2032      	movs	r0, #50	; 0x32
 800262e:	f001 ff8c 	bl	800454a <HAL_NVIC_EnableIRQ>
}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40012c00 	.word	0x40012c00
 8002640:	40021000 	.word	0x40021000
 8002644:	40000800 	.word	0x40000800
 8002648:	40000c00 	.word	0x40000c00

0800264c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <HAL_TIM_Encoder_MspInit+0x7c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d128      	bne.n	80026c0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800266e:	4b17      	ldr	r3, [pc, #92]	; (80026cc <HAL_TIM_Encoder_MspInit+0x80>)
 8002670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002672:	4a16      	ldr	r2, [pc, #88]	; (80026cc <HAL_TIM_Encoder_MspInit+0x80>)
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	6593      	str	r3, [r2, #88]	; 0x58
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <HAL_TIM_Encoder_MspInit+0x80>)
 800267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_TIM_Encoder_MspInit+0x80>)
 8002688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268a:	4a10      	ldr	r2, [pc, #64]	; (80026cc <HAL_TIM_Encoder_MspInit+0x80>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HAL_TIM_Encoder_MspInit+0x80>)
 8002694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800269e:	23c0      	movs	r3, #192	; 0xc0
 80026a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	2302      	movs	r3, #2
 80026a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026aa:	2300      	movs	r3, #0
 80026ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026ae:	2302      	movs	r3, #2
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	4619      	mov	r1, r3
 80026b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026bc:	f002 fa92 	bl	8004be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026c0:	bf00      	nop
 80026c2:	3728      	adds	r7, #40	; 0x28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40021000 	.word	0x40021000

080026d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08c      	sub	sp, #48	; 0x30
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 031c 	add.w	r3, r7, #28
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a43      	ldr	r2, [pc, #268]	; (80027fc <HAL_TIM_MspPostInit+0x12c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d11e      	bne.n	8002730 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f2:	4b43      	ldr	r3, [pc, #268]	; (8002800 <HAL_TIM_MspPostInit+0x130>)
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	4a42      	ldr	r2, [pc, #264]	; (8002800 <HAL_TIM_MspPostInit+0x130>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026fe:	4b40      	ldr	r3, [pc, #256]	; (8002800 <HAL_TIM_MspPostInit+0x130>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	61bb      	str	r3, [r7, #24]
 8002708:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800270a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800270e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002710:	2302      	movs	r3, #2
 8002712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002718:	2300      	movs	r3, #0
 800271a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800271c:	2306      	movs	r3, #6
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002720:	f107 031c 	add.w	r3, r7, #28
 8002724:	4619      	mov	r1, r3
 8002726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800272a:	f002 fa5b 	bl	8004be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800272e:	e061      	b.n	80027f4 <HAL_TIM_MspPostInit+0x124>
  else if(htim->Instance==TIM2)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002738:	d11d      	bne.n	8002776 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273a:	4b31      	ldr	r3, [pc, #196]	; (8002800 <HAL_TIM_MspPostInit+0x130>)
 800273c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273e:	4a30      	ldr	r2, [pc, #192]	; (8002800 <HAL_TIM_MspPostInit+0x130>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002746:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <HAL_TIM_MspPostInit+0x130>)
 8002748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002752:	2303      	movs	r3, #3
 8002754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275e:	2300      	movs	r3, #0
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002762:	2301      	movs	r3, #1
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002766:	f107 031c 	add.w	r3, r7, #28
 800276a:	4619      	mov	r1, r3
 800276c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002770:	f002 fa38 	bl	8004be4 <HAL_GPIO_Init>
}
 8002774:	e03e      	b.n	80027f4 <HAL_TIM_MspPostInit+0x124>
  else if(htim->Instance==TIM4)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a22      	ldr	r2, [pc, #136]	; (8002804 <HAL_TIM_MspPostInit+0x134>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d139      	bne.n	80027f4 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002780:	4b1f      	ldr	r3, [pc, #124]	; (8002800 <HAL_TIM_MspPostInit+0x130>)
 8002782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002784:	4a1e      	ldr	r2, [pc, #120]	; (8002800 <HAL_TIM_MspPostInit+0x130>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800278c:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <HAL_TIM_MspPostInit+0x130>)
 800278e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_TIM_MspPostInit+0x130>)
 800279a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279c:	4a18      	ldr	r2, [pc, #96]	; (8002800 <HAL_TIM_MspPostInit+0x130>)
 800279e:	f043 0302 	orr.w	r3, r3, #2
 80027a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027a4:	4b16      	ldr	r3, [pc, #88]	; (8002800 <HAL_TIM_MspPostInit+0x130>)
 80027a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027be:	2300      	movs	r3, #0
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80027c2:	230a      	movs	r3, #10
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c6:	f107 031c 	add.w	r3, r7, #28
 80027ca:	4619      	mov	r1, r3
 80027cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d0:	f002 fa08 	bl	8004be4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027d4:	2340      	movs	r3, #64	; 0x40
 80027d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d8:	2302      	movs	r3, #2
 80027da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e0:	2300      	movs	r3, #0
 80027e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027e4:	2302      	movs	r3, #2
 80027e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e8:	f107 031c 	add.w	r3, r7, #28
 80027ec:	4619      	mov	r1, r3
 80027ee:	4806      	ldr	r0, [pc, #24]	; (8002808 <HAL_TIM_MspPostInit+0x138>)
 80027f0:	f002 f9f8 	bl	8004be4 <HAL_GPIO_Init>
}
 80027f4:	bf00      	nop
 80027f6:	3730      	adds	r7, #48	; 0x30
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40012c00 	.word	0x40012c00
 8002800:	40021000 	.word	0x40021000
 8002804:	40000800 	.word	0x40000800
 8002808:	48000400 	.word	0x48000400

0800280c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002810:	e7fe      	b.n	8002810 <NMI_Handler+0x4>

08002812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002816:	e7fe      	b.n	8002816 <HardFault_Handler+0x4>

08002818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800281c:	e7fe      	b.n	800281c <MemManage_Handler+0x4>

0800281e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002822:	e7fe      	b.n	8002822 <BusFault_Handler+0x4>

08002824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002828:	e7fe      	b.n	8002828 <UsageFault_Handler+0x4>

0800282a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002846:	b480      	push	{r7}
 8002848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002858:	f000 f8ca 	bl	80029f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}

08002860 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <DMA1_Channel1_IRQHandler+0x10>)
 8002866:	f002 f86e 	bl	8004946 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000098 	.word	0x20000098

08002874 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <DMA1_Channel2_IRQHandler+0x10>)
 800287a:	f002 f864 	bl	8004946 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	2000018c 	.word	0x2000018c

08002888 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800288c:	4802      	ldr	r0, [pc, #8]	; (8002898 <DMA1_Channel3_IRQHandler+0x10>)
 800288e:	f002 f85a 	bl	8004946 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200001ec 	.word	0x200001ec

0800289c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80028a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80028a4:	f002 fb6a 	bl	8004f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028a8:	bf00      	nop
 80028aa:	bd80      	pop	{r7, pc}

080028ac <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80028b0:	4802      	ldr	r0, [pc, #8]	; (80028bc <TIM5_IRQHandler+0x10>)
 80028b2:	f003 ff9f 	bl	80067f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	2000037c 	.word	0x2000037c

080028c0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80028c4:	4802      	ldr	r0, [pc, #8]	; (80028d0 <LPUART1_IRQHandler+0x10>)
 80028c6:	f005 faf3 	bl	8007eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200000f8 	.word	0x200000f8

080028d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <SystemInit+0x20>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028de:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <SystemInit+0x20>)
 80028e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028f8:	480d      	ldr	r0, [pc, #52]	; (8002930 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028fc:	f7ff ffea 	bl	80028d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002900:	480c      	ldr	r0, [pc, #48]	; (8002934 <LoopForever+0x6>)
  ldr r1, =_edata
 8002902:	490d      	ldr	r1, [pc, #52]	; (8002938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002904:	4a0d      	ldr	r2, [pc, #52]	; (800293c <LoopForever+0xe>)
  movs r3, #0
 8002906:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002908:	e002      	b.n	8002910 <LoopCopyDataInit>

0800290a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800290a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800290c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800290e:	3304      	adds	r3, #4

08002910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002914:	d3f9      	bcc.n	800290a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002916:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002918:	4c0a      	ldr	r4, [pc, #40]	; (8002944 <LoopForever+0x16>)
  movs r3, #0
 800291a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800291c:	e001      	b.n	8002922 <LoopFillZerobss>

0800291e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800291e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002920:	3204      	adds	r2, #4

08002922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002924:	d3fb      	bcc.n	800291e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002926:	f006 fe65 	bl	80095f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800292a:	f7fe fb51 	bl	8000fd0 <main>

0800292e <LoopForever>:

LoopForever:
    b LoopForever
 800292e:	e7fe      	b.n	800292e <LoopForever>
  ldr   r0, =_estack
 8002930:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002938:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800293c:	080096a4 	.word	0x080096a4
  ldr r2, =_sbss
 8002940:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002944:	200004f0 	.word	0x200004f0

08002948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002948:	e7fe      	b.n	8002948 <ADC1_2_IRQHandler>

0800294a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002954:	2003      	movs	r0, #3
 8002956:	f001 fdd3 	bl	8004500 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800295a:	2000      	movs	r0, #0
 800295c:	f000 f80e 	bl	800297c <HAL_InitTick>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	71fb      	strb	r3, [r7, #7]
 800296a:	e001      	b.n	8002970 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800296c:	f7ff fc90 	bl	8002290 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002970:	79fb      	ldrb	r3, [r7, #7]

}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002988:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <HAL_InitTick+0x68>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d022      	beq.n	80029d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002990:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_InitTick+0x6c>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <HAL_InitTick+0x68>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800299c:	fbb1 f3f3 	udiv	r3, r1, r3
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	4618      	mov	r0, r3
 80029a6:	f001 fdde 	bl	8004566 <HAL_SYSTICK_Config>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10f      	bne.n	80029d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b0f      	cmp	r3, #15
 80029b4:	d809      	bhi.n	80029ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029b6:	2200      	movs	r2, #0
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	f04f 30ff 	mov.w	r0, #4294967295
 80029be:	f001 fdaa 	bl	8004516 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029c2:	4a0a      	ldr	r2, [pc, #40]	; (80029ec <HAL_InitTick+0x70>)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	e007      	b.n	80029da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
 80029ce:	e004      	b.n	80029da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
 80029d4:	e001      	b.n	80029da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029da:	7bfb      	ldrb	r3, [r7, #15]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	2000000c 	.word	0x2000000c
 80029e8:	20000004 	.word	0x20000004
 80029ec:	20000008 	.word	0x20000008

080029f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_IncTick+0x1c>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_IncTick+0x20>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4413      	add	r3, r2
 80029fe:	4a03      	ldr	r2, [pc, #12]	; (8002a0c <HAL_IncTick+0x1c>)
 8002a00:	6013      	str	r3, [r2, #0]
}
 8002a02:	bf00      	nop
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	200004ec 	.word	0x200004ec
 8002a10:	2000000c 	.word	0x2000000c

08002a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return uwTick;
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <HAL_GetTick+0x14>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	200004ec 	.word	0x200004ec

08002a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a34:	f7ff ffee 	bl	8002a14 <HAL_GetTick>
 8002a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d004      	beq.n	8002a50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_Delay+0x40>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a50:	bf00      	nop
 8002a52:	f7ff ffdf 	bl	8002a14 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d8f7      	bhi.n	8002a52 <HAL_Delay+0x26>
  {
  }
}
 8002a62:	bf00      	nop
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	2000000c 	.word	0x2000000c

08002a70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	609a      	str	r2, [r3, #8]
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	609a      	str	r2, [r3, #8]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3360      	adds	r3, #96	; 0x60
 8002aea:	461a      	mov	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <LL_ADC_SetOffset+0x44>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	03fff000 	.word	0x03fff000

08002b20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3360      	adds	r3, #96	; 0x60
 8002b2e:	461a      	mov	r2, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3360      	adds	r3, #96	; 0x60
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b76:	bf00      	nop
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b087      	sub	sp, #28
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3360      	adds	r3, #96	; 0x60
 8002b92:	461a      	mov	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002bac:	bf00      	nop
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	3360      	adds	r3, #96	; 0x60
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002be2:	bf00      	nop
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	615a      	str	r2, [r3, #20]
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b087      	sub	sp, #28
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3330      	adds	r3, #48	; 0x30
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	4413      	add	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	211f      	movs	r1, #31
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	0e9b      	lsrs	r3, r3, #26
 8002c72:	f003 011f 	and.w	r1, r3, #31
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c80:	431a      	orrs	r2, r3
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c86:	bf00      	nop
 8002c88:	371c      	adds	r7, #28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b087      	sub	sp, #28
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3314      	adds	r3, #20
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	0e5b      	lsrs	r3, r3, #25
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	4413      	add	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	0d1b      	lsrs	r3, r3, #20
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	2107      	movs	r1, #7
 8002cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	0d1b      	lsrs	r3, r3, #20
 8002ccc:	f003 031f 	and.w	r3, r3, #31
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cdc:	bf00      	nop
 8002cde:	371c      	adds	r7, #28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d00:	43db      	mvns	r3, r3
 8002d02:	401a      	ands	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f003 0318 	and.w	r3, r3, #24
 8002d0a:	4908      	ldr	r1, [pc, #32]	; (8002d2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d0c:	40d9      	lsrs	r1, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	400b      	ands	r3, r1
 8002d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d16:	431a      	orrs	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	0007ffff 	.word	0x0007ffff

08002d30 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 031f 	and.w	r3, r3, #31
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002d5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6093      	str	r3, [r2, #8]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d84:	d101      	bne.n	8002d8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002da8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dd4:	d101      	bne.n	8002dda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002df8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dfc:	f043 0201 	orr.w	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e24:	f043 0202 	orr.w	r2, r3, #2
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <LL_ADC_IsEnabled+0x18>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <LL_ADC_IsEnabled+0x1a>
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d101      	bne.n	8002e76 <LL_ADC_IsDisableOngoing+0x18>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <LL_ADC_IsDisableOngoing+0x1a>
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e98:	f043 0204 	orr.w	r2, r3, #4
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d101      	bne.n	8002ec4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e000      	b.n	8002ec6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d101      	bne.n	8002eea <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b089      	sub	sp, #36	; 0x24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e1a9      	b.n	8003266 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d109      	bne.n	8002f34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff f9d9 	bl	80022d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ff19 	bl	8002d70 <LL_ADC_IsDeepPowerDownEnabled>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d004      	beq.n	8002f4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff feff 	bl	8002d4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff ff34 	bl	8002dc0 <LL_ADC_IsInternalRegulatorEnabled>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d115      	bne.n	8002f8a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff ff18 	bl	8002d98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f68:	4b9c      	ldr	r3, [pc, #624]	; (80031dc <HAL_ADC_Init+0x2e4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	099b      	lsrs	r3, r3, #6
 8002f6e:	4a9c      	ldr	r2, [pc, #624]	; (80031e0 <HAL_ADC_Init+0x2e8>)
 8002f70:	fba2 2303 	umull	r2, r3, r2, r3
 8002f74:	099b      	lsrs	r3, r3, #6
 8002f76:	3301      	adds	r3, #1
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f7c:	e002      	b.n	8002f84 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f9      	bne.n	8002f7e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff ff16 	bl	8002dc0 <LL_ADC_IsInternalRegulatorEnabled>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10d      	bne.n	8002fb6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9e:	f043 0210 	orr.w	r2, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002faa:	f043 0201 	orr.w	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff ff76 	bl	8002eac <LL_ADC_REG_IsConversionOngoing>
 8002fc0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f040 8142 	bne.w	8003254 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f040 813e 	bne.w	8003254 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fdc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002fe0:	f043 0202 	orr.w	r2, r3, #2
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ff23 	bl	8002e38 <LL_ADC_IsEnabled>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d141      	bne.n	800307c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003000:	d004      	beq.n	800300c <HAL_ADC_Init+0x114>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a77      	ldr	r2, [pc, #476]	; (80031e4 <HAL_ADC_Init+0x2ec>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d10f      	bne.n	800302c <HAL_ADC_Init+0x134>
 800300c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003010:	f7ff ff12 	bl	8002e38 <LL_ADC_IsEnabled>
 8003014:	4604      	mov	r4, r0
 8003016:	4873      	ldr	r0, [pc, #460]	; (80031e4 <HAL_ADC_Init+0x2ec>)
 8003018:	f7ff ff0e 	bl	8002e38 <LL_ADC_IsEnabled>
 800301c:	4603      	mov	r3, r0
 800301e:	4323      	orrs	r3, r4
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	e012      	b.n	8003052 <HAL_ADC_Init+0x15a>
 800302c:	486e      	ldr	r0, [pc, #440]	; (80031e8 <HAL_ADC_Init+0x2f0>)
 800302e:	f7ff ff03 	bl	8002e38 <LL_ADC_IsEnabled>
 8003032:	4604      	mov	r4, r0
 8003034:	486d      	ldr	r0, [pc, #436]	; (80031ec <HAL_ADC_Init+0x2f4>)
 8003036:	f7ff feff 	bl	8002e38 <LL_ADC_IsEnabled>
 800303a:	4603      	mov	r3, r0
 800303c:	431c      	orrs	r4, r3
 800303e:	486c      	ldr	r0, [pc, #432]	; (80031f0 <HAL_ADC_Init+0x2f8>)
 8003040:	f7ff fefa 	bl	8002e38 <LL_ADC_IsEnabled>
 8003044:	4603      	mov	r3, r0
 8003046:	4323      	orrs	r3, r4
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d012      	beq.n	800307c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800305e:	d004      	beq.n	800306a <HAL_ADC_Init+0x172>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a5f      	ldr	r2, [pc, #380]	; (80031e4 <HAL_ADC_Init+0x2ec>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <HAL_ADC_Init+0x176>
 800306a:	4a62      	ldr	r2, [pc, #392]	; (80031f4 <HAL_ADC_Init+0x2fc>)
 800306c:	e000      	b.n	8003070 <HAL_ADC_Init+0x178>
 800306e:	4a62      	ldr	r2, [pc, #392]	; (80031f8 <HAL_ADC_Init+0x300>)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4619      	mov	r1, r3
 8003076:	4610      	mov	r0, r2
 8003078:	f7ff fcfa 	bl	8002a70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	7f5b      	ldrb	r3, [r3, #29]
 8003080:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003086:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800308c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003092:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800309a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d106      	bne.n	80030b8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	3b01      	subs	r3, #1
 80030b0:	045b      	lsls	r3, r3, #17
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d009      	beq.n	80030d4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	4b48      	ldr	r3, [pc, #288]	; (80031fc <HAL_ADC_Init+0x304>)
 80030dc:	4013      	ands	r3, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	69b9      	ldr	r1, [r7, #24]
 80030e4:	430b      	orrs	r3, r1
 80030e6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fee5 	bl	8002ed2 <LL_ADC_INJ_IsConversionOngoing>
 8003108:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d17f      	bne.n	8003210 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d17c      	bne.n	8003210 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800311a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003122:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003132:	f023 0302 	bic.w	r3, r3, #2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	69b9      	ldr	r1, [r7, #24]
 800313c:	430b      	orrs	r3, r1
 800313e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d017      	beq.n	8003178 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003156:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003160:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003164:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6911      	ldr	r1, [r2, #16]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	430b      	orrs	r3, r1
 8003172:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003176:	e013      	b.n	80031a0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003186:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003198:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800319c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d12a      	bne.n	8003200 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80031b4:	f023 0304 	bic.w	r3, r3, #4
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031c0:	4311      	orrs	r1, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80031c6:	4311      	orrs	r1, r2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031cc:	430a      	orrs	r2, r1
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 0201 	orr.w	r2, r2, #1
 80031d8:	611a      	str	r2, [r3, #16]
 80031da:	e019      	b.n	8003210 <HAL_ADC_Init+0x318>
 80031dc:	20000004 	.word	0x20000004
 80031e0:	053e2d63 	.word	0x053e2d63
 80031e4:	50000100 	.word	0x50000100
 80031e8:	50000400 	.word	0x50000400
 80031ec:	50000500 	.word	0x50000500
 80031f0:	50000600 	.word	0x50000600
 80031f4:	50000300 	.word	0x50000300
 80031f8:	50000700 	.word	0x50000700
 80031fc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d10c      	bne.n	8003232 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f023 010f 	bic.w	r1, r3, #15
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	1e5a      	subs	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
 8003230:	e007      	b.n	8003242 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 020f 	bic.w	r2, r2, #15
 8003240:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	f023 0303 	bic.w	r3, r3, #3
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	65da      	str	r2, [r3, #92]	; 0x5c
 8003252:	e007      	b.n	8003264 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003258:	f043 0210 	orr.w	r2, r3, #16
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003264:	7ffb      	ldrb	r3, [r7, #31]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3724      	adds	r7, #36	; 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd90      	pop	{r4, r7, pc}
 800326e:	bf00      	nop

08003270 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003284:	d004      	beq.n	8003290 <HAL_ADC_Start_DMA+0x20>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a5a      	ldr	r2, [pc, #360]	; (80033f4 <HAL_ADC_Start_DMA+0x184>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d101      	bne.n	8003294 <HAL_ADC_Start_DMA+0x24>
 8003290:	4b59      	ldr	r3, [pc, #356]	; (80033f8 <HAL_ADC_Start_DMA+0x188>)
 8003292:	e000      	b.n	8003296 <HAL_ADC_Start_DMA+0x26>
 8003294:	4b59      	ldr	r3, [pc, #356]	; (80033fc <HAL_ADC_Start_DMA+0x18c>)
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fd4a 	bl	8002d30 <LL_ADC_GetMultimode>
 800329c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff fe02 	bl	8002eac <LL_ADC_REG_IsConversionOngoing>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f040 809b 	bne.w	80033e6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_ADC_Start_DMA+0x4e>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e096      	b.n	80033ec <HAL_ADC_Start_DMA+0x17c>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a4d      	ldr	r2, [pc, #308]	; (8003400 <HAL_ADC_Start_DMA+0x190>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d008      	beq.n	80032e2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b05      	cmp	r3, #5
 80032da:	d002      	beq.n	80032e2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b09      	cmp	r3, #9
 80032e0:	d17a      	bne.n	80033d8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 fcf6 	bl	8003cd4 <ADC_Enable>
 80032e8:	4603      	mov	r3, r0
 80032ea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d16d      	bne.n	80033ce <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032fa:	f023 0301 	bic.w	r3, r3, #1
 80032fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a3a      	ldr	r2, [pc, #232]	; (80033f4 <HAL_ADC_Start_DMA+0x184>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d009      	beq.n	8003324 <HAL_ADC_Start_DMA+0xb4>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a3b      	ldr	r2, [pc, #236]	; (8003404 <HAL_ADC_Start_DMA+0x194>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d002      	beq.n	8003320 <HAL_ADC_Start_DMA+0xb0>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	e003      	b.n	8003328 <HAL_ADC_Start_DMA+0xb8>
 8003320:	4b39      	ldr	r3, [pc, #228]	; (8003408 <HAL_ADC_Start_DMA+0x198>)
 8003322:	e001      	b.n	8003328 <HAL_ADC_Start_DMA+0xb8>
 8003324:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	4293      	cmp	r3, r2
 800332e:	d002      	beq.n	8003336 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d105      	bne.n	8003342 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d006      	beq.n	800335c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003352:	f023 0206 	bic.w	r2, r3, #6
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	661a      	str	r2, [r3, #96]	; 0x60
 800335a:	e002      	b.n	8003362 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003366:	4a29      	ldr	r2, [pc, #164]	; (800340c <HAL_ADC_Start_DMA+0x19c>)
 8003368:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336e:	4a28      	ldr	r2, [pc, #160]	; (8003410 <HAL_ADC_Start_DMA+0x1a0>)
 8003370:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003376:	4a27      	ldr	r2, [pc, #156]	; (8003414 <HAL_ADC_Start_DMA+0x1a4>)
 8003378:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	221c      	movs	r2, #28
 8003380:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0210 	orr.w	r2, r2, #16
 8003398:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0201 	orr.w	r2, r2, #1
 80033a8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3340      	adds	r3, #64	; 0x40
 80033b4:	4619      	mov	r1, r3
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f001 f989 	bl	80046d0 <HAL_DMA_Start_IT>
 80033be:	4603      	mov	r3, r0
 80033c0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff fd5c 	bl	8002e84 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80033cc:	e00d      	b.n	80033ea <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80033d6:	e008      	b.n	80033ea <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80033e4:	e001      	b.n	80033ea <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033e6:	2302      	movs	r3, #2
 80033e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	50000100 	.word	0x50000100
 80033f8:	50000300 	.word	0x50000300
 80033fc:	50000700 	.word	0x50000700
 8003400:	50000600 	.word	0x50000600
 8003404:	50000500 	.word	0x50000500
 8003408:	50000400 	.word	0x50000400
 800340c:	08003ebf 	.word	0x08003ebf
 8003410:	08003f97 	.word	0x08003f97
 8003414:	08003fb3 	.word	0x08003fb3

08003418 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b0b6      	sub	sp, #216	; 0xd8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800346e:	2b01      	cmp	r3, #1
 8003470:	d102      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x24>
 8003472:	2302      	movs	r3, #2
 8003474:	f000 bc13 	b.w	8003c9e <HAL_ADC_ConfigChannel+0x84a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff fd11 	bl	8002eac <LL_ADC_REG_IsConversionOngoing>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	f040 83f3 	bne.w	8003c78 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6859      	ldr	r1, [r3, #4]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	f7ff fbcb 	bl	8002c3a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff fcff 	bl	8002eac <LL_ADC_REG_IsConversionOngoing>
 80034ae:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fd0b 	bl	8002ed2 <LL_ADC_INJ_IsConversionOngoing>
 80034bc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f040 81d9 	bne.w	800387c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f040 81d4 	bne.w	800387c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034dc:	d10f      	bne.n	80034fe <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2200      	movs	r2, #0
 80034e8:	4619      	mov	r1, r3
 80034ea:	f7ff fbd2 	bl	8002c92 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff fb79 	bl	8002bee <LL_ADC_SetSamplingTimeCommonConfig>
 80034fc:	e00e      	b.n	800351c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6819      	ldr	r1, [r3, #0]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	461a      	mov	r2, r3
 800350c:	f7ff fbc1 	bl	8002c92 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2100      	movs	r1, #0
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff fb69 	bl	8002bee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	08db      	lsrs	r3, r3, #3
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	2b04      	cmp	r3, #4
 800353c:	d022      	beq.n	8003584 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6919      	ldr	r1, [r3, #16]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800354e:	f7ff fac3 	bl	8002ad8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6919      	ldr	r1, [r3, #16]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	461a      	mov	r2, r3
 8003560:	f7ff fb0f 	bl	8002b82 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6818      	ldr	r0, [r3, #0]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003570:	2b01      	cmp	r3, #1
 8003572:	d102      	bne.n	800357a <HAL_ADC_ConfigChannel+0x126>
 8003574:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003578:	e000      	b.n	800357c <HAL_ADC_ConfigChannel+0x128>
 800357a:	2300      	movs	r3, #0
 800357c:	461a      	mov	r2, r3
 800357e:	f7ff fb1b 	bl	8002bb8 <LL_ADC_SetOffsetSaturation>
 8003582:	e17b      	b.n	800387c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2100      	movs	r1, #0
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff fac8 	bl	8002b20 <LL_ADC_GetOffsetChannel>
 8003590:	4603      	mov	r3, r0
 8003592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10a      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x15c>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fabd 	bl	8002b20 <LL_ADC_GetOffsetChannel>
 80035a6:	4603      	mov	r3, r0
 80035a8:	0e9b      	lsrs	r3, r3, #26
 80035aa:	f003 021f 	and.w	r2, r3, #31
 80035ae:	e01e      	b.n	80035ee <HAL_ADC_ConfigChannel+0x19a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2100      	movs	r1, #0
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fab2 	bl	8002b20 <LL_ADC_GetOffsetChannel>
 80035bc:	4603      	mov	r3, r0
 80035be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035c6:	fa93 f3a3 	rbit	r3, r3
 80035ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80035de:	2320      	movs	r3, #32
 80035e0:	e004      	b.n	80035ec <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80035e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d105      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x1b2>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	0e9b      	lsrs	r3, r3, #26
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	e018      	b.n	8003638 <HAL_ADC_ConfigChannel+0x1e4>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800361a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800361e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003622:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800362a:	2320      	movs	r3, #32
 800362c:	e004      	b.n	8003638 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800362e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003638:	429a      	cmp	r2, r3
 800363a:	d106      	bne.n	800364a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2200      	movs	r2, #0
 8003642:	2100      	movs	r1, #0
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fa81 	bl	8002b4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2101      	movs	r1, #1
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fa65 	bl	8002b20 <LL_ADC_GetOffsetChannel>
 8003656:	4603      	mov	r3, r0
 8003658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x222>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2101      	movs	r1, #1
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fa5a 	bl	8002b20 <LL_ADC_GetOffsetChannel>
 800366c:	4603      	mov	r3, r0
 800366e:	0e9b      	lsrs	r3, r3, #26
 8003670:	f003 021f 	and.w	r2, r3, #31
 8003674:	e01e      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x260>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2101      	movs	r1, #1
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff fa4f 	bl	8002b20 <LL_ADC_GetOffsetChannel>
 8003682:	4603      	mov	r3, r0
 8003684:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003694:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003698:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800369c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80036a4:	2320      	movs	r3, #32
 80036a6:	e004      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80036a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036ac:	fab3 f383 	clz	r3, r3
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x278>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	0e9b      	lsrs	r3, r3, #26
 80036c6:	f003 031f 	and.w	r3, r3, #31
 80036ca:	e018      	b.n	80036fe <HAL_ADC_ConfigChannel+0x2aa>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80036e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80036e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80036e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80036f0:	2320      	movs	r3, #32
 80036f2:	e004      	b.n	80036fe <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80036f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036f8:	fab3 f383 	clz	r3, r3
 80036fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036fe:	429a      	cmp	r2, r3
 8003700:	d106      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2200      	movs	r2, #0
 8003708:	2101      	movs	r1, #1
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fa1e 	bl	8002b4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2102      	movs	r1, #2
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fa02 	bl	8002b20 <LL_ADC_GetOffsetChannel>
 800371c:	4603      	mov	r3, r0
 800371e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10a      	bne.n	800373c <HAL_ADC_ConfigChannel+0x2e8>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2102      	movs	r1, #2
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff f9f7 	bl	8002b20 <LL_ADC_GetOffsetChannel>
 8003732:	4603      	mov	r3, r0
 8003734:	0e9b      	lsrs	r3, r3, #26
 8003736:	f003 021f 	and.w	r2, r3, #31
 800373a:	e01e      	b.n	800377a <HAL_ADC_ConfigChannel+0x326>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2102      	movs	r1, #2
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff f9ec 	bl	8002b20 <LL_ADC_GetOffsetChannel>
 8003748:	4603      	mov	r3, r0
 800374a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800375a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800375e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003762:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800376a:	2320      	movs	r3, #32
 800376c:	e004      	b.n	8003778 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800376e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003782:	2b00      	cmp	r3, #0
 8003784:	d105      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x33e>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	0e9b      	lsrs	r3, r3, #26
 800378c:	f003 031f 	and.w	r3, r3, #31
 8003790:	e016      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x36c>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800379e:	fa93 f3a3 	rbit	r3, r3
 80037a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80037a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80037aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80037b2:	2320      	movs	r3, #32
 80037b4:	e004      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80037b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037ba:	fab3 f383 	clz	r3, r3
 80037be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d106      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2200      	movs	r2, #0
 80037ca:	2102      	movs	r1, #2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff f9bd 	bl	8002b4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2103      	movs	r1, #3
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff f9a1 	bl	8002b20 <LL_ADC_GetOffsetChannel>
 80037de:	4603      	mov	r3, r0
 80037e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10a      	bne.n	80037fe <HAL_ADC_ConfigChannel+0x3aa>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2103      	movs	r1, #3
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff f996 	bl	8002b20 <LL_ADC_GetOffsetChannel>
 80037f4:	4603      	mov	r3, r0
 80037f6:	0e9b      	lsrs	r3, r3, #26
 80037f8:	f003 021f 	and.w	r2, r3, #31
 80037fc:	e017      	b.n	800382e <HAL_ADC_ConfigChannel+0x3da>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2103      	movs	r1, #3
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff f98b 	bl	8002b20 <LL_ADC_GetOffsetChannel>
 800380a:	4603      	mov	r3, r0
 800380c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003810:	fa93 f3a3 	rbit	r3, r3
 8003814:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003816:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003818:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800381a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003820:	2320      	movs	r3, #32
 8003822:	e003      	b.n	800382c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003826:	fab3 f383 	clz	r3, r3
 800382a:	b2db      	uxtb	r3, r3
 800382c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003836:	2b00      	cmp	r3, #0
 8003838:	d105      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x3f2>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	0e9b      	lsrs	r3, r3, #26
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	e011      	b.n	800386a <HAL_ADC_ConfigChannel+0x416>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800384e:	fa93 f3a3 	rbit	r3, r3
 8003852:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003856:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800385e:	2320      	movs	r3, #32
 8003860:	e003      	b.n	800386a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003864:	fab3 f383 	clz	r3, r3
 8003868:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800386a:	429a      	cmp	r2, r3
 800386c:	d106      	bne.n	800387c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2200      	movs	r2, #0
 8003874:	2103      	movs	r1, #3
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff f968 	bl	8002b4c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff fad9 	bl	8002e38 <LL_ADC_IsEnabled>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	f040 813d 	bne.w	8003b08 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6819      	ldr	r1, [r3, #0]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	461a      	mov	r2, r3
 800389c:	f7ff fa24 	bl	8002ce8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4aa2      	ldr	r2, [pc, #648]	; (8003b30 <HAL_ADC_ConfigChannel+0x6dc>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	f040 812e 	bne.w	8003b08 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10b      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x480>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	0e9b      	lsrs	r3, r3, #26
 80038c2:	3301      	adds	r3, #1
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	2b09      	cmp	r3, #9
 80038ca:	bf94      	ite	ls
 80038cc:	2301      	movls	r3, #1
 80038ce:	2300      	movhi	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	e019      	b.n	8003908 <HAL_ADC_ConfigChannel+0x4b4>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038dc:	fa93 f3a3 	rbit	r3, r3
 80038e0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80038e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80038e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80038ec:	2320      	movs	r3, #32
 80038ee:	e003      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80038f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	3301      	adds	r3, #1
 80038fa:	f003 031f 	and.w	r3, r3, #31
 80038fe:	2b09      	cmp	r3, #9
 8003900:	bf94      	ite	ls
 8003902:	2301      	movls	r3, #1
 8003904:	2300      	movhi	r3, #0
 8003906:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003908:	2b00      	cmp	r3, #0
 800390a:	d079      	beq.n	8003a00 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003914:	2b00      	cmp	r3, #0
 8003916:	d107      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x4d4>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	0e9b      	lsrs	r3, r3, #26
 800391e:	3301      	adds	r3, #1
 8003920:	069b      	lsls	r3, r3, #26
 8003922:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003926:	e015      	b.n	8003954 <HAL_ADC_ConfigChannel+0x500>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003930:	fa93 f3a3 	rbit	r3, r3
 8003934:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003938:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800393a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003940:	2320      	movs	r3, #32
 8003942:	e003      	b.n	800394c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	b2db      	uxtb	r3, r3
 800394c:	3301      	adds	r3, #1
 800394e:	069b      	lsls	r3, r3, #26
 8003950:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395c:	2b00      	cmp	r3, #0
 800395e:	d109      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x520>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	0e9b      	lsrs	r3, r3, #26
 8003966:	3301      	adds	r3, #1
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	2101      	movs	r1, #1
 800396e:	fa01 f303 	lsl.w	r3, r1, r3
 8003972:	e017      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x550>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800397c:	fa93 f3a3 	rbit	r3, r3
 8003980:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003984:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800398c:	2320      	movs	r3, #32
 800398e:	e003      	b.n	8003998 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003992:	fab3 f383 	clz	r3, r3
 8003996:	b2db      	uxtb	r3, r3
 8003998:	3301      	adds	r3, #1
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	2101      	movs	r1, #1
 80039a0:	fa01 f303 	lsl.w	r3, r1, r3
 80039a4:	ea42 0103 	orr.w	r1, r2, r3
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x576>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	0e9b      	lsrs	r3, r3, #26
 80039ba:	3301      	adds	r3, #1
 80039bc:	f003 021f 	and.w	r2, r3, #31
 80039c0:	4613      	mov	r3, r2
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	4413      	add	r3, r2
 80039c6:	051b      	lsls	r3, r3, #20
 80039c8:	e018      	b.n	80039fc <HAL_ADC_ConfigChannel+0x5a8>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d2:	fa93 f3a3 	rbit	r3, r3
 80039d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80039d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80039dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80039e2:	2320      	movs	r3, #32
 80039e4:	e003      	b.n	80039ee <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80039e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e8:	fab3 f383 	clz	r3, r3
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	3301      	adds	r3, #1
 80039f0:	f003 021f 	and.w	r2, r3, #31
 80039f4:	4613      	mov	r3, r2
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4413      	add	r3, r2
 80039fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039fc:	430b      	orrs	r3, r1
 80039fe:	e07e      	b.n	8003afe <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d107      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x5c8>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	0e9b      	lsrs	r3, r3, #26
 8003a12:	3301      	adds	r3, #1
 8003a14:	069b      	lsls	r3, r3, #26
 8003a16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a1a:	e015      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x5f4>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a24:	fa93 f3a3 	rbit	r3, r3
 8003a28:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003a34:	2320      	movs	r3, #32
 8003a36:	e003      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3a:	fab3 f383 	clz	r3, r3
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	3301      	adds	r3, #1
 8003a42:	069b      	lsls	r3, r3, #26
 8003a44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d109      	bne.n	8003a68 <HAL_ADC_ConfigChannel+0x614>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	0e9b      	lsrs	r3, r3, #26
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	2101      	movs	r1, #1
 8003a62:	fa01 f303 	lsl.w	r3, r1, r3
 8003a66:	e017      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x644>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	fa93 f3a3 	rbit	r3, r3
 8003a74:	61fb      	str	r3, [r7, #28]
  return result;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003a80:	2320      	movs	r3, #32
 8003a82:	e003      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f003 031f 	and.w	r3, r3, #31
 8003a92:	2101      	movs	r1, #1
 8003a94:	fa01 f303 	lsl.w	r3, r1, r3
 8003a98:	ea42 0103 	orr.w	r1, r2, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10d      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x670>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	0e9b      	lsrs	r3, r3, #26
 8003aae:	3301      	adds	r3, #1
 8003ab0:	f003 021f 	and.w	r2, r3, #31
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	4413      	add	r3, r2
 8003aba:	3b1e      	subs	r3, #30
 8003abc:	051b      	lsls	r3, r3, #20
 8003abe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	e01b      	b.n	8003afc <HAL_ADC_ConfigChannel+0x6a8>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	fa93 f3a3 	rbit	r3, r3
 8003ad0:	613b      	str	r3, [r7, #16]
  return result;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003adc:	2320      	movs	r3, #32
 8003ade:	e003      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	fab3 f383 	clz	r3, r3
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	3301      	adds	r3, #1
 8003aea:	f003 021f 	and.w	r2, r3, #31
 8003aee:	4613      	mov	r3, r2
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	4413      	add	r3, r2
 8003af4:	3b1e      	subs	r3, #30
 8003af6:	051b      	lsls	r3, r3, #20
 8003af8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003afc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b02:	4619      	mov	r1, r3
 8003b04:	f7ff f8c5 	bl	8002c92 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <HAL_ADC_ConfigChannel+0x6e0>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80be 	beq.w	8003c92 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b1e:	d004      	beq.n	8003b2a <HAL_ADC_ConfigChannel+0x6d6>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a04      	ldr	r2, [pc, #16]	; (8003b38 <HAL_ADC_ConfigChannel+0x6e4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d10a      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x6ec>
 8003b2a:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <HAL_ADC_ConfigChannel+0x6e8>)
 8003b2c:	e009      	b.n	8003b42 <HAL_ADC_ConfigChannel+0x6ee>
 8003b2e:	bf00      	nop
 8003b30:	407f0000 	.word	0x407f0000
 8003b34:	80080000 	.word	0x80080000
 8003b38:	50000100 	.word	0x50000100
 8003b3c:	50000300 	.word	0x50000300
 8003b40:	4b59      	ldr	r3, [pc, #356]	; (8003ca8 <HAL_ADC_ConfigChannel+0x854>)
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fe ffba 	bl	8002abc <LL_ADC_GetCommonPathInternalCh>
 8003b48:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a56      	ldr	r2, [pc, #344]	; (8003cac <HAL_ADC_ConfigChannel+0x858>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d004      	beq.n	8003b60 <HAL_ADC_ConfigChannel+0x70c>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a55      	ldr	r2, [pc, #340]	; (8003cb0 <HAL_ADC_ConfigChannel+0x85c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d13a      	bne.n	8003bd6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d134      	bne.n	8003bd6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b74:	d005      	beq.n	8003b82 <HAL_ADC_ConfigChannel+0x72e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a4e      	ldr	r2, [pc, #312]	; (8003cb4 <HAL_ADC_ConfigChannel+0x860>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	f040 8085 	bne.w	8003c8c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b8a:	d004      	beq.n	8003b96 <HAL_ADC_ConfigChannel+0x742>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a49      	ldr	r2, [pc, #292]	; (8003cb8 <HAL_ADC_ConfigChannel+0x864>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d101      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x746>
 8003b96:	4a49      	ldr	r2, [pc, #292]	; (8003cbc <HAL_ADC_ConfigChannel+0x868>)
 8003b98:	e000      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x748>
 8003b9a:	4a43      	ldr	r2, [pc, #268]	; (8003ca8 <HAL_ADC_ConfigChannel+0x854>)
 8003b9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ba0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	f7fe ff75 	bl	8002a96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bac:	4b44      	ldr	r3, [pc, #272]	; (8003cc0 <HAL_ADC_ConfigChannel+0x86c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	099b      	lsrs	r3, r3, #6
 8003bb2:	4a44      	ldr	r2, [pc, #272]	; (8003cc4 <HAL_ADC_ConfigChannel+0x870>)
 8003bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb8:	099b      	lsrs	r3, r3, #6
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bc6:	e002      	b.n	8003bce <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1f9      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bd4:	e05a      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a3b      	ldr	r2, [pc, #236]	; (8003cc8 <HAL_ADC_ConfigChannel+0x874>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d125      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003be0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d11f      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a31      	ldr	r2, [pc, #196]	; (8003cb8 <HAL_ADC_ConfigChannel+0x864>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d104      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x7ac>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a34      	ldr	r2, [pc, #208]	; (8003ccc <HAL_ADC_ConfigChannel+0x878>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d047      	beq.n	8003c90 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c08:	d004      	beq.n	8003c14 <HAL_ADC_ConfigChannel+0x7c0>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a2a      	ldr	r2, [pc, #168]	; (8003cb8 <HAL_ADC_ConfigChannel+0x864>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d101      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x7c4>
 8003c14:	4a29      	ldr	r2, [pc, #164]	; (8003cbc <HAL_ADC_ConfigChannel+0x868>)
 8003c16:	e000      	b.n	8003c1a <HAL_ADC_ConfigChannel+0x7c6>
 8003c18:	4a23      	ldr	r2, [pc, #140]	; (8003ca8 <HAL_ADC_ConfigChannel+0x854>)
 8003c1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f7fe ff36 	bl	8002a96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c2a:	e031      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a27      	ldr	r2, [pc, #156]	; (8003cd0 <HAL_ADC_ConfigChannel+0x87c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d12d      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d127      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1c      	ldr	r2, [pc, #112]	; (8003cb8 <HAL_ADC_ConfigChannel+0x864>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d022      	beq.n	8003c92 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c54:	d004      	beq.n	8003c60 <HAL_ADC_ConfigChannel+0x80c>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a17      	ldr	r2, [pc, #92]	; (8003cb8 <HAL_ADC_ConfigChannel+0x864>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d101      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x810>
 8003c60:	4a16      	ldr	r2, [pc, #88]	; (8003cbc <HAL_ADC_ConfigChannel+0x868>)
 8003c62:	e000      	b.n	8003c66 <HAL_ADC_ConfigChannel+0x812>
 8003c64:	4a10      	ldr	r2, [pc, #64]	; (8003ca8 <HAL_ADC_ConfigChannel+0x854>)
 8003c66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4610      	mov	r0, r2
 8003c72:	f7fe ff10 	bl	8002a96 <LL_ADC_SetCommonPathInternalCh>
 8003c76:	e00c      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7c:	f043 0220 	orr.w	r2, r3, #32
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003c8a:	e002      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c8c:	bf00      	nop
 8003c8e:	e000      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c9a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	37d8      	adds	r7, #216	; 0xd8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	50000700 	.word	0x50000700
 8003cac:	c3210000 	.word	0xc3210000
 8003cb0:	90c00010 	.word	0x90c00010
 8003cb4:	50000600 	.word	0x50000600
 8003cb8:	50000100 	.word	0x50000100
 8003cbc:	50000300 	.word	0x50000300
 8003cc0:	20000004 	.word	0x20000004
 8003cc4:	053e2d63 	.word	0x053e2d63
 8003cc8:	c7520000 	.word	0xc7520000
 8003ccc:	50000500 	.word	0x50000500
 8003cd0:	cb840000 	.word	0xcb840000

08003cd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff f8a7 	bl	8002e38 <LL_ADC_IsEnabled>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d176      	bne.n	8003dde <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	4b3c      	ldr	r3, [pc, #240]	; (8003de8 <ADC_Enable+0x114>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00d      	beq.n	8003d1a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d02:	f043 0210 	orr.w	r2, r3, #16
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0e:	f043 0201 	orr.w	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e062      	b.n	8003de0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff f862 	bl	8002de8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d2c:	d004      	beq.n	8003d38 <ADC_Enable+0x64>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a2e      	ldr	r2, [pc, #184]	; (8003dec <ADC_Enable+0x118>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d101      	bne.n	8003d3c <ADC_Enable+0x68>
 8003d38:	4b2d      	ldr	r3, [pc, #180]	; (8003df0 <ADC_Enable+0x11c>)
 8003d3a:	e000      	b.n	8003d3e <ADC_Enable+0x6a>
 8003d3c:	4b2d      	ldr	r3, [pc, #180]	; (8003df4 <ADC_Enable+0x120>)
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe febc 	bl	8002abc <LL_ADC_GetCommonPathInternalCh>
 8003d44:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d013      	beq.n	8003d76 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d4e:	4b2a      	ldr	r3, [pc, #168]	; (8003df8 <ADC_Enable+0x124>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	099b      	lsrs	r3, r3, #6
 8003d54:	4a29      	ldr	r2, [pc, #164]	; (8003dfc <ADC_Enable+0x128>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	099b      	lsrs	r3, r3, #6
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	4613      	mov	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d68:	e002      	b.n	8003d70 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f9      	bne.n	8003d6a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d76:	f7fe fe4d 	bl	8002a14 <HAL_GetTick>
 8003d7a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d7c:	e028      	b.n	8003dd0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff f858 	bl	8002e38 <LL_ADC_IsEnabled>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d104      	bne.n	8003d98 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff f828 	bl	8002de8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d98:	f7fe fe3c 	bl	8002a14 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d914      	bls.n	8003dd0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d00d      	beq.n	8003dd0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db8:	f043 0210 	orr.w	r2, r3, #16
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc4:	f043 0201 	orr.w	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e007      	b.n	8003de0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d1cf      	bne.n	8003d7e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	8000003f 	.word	0x8000003f
 8003dec:	50000100 	.word	0x50000100
 8003df0:	50000300 	.word	0x50000300
 8003df4:	50000700 	.word	0x50000700
 8003df8:	20000004 	.word	0x20000004
 8003dfc:	053e2d63 	.word	0x053e2d63

08003e00 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff f826 	bl	8002e5e <LL_ADC_IsDisableOngoing>
 8003e12:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff f80d 	bl	8002e38 <LL_ADC_IsEnabled>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d047      	beq.n	8003eb4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d144      	bne.n	8003eb4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 030d 	and.w	r3, r3, #13
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d10c      	bne.n	8003e52 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fe ffe7 	bl	8002e10 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2203      	movs	r2, #3
 8003e48:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e4a:	f7fe fde3 	bl	8002a14 <HAL_GetTick>
 8003e4e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e50:	e029      	b.n	8003ea6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e56:	f043 0210 	orr.w	r2, r3, #16
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e62:	f043 0201 	orr.w	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e023      	b.n	8003eb6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e6e:	f7fe fdd1 	bl	8002a14 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d914      	bls.n	8003ea6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00d      	beq.n	8003ea6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8e:	f043 0210 	orr.w	r2, r3, #16
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9a:	f043 0201 	orr.w	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e007      	b.n	8003eb6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1dc      	bne.n	8003e6e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d14b      	bne.n	8003f70 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003edc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d021      	beq.n	8003f36 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe fe8c 	bl	8002c14 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d032      	beq.n	8003f68 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d12b      	bne.n	8003f68 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d11f      	bne.n	8003f68 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2c:	f043 0201 	orr.w	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f34:	e018      	b.n	8003f68 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d111      	bne.n	8003f68 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d105      	bne.n	8003f68 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f60:	f043 0201 	orr.w	r2, r3, #1
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f7ff fa55 	bl	8003418 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f6e:	e00e      	b.n	8003f8e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f7ff fa5f 	bl	8003440 <HAL_ADC_ErrorCallback>
}
 8003f82:	e004      	b.n	8003f8e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	4798      	blx	r3
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f7ff fa41 	bl	800342c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003faa:	bf00      	nop
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd0:	f043 0204 	orr.w	r2, r3, #4
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f7ff fa31 	bl	8003440 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <LL_ADC_IsEnabled>:
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <LL_ADC_IsEnabled+0x18>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <LL_ADC_IsEnabled+0x1a>
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <LL_ADC_StartCalibration>:
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800401e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004028:	4313      	orrs	r3, r2
 800402a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	609a      	str	r2, [r3, #8]
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <LL_ADC_IsCalibrationOnGoing>:
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800404e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004052:	d101      	bne.n	8004058 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <LL_ADC_REG_IsConversionOngoing>:
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b04      	cmp	r3, #4
 8004078:	d101      	bne.n	800407e <LL_ADC_REG_IsConversionOngoing+0x18>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_ADCEx_Calibration_Start+0x1c>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e04d      	b.n	8004144 <HAL_ADCEx_Calibration_Start+0xb8>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff fea5 	bl	8003e00 <ADC_Disable>
 80040b6:	4603      	mov	r3, r0
 80040b8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d136      	bne.n	800412e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040c8:	f023 0302 	bic.w	r3, r3, #2
 80040cc:	f043 0202 	orr.w	r2, r3, #2
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6839      	ldr	r1, [r7, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff ff96 	bl	800400c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80040e0:	e014      	b.n	800410c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	3301      	adds	r3, #1
 80040e6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4a18      	ldr	r2, [pc, #96]	; (800414c <HAL_ADCEx_Calibration_Start+0xc0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d90d      	bls.n	800410c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f4:	f023 0312 	bic.w	r3, r3, #18
 80040f8:	f043 0210 	orr.w	r2, r3, #16
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e01b      	b.n	8004144 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff ff94 	bl	800403e <LL_ADC_IsCalibrationOnGoing>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1e2      	bne.n	80040e2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004120:	f023 0303 	bic.w	r3, r3, #3
 8004124:	f043 0201 	orr.w	r2, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	65da      	str	r2, [r3, #92]	; 0x5c
 800412c:	e005      	b.n	800413a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004132:	f043 0210 	orr.w	r2, r3, #16
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004142:	7bfb      	ldrb	r3, [r7, #15]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	0004de01 	.word	0x0004de01

08004150 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b0a1      	sub	sp, #132	; 0x84
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800416a:	2302      	movs	r3, #2
 800416c:	e0e7      	b.n	800433e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004176:	2300      	movs	r3, #0
 8004178:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800417a:	2300      	movs	r3, #0
 800417c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004186:	d102      	bne.n	800418e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004188:	4b6f      	ldr	r3, [pc, #444]	; (8004348 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800418a:	60bb      	str	r3, [r7, #8]
 800418c:	e009      	b.n	80041a2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a6e      	ldr	r2, [pc, #440]	; (800434c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d102      	bne.n	800419e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004198:	4b6d      	ldr	r3, [pc, #436]	; (8004350 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	e001      	b.n	80041a2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800419e:	2300      	movs	r3, #0
 80041a0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10b      	bne.n	80041c0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ac:	f043 0220 	orr.w	r2, r3, #32
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0be      	b.n	800433e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff ff4f 	bl	8004066 <LL_ADC_REG_IsConversionOngoing>
 80041c8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff ff49 	bl	8004066 <LL_ADC_REG_IsConversionOngoing>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f040 80a0 	bne.w	800431c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80041dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f040 809c 	bne.w	800431c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041ec:	d004      	beq.n	80041f8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a55      	ldr	r2, [pc, #340]	; (8004348 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d101      	bne.n	80041fc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80041f8:	4b56      	ldr	r3, [pc, #344]	; (8004354 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80041fa:	e000      	b.n	80041fe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80041fc:	4b56      	ldr	r3, [pc, #344]	; (8004358 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80041fe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d04b      	beq.n	80042a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	6859      	ldr	r1, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800421a:	035b      	lsls	r3, r3, #13
 800421c:	430b      	orrs	r3, r1
 800421e:	431a      	orrs	r2, r3
 8004220:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004222:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800422c:	d004      	beq.n	8004238 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a45      	ldr	r2, [pc, #276]	; (8004348 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d10f      	bne.n	8004258 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004238:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800423c:	f7ff fed3 	bl	8003fe6 <LL_ADC_IsEnabled>
 8004240:	4604      	mov	r4, r0
 8004242:	4841      	ldr	r0, [pc, #260]	; (8004348 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004244:	f7ff fecf 	bl	8003fe6 <LL_ADC_IsEnabled>
 8004248:	4603      	mov	r3, r0
 800424a:	4323      	orrs	r3, r4
 800424c:	2b00      	cmp	r3, #0
 800424e:	bf0c      	ite	eq
 8004250:	2301      	moveq	r3, #1
 8004252:	2300      	movne	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	e012      	b.n	800427e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004258:	483c      	ldr	r0, [pc, #240]	; (800434c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800425a:	f7ff fec4 	bl	8003fe6 <LL_ADC_IsEnabled>
 800425e:	4604      	mov	r4, r0
 8004260:	483b      	ldr	r0, [pc, #236]	; (8004350 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004262:	f7ff fec0 	bl	8003fe6 <LL_ADC_IsEnabled>
 8004266:	4603      	mov	r3, r0
 8004268:	431c      	orrs	r4, r3
 800426a:	483c      	ldr	r0, [pc, #240]	; (800435c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800426c:	f7ff febb 	bl	8003fe6 <LL_ADC_IsEnabled>
 8004270:	4603      	mov	r3, r0
 8004272:	4323      	orrs	r3, r4
 8004274:	2b00      	cmp	r3, #0
 8004276:	bf0c      	ite	eq
 8004278:	2301      	moveq	r3, #1
 800427a:	2300      	movne	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d056      	beq.n	8004330 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800428a:	f023 030f 	bic.w	r3, r3, #15
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	6811      	ldr	r1, [r2, #0]
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	6892      	ldr	r2, [r2, #8]
 8004296:	430a      	orrs	r2, r1
 8004298:	431a      	orrs	r2, r3
 800429a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800429c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800429e:	e047      	b.n	8004330 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80042a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042aa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042b4:	d004      	beq.n	80042c0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a23      	ldr	r2, [pc, #140]	; (8004348 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d10f      	bne.n	80042e0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80042c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80042c4:	f7ff fe8f 	bl	8003fe6 <LL_ADC_IsEnabled>
 80042c8:	4604      	mov	r4, r0
 80042ca:	481f      	ldr	r0, [pc, #124]	; (8004348 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042cc:	f7ff fe8b 	bl	8003fe6 <LL_ADC_IsEnabled>
 80042d0:	4603      	mov	r3, r0
 80042d2:	4323      	orrs	r3, r4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	e012      	b.n	8004306 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80042e0:	481a      	ldr	r0, [pc, #104]	; (800434c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80042e2:	f7ff fe80 	bl	8003fe6 <LL_ADC_IsEnabled>
 80042e6:	4604      	mov	r4, r0
 80042e8:	4819      	ldr	r0, [pc, #100]	; (8004350 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80042ea:	f7ff fe7c 	bl	8003fe6 <LL_ADC_IsEnabled>
 80042ee:	4603      	mov	r3, r0
 80042f0:	431c      	orrs	r4, r3
 80042f2:	481a      	ldr	r0, [pc, #104]	; (800435c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80042f4:	f7ff fe77 	bl	8003fe6 <LL_ADC_IsEnabled>
 80042f8:	4603      	mov	r3, r0
 80042fa:	4323      	orrs	r3, r4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bf0c      	ite	eq
 8004300:	2301      	moveq	r3, #1
 8004302:	2300      	movne	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d012      	beq.n	8004330 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800430a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004312:	f023 030f 	bic.w	r3, r3, #15
 8004316:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004318:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800431a:	e009      	b.n	8004330 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004320:	f043 0220 	orr.w	r2, r3, #32
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800432e:	e000      	b.n	8004332 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004330:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800433a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800433e:	4618      	mov	r0, r3
 8004340:	3784      	adds	r7, #132	; 0x84
 8004342:	46bd      	mov	sp, r7
 8004344:	bd90      	pop	{r4, r7, pc}
 8004346:	bf00      	nop
 8004348:	50000100 	.word	0x50000100
 800434c:	50000400 	.word	0x50000400
 8004350:	50000500 	.word	0x50000500
 8004354:	50000300 	.word	0x50000300
 8004358:	50000700 	.word	0x50000700
 800435c:	50000600 	.word	0x50000600

08004360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800437c:	4013      	ands	r3, r2
 800437e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800438c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004392:	4a04      	ldr	r2, [pc, #16]	; (80043a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	60d3      	str	r3, [r2, #12]
}
 8004398:	bf00      	nop
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	e000ed00 	.word	0xe000ed00

080043a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043ac:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <__NVIC_GetPriorityGrouping+0x18>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	0a1b      	lsrs	r3, r3, #8
 80043b2:	f003 0307 	and.w	r3, r3, #7
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	e000ed00 	.word	0xe000ed00

080043c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	db0b      	blt.n	80043ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	f003 021f 	and.w	r2, r3, #31
 80043dc:	4907      	ldr	r1, [pc, #28]	; (80043fc <__NVIC_EnableIRQ+0x38>)
 80043de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	2001      	movs	r0, #1
 80043e6:	fa00 f202 	lsl.w	r2, r0, r2
 80043ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	e000e100 	.word	0xe000e100

08004400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	6039      	str	r1, [r7, #0]
 800440a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800440c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004410:	2b00      	cmp	r3, #0
 8004412:	db0a      	blt.n	800442a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	b2da      	uxtb	r2, r3
 8004418:	490c      	ldr	r1, [pc, #48]	; (800444c <__NVIC_SetPriority+0x4c>)
 800441a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441e:	0112      	lsls	r2, r2, #4
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	440b      	add	r3, r1
 8004424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004428:	e00a      	b.n	8004440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	4908      	ldr	r1, [pc, #32]	; (8004450 <__NVIC_SetPriority+0x50>)
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	3b04      	subs	r3, #4
 8004438:	0112      	lsls	r2, r2, #4
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	440b      	add	r3, r1
 800443e:	761a      	strb	r2, [r3, #24]
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	e000e100 	.word	0xe000e100
 8004450:	e000ed00 	.word	0xe000ed00

08004454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004454:	b480      	push	{r7}
 8004456:	b089      	sub	sp, #36	; 0x24
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f1c3 0307 	rsb	r3, r3, #7
 800446e:	2b04      	cmp	r3, #4
 8004470:	bf28      	it	cs
 8004472:	2304      	movcs	r3, #4
 8004474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	3304      	adds	r3, #4
 800447a:	2b06      	cmp	r3, #6
 800447c:	d902      	bls.n	8004484 <NVIC_EncodePriority+0x30>
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	3b03      	subs	r3, #3
 8004482:	e000      	b.n	8004486 <NVIC_EncodePriority+0x32>
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004488:	f04f 32ff 	mov.w	r2, #4294967295
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	43da      	mvns	r2, r3
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	401a      	ands	r2, r3
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800449c:	f04f 31ff 	mov.w	r1, #4294967295
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	fa01 f303 	lsl.w	r3, r1, r3
 80044a6:	43d9      	mvns	r1, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044ac:	4313      	orrs	r3, r2
         );
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3724      	adds	r7, #36	; 0x24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
	...

080044bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044cc:	d301      	bcc.n	80044d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044ce:	2301      	movs	r3, #1
 80044d0:	e00f      	b.n	80044f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044d2:	4a0a      	ldr	r2, [pc, #40]	; (80044fc <SysTick_Config+0x40>)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044da:	210f      	movs	r1, #15
 80044dc:	f04f 30ff 	mov.w	r0, #4294967295
 80044e0:	f7ff ff8e 	bl	8004400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <SysTick_Config+0x40>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044ea:	4b04      	ldr	r3, [pc, #16]	; (80044fc <SysTick_Config+0x40>)
 80044ec:	2207      	movs	r2, #7
 80044ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	e000e010 	.word	0xe000e010

08004500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff ff29 	bl	8004360 <__NVIC_SetPriorityGrouping>
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b086      	sub	sp, #24
 800451a:	af00      	add	r7, sp, #0
 800451c:	4603      	mov	r3, r0
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
 8004522:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004524:	f7ff ff40 	bl	80043a8 <__NVIC_GetPriorityGrouping>
 8004528:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	6978      	ldr	r0, [r7, #20]
 8004530:	f7ff ff90 	bl	8004454 <NVIC_EncodePriority>
 8004534:	4602      	mov	r2, r0
 8004536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800453a:	4611      	mov	r1, r2
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff ff5f 	bl	8004400 <__NVIC_SetPriority>
}
 8004542:	bf00      	nop
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b082      	sub	sp, #8
 800454e:	af00      	add	r7, sp, #0
 8004550:	4603      	mov	r3, r0
 8004552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff ff33 	bl	80043c4 <__NVIC_EnableIRQ>
}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff ffa4 	bl	80044bc <SysTick_Config>
 8004574:	4603      	mov	r3, r0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e08d      	b.n	80046ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	4b47      	ldr	r3, [pc, #284]	; (80046b8 <HAL_DMA_Init+0x138>)
 800459a:	429a      	cmp	r2, r3
 800459c:	d80f      	bhi.n	80045be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	4b45      	ldr	r3, [pc, #276]	; (80046bc <HAL_DMA_Init+0x13c>)
 80045a6:	4413      	add	r3, r2
 80045a8:	4a45      	ldr	r2, [pc, #276]	; (80046c0 <HAL_DMA_Init+0x140>)
 80045aa:	fba2 2303 	umull	r2, r3, r2, r3
 80045ae:	091b      	lsrs	r3, r3, #4
 80045b0:	009a      	lsls	r2, r3, #2
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a42      	ldr	r2, [pc, #264]	; (80046c4 <HAL_DMA_Init+0x144>)
 80045ba:	641a      	str	r2, [r3, #64]	; 0x40
 80045bc:	e00e      	b.n	80045dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	4b40      	ldr	r3, [pc, #256]	; (80046c8 <HAL_DMA_Init+0x148>)
 80045c6:	4413      	add	r3, r2
 80045c8:	4a3d      	ldr	r2, [pc, #244]	; (80046c0 <HAL_DMA_Init+0x140>)
 80045ca:	fba2 2303 	umull	r2, r3, r2, r3
 80045ce:	091b      	lsrs	r3, r3, #4
 80045d0:	009a      	lsls	r2, r3, #2
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a3c      	ldr	r2, [pc, #240]	; (80046cc <HAL_DMA_Init+0x14c>)
 80045da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80045f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800460c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fa76 	bl	8004b20 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800463c:	d102      	bne.n	8004644 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004658:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d010      	beq.n	8004684 <HAL_DMA_Init+0x104>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b04      	cmp	r3, #4
 8004668:	d80c      	bhi.n	8004684 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fa96 	bl	8004b9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	e008      	b.n	8004696 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40020407 	.word	0x40020407
 80046bc:	bffdfff8 	.word	0xbffdfff8
 80046c0:	cccccccd 	.word	0xcccccccd
 80046c4:	40020000 	.word	0x40020000
 80046c8:	bffdfbf8 	.word	0xbffdfbf8
 80046cc:	40020400 	.word	0x40020400

080046d0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_DMA_Start_IT+0x20>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e066      	b.n	80047be <HAL_DMA_Start_IT+0xee>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b01      	cmp	r3, #1
 8004702:	d155      	bne.n	80047b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0201 	bic.w	r2, r2, #1
 8004720:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	68b9      	ldr	r1, [r7, #8]
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 f9bb 	bl	8004aa4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	2b00      	cmp	r3, #0
 8004734:	d008      	beq.n	8004748 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 020e 	orr.w	r2, r2, #14
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	e00f      	b.n	8004768 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0204 	bic.w	r2, r2, #4
 8004756:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 020a 	orr.w	r2, r2, #10
 8004766:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d007      	beq.n	8004786 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004784:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478a:	2b00      	cmp	r3, #0
 800478c:	d007      	beq.n	800479e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800479c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0201 	orr.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	e005      	b.n	80047bc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80047b8:	2302      	movs	r3, #2
 80047ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80047bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d005      	beq.n	80047ea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2204      	movs	r2, #4
 80047e2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
 80047e8:	e037      	b.n	800485a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 020e 	bic.w	r2, r2, #14
 80047f8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004804:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004808:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0201 	bic.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	f003 021f 	and.w	r2, r3, #31
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	2101      	movs	r1, #1
 8004828:	fa01 f202 	lsl.w	r2, r1, r2
 800482c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004836:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00c      	beq.n	800485a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800484e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004858:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800486a:	7bfb      	ldrb	r3, [r7, #15]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004880:	2300      	movs	r3, #0
 8004882:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d00d      	beq.n	80048ac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2204      	movs	r2, #4
 8004894:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	73fb      	strb	r3, [r7, #15]
 80048aa:	e047      	b.n	800493c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 020e 	bic.w	r2, r2, #14
 80048ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0201 	bic.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e0:	f003 021f 	and.w	r2, r3, #31
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	2101      	movs	r1, #1
 80048ea:	fa01 f202 	lsl.w	r2, r1, r2
 80048ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80048f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00c      	beq.n	800491c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004910:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800491a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	4798      	blx	r3
    }
  }
  return status;
 800493c:	7bfb      	ldrb	r3, [r7, #15]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	f003 031f 	and.w	r3, r3, #31
 8004966:	2204      	movs	r2, #4
 8004968:	409a      	lsls	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4013      	ands	r3, r2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d026      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x7a>
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d021      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0320 	and.w	r3, r3, #32
 8004986:	2b00      	cmp	r3, #0
 8004988:	d107      	bne.n	800499a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0204 	bic.w	r2, r2, #4
 8004998:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	f003 021f 	and.w	r2, r3, #31
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	2104      	movs	r1, #4
 80049a8:	fa01 f202 	lsl.w	r2, r1, r2
 80049ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d071      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80049be:	e06c      	b.n	8004a9a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	2202      	movs	r2, #2
 80049ca:	409a      	lsls	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4013      	ands	r3, r2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d02e      	beq.n	8004a32 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d029      	beq.n	8004a32 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0320 	and.w	r3, r3, #32
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10b      	bne.n	8004a04 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 020a 	bic.w	r2, r2, #10
 80049fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a08:	f003 021f 	and.w	r2, r3, #31
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	2102      	movs	r1, #2
 8004a12:	fa01 f202 	lsl.w	r2, r1, r2
 8004a16:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d038      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004a30:	e033      	b.n	8004a9a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	2208      	movs	r2, #8
 8004a3c:	409a      	lsls	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4013      	ands	r3, r2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d02a      	beq.n	8004a9c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f003 0308 	and.w	r3, r3, #8
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d025      	beq.n	8004a9c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 020e 	bic.w	r2, r2, #14
 8004a5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a64:	f003 021f 	and.w	r2, r3, #31
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d004      	beq.n	8004a9c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a9a:	bf00      	nop
 8004a9c:	bf00      	nop
}
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004aba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d004      	beq.n	8004ace <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004acc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad2:	f003 021f 	and.w	r2, r3, #31
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	2101      	movs	r1, #1
 8004adc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	2b10      	cmp	r3, #16
 8004af0:	d108      	bne.n	8004b04 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b02:	e007      	b.n	8004b14 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	60da      	str	r2, [r3, #12]
}
 8004b14:	bf00      	nop
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4b16      	ldr	r3, [pc, #88]	; (8004b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d802      	bhi.n	8004b3a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004b34:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	e001      	b.n	8004b3e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004b3a:	4b15      	ldr	r3, [pc, #84]	; (8004b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004b3c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	3b08      	subs	r3, #8
 8004b4a:	4a12      	ldr	r2, [pc, #72]	; (8004b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b50:	091b      	lsrs	r3, r3, #4
 8004b52:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b58:	089b      	lsrs	r3, r3, #2
 8004b5a:	009a      	lsls	r2, r3, #2
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	4413      	add	r3, r2
 8004b60:	461a      	mov	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a0b      	ldr	r2, [pc, #44]	; (8004b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004b6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 031f 	and.w	r3, r3, #31
 8004b72:	2201      	movs	r2, #1
 8004b74:	409a      	lsls	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b7a:	bf00      	nop
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40020407 	.word	0x40020407
 8004b8c:	40020800 	.word	0x40020800
 8004b90:	40020820 	.word	0x40020820
 8004b94:	cccccccd 	.word	0xcccccccd
 8004b98:	40020880 	.word	0x40020880

08004b9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a08      	ldr	r2, [pc, #32]	; (8004be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004bbe:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	2201      	movs	r2, #1
 8004bca:	409a      	lsls	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004bd0:	bf00      	nop
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	1000823f 	.word	0x1000823f
 8004be0:	40020940 	.word	0x40020940

08004be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004bf2:	e15a      	b.n	8004eaa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004c00:	4013      	ands	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 814c 	beq.w	8004ea4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d005      	beq.n	8004c24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d130      	bne.n	8004c86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	2203      	movs	r2, #3
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	43db      	mvns	r3, r3
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	43db      	mvns	r3, r3
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4013      	ands	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	091b      	lsrs	r3, r3, #4
 8004c70:	f003 0201 	and.w	r2, r3, #1
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	d017      	beq.n	8004cc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	2203      	movs	r2, #3
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d123      	bne.n	8004d16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	08da      	lsrs	r2, r3, #3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3208      	adds	r2, #8
 8004cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	220f      	movs	r2, #15
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	43db      	mvns	r3, r3
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	691a      	ldr	r2, [r3, #16]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	08da      	lsrs	r2, r3, #3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3208      	adds	r2, #8
 8004d10:	6939      	ldr	r1, [r7, #16]
 8004d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	2203      	movs	r2, #3
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	43db      	mvns	r3, r3
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f003 0203 	and.w	r2, r3, #3
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 80a6 	beq.w	8004ea4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d58:	4b5b      	ldr	r3, [pc, #364]	; (8004ec8 <HAL_GPIO_Init+0x2e4>)
 8004d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5c:	4a5a      	ldr	r2, [pc, #360]	; (8004ec8 <HAL_GPIO_Init+0x2e4>)
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	6613      	str	r3, [r2, #96]	; 0x60
 8004d64:	4b58      	ldr	r3, [pc, #352]	; (8004ec8 <HAL_GPIO_Init+0x2e4>)
 8004d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d70:	4a56      	ldr	r2, [pc, #344]	; (8004ecc <HAL_GPIO_Init+0x2e8>)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	089b      	lsrs	r3, r3, #2
 8004d76:	3302      	adds	r3, #2
 8004d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	220f      	movs	r2, #15
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4013      	ands	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d9a:	d01f      	beq.n	8004ddc <HAL_GPIO_Init+0x1f8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a4c      	ldr	r2, [pc, #304]	; (8004ed0 <HAL_GPIO_Init+0x2ec>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d019      	beq.n	8004dd8 <HAL_GPIO_Init+0x1f4>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a4b      	ldr	r2, [pc, #300]	; (8004ed4 <HAL_GPIO_Init+0x2f0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d013      	beq.n	8004dd4 <HAL_GPIO_Init+0x1f0>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a4a      	ldr	r2, [pc, #296]	; (8004ed8 <HAL_GPIO_Init+0x2f4>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00d      	beq.n	8004dd0 <HAL_GPIO_Init+0x1ec>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a49      	ldr	r2, [pc, #292]	; (8004edc <HAL_GPIO_Init+0x2f8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d007      	beq.n	8004dcc <HAL_GPIO_Init+0x1e8>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a48      	ldr	r2, [pc, #288]	; (8004ee0 <HAL_GPIO_Init+0x2fc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d101      	bne.n	8004dc8 <HAL_GPIO_Init+0x1e4>
 8004dc4:	2305      	movs	r3, #5
 8004dc6:	e00a      	b.n	8004dde <HAL_GPIO_Init+0x1fa>
 8004dc8:	2306      	movs	r3, #6
 8004dca:	e008      	b.n	8004dde <HAL_GPIO_Init+0x1fa>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	e006      	b.n	8004dde <HAL_GPIO_Init+0x1fa>
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e004      	b.n	8004dde <HAL_GPIO_Init+0x1fa>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e002      	b.n	8004dde <HAL_GPIO_Init+0x1fa>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e000      	b.n	8004dde <HAL_GPIO_Init+0x1fa>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	f002 0203 	and.w	r2, r2, #3
 8004de4:	0092      	lsls	r2, r2, #2
 8004de6:	4093      	lsls	r3, r2
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dee:	4937      	ldr	r1, [pc, #220]	; (8004ecc <HAL_GPIO_Init+0x2e8>)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	089b      	lsrs	r3, r3, #2
 8004df4:	3302      	adds	r3, #2
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004dfc:	4b39      	ldr	r3, [pc, #228]	; (8004ee4 <HAL_GPIO_Init+0x300>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	43db      	mvns	r3, r3
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e20:	4a30      	ldr	r2, [pc, #192]	; (8004ee4 <HAL_GPIO_Init+0x300>)
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e26:	4b2f      	ldr	r3, [pc, #188]	; (8004ee4 <HAL_GPIO_Init+0x300>)
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4013      	ands	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e4a:	4a26      	ldr	r2, [pc, #152]	; (8004ee4 <HAL_GPIO_Init+0x300>)
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004e50:	4b24      	ldr	r3, [pc, #144]	; (8004ee4 <HAL_GPIO_Init+0x300>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e74:	4a1b      	ldr	r2, [pc, #108]	; (8004ee4 <HAL_GPIO_Init+0x300>)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e7a:	4b1a      	ldr	r3, [pc, #104]	; (8004ee4 <HAL_GPIO_Init+0x300>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	43db      	mvns	r3, r3
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4013      	ands	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e9e:	4a11      	ldr	r2, [pc, #68]	; (8004ee4 <HAL_GPIO_Init+0x300>)
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f47f ae9d 	bne.w	8004bf4 <HAL_GPIO_Init+0x10>
  }
}
 8004eba:	bf00      	nop
 8004ebc:	bf00      	nop
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	40010000 	.word	0x40010000
 8004ed0:	48000400 	.word	0x48000400
 8004ed4:	48000800 	.word	0x48000800
 8004ed8:	48000c00 	.word	0x48000c00
 8004edc:	48001000 	.word	0x48001000
 8004ee0:	48001400 	.word	0x48001400
 8004ee4:	40010400 	.word	0x40010400

08004ee8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	887b      	ldrh	r3, [r7, #2]
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f00:	2301      	movs	r3, #1
 8004f02:	73fb      	strb	r3, [r7, #15]
 8004f04:	e001      	b.n	8004f0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f06:	2300      	movs	r3, #0
 8004f08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	807b      	strh	r3, [r7, #2]
 8004f24:	4613      	mov	r3, r2
 8004f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f28:	787b      	ldrb	r3, [r7, #1]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f2e:	887a      	ldrh	r2, [r7, #2]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f34:	e002      	b.n	8004f3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f36:	887a      	ldrh	r2, [r7, #2]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f5a:	887a      	ldrh	r2, [r7, #2]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	041a      	lsls	r2, r3, #16
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	43d9      	mvns	r1, r3
 8004f66:	887b      	ldrh	r3, [r7, #2]
 8004f68:	400b      	ands	r3, r1
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	619a      	str	r2, [r3, #24]
}
 8004f70:	bf00      	nop
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f86:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d006      	beq.n	8004fa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f92:	4a05      	ldr	r2, [pc, #20]	; (8004fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f94:	88fb      	ldrh	r3, [r7, #6]
 8004f96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f98:	88fb      	ldrh	r3, [r7, #6]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 f806 	bl	8004fac <HAL_GPIO_EXTI_Callback>
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40010400 	.word	0x40010400

08004fac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
	...

08004fc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d141      	bne.n	8005056 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fd2:	4b4b      	ldr	r3, [pc, #300]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fde:	d131      	bne.n	8005044 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fe0:	4b47      	ldr	r3, [pc, #284]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fe6:	4a46      	ldr	r2, [pc, #280]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ff0:	4b43      	ldr	r3, [pc, #268]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ff8:	4a41      	ldr	r2, [pc, #260]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ffe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005000:	4b40      	ldr	r3, [pc, #256]	; (8005104 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2232      	movs	r2, #50	; 0x32
 8005006:	fb02 f303 	mul.w	r3, r2, r3
 800500a:	4a3f      	ldr	r2, [pc, #252]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800500c:	fba2 2303 	umull	r2, r3, r2, r3
 8005010:	0c9b      	lsrs	r3, r3, #18
 8005012:	3301      	adds	r3, #1
 8005014:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005016:	e002      	b.n	800501e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	3b01      	subs	r3, #1
 800501c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800501e:	4b38      	ldr	r3, [pc, #224]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800502a:	d102      	bne.n	8005032 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f2      	bne.n	8005018 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005032:	4b33      	ldr	r3, [pc, #204]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800503a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800503e:	d158      	bne.n	80050f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e057      	b.n	80050f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005044:	4b2e      	ldr	r3, [pc, #184]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800504a:	4a2d      	ldr	r2, [pc, #180]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800504c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005050:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005054:	e04d      	b.n	80050f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800505c:	d141      	bne.n	80050e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800505e:	4b28      	ldr	r3, [pc, #160]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506a:	d131      	bne.n	80050d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800506c:	4b24      	ldr	r3, [pc, #144]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800506e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005072:	4a23      	ldr	r2, [pc, #140]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005078:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800507c:	4b20      	ldr	r3, [pc, #128]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005084:	4a1e      	ldr	r2, [pc, #120]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800508a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800508c:	4b1d      	ldr	r3, [pc, #116]	; (8005104 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2232      	movs	r2, #50	; 0x32
 8005092:	fb02 f303 	mul.w	r3, r2, r3
 8005096:	4a1c      	ldr	r2, [pc, #112]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005098:	fba2 2303 	umull	r2, r3, r2, r3
 800509c:	0c9b      	lsrs	r3, r3, #18
 800509e:	3301      	adds	r3, #1
 80050a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050a2:	e002      	b.n	80050aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050aa:	4b15      	ldr	r3, [pc, #84]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b6:	d102      	bne.n	80050be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f2      	bne.n	80050a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050be:	4b10      	ldr	r3, [pc, #64]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ca:	d112      	bne.n	80050f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e011      	b.n	80050f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050d0:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050d6:	4a0a      	ldr	r2, [pc, #40]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80050e0:	e007      	b.n	80050f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050e2:	4b07      	ldr	r3, [pc, #28]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050ea:	4a05      	ldr	r2, [pc, #20]	; (8005100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	40007000 	.word	0x40007000
 8005104:	20000004 	.word	0x20000004
 8005108:	431bde83 	.word	0x431bde83

0800510c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005110:	4b05      	ldr	r3, [pc, #20]	; (8005128 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	4a04      	ldr	r2, [pc, #16]	; (8005128 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800511a:	6093      	str	r3, [r2, #8]
}
 800511c:	bf00      	nop
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40007000 	.word	0x40007000

0800512c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e2fe      	b.n	800573c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d075      	beq.n	8005236 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800514a:	4b97      	ldr	r3, [pc, #604]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 030c 	and.w	r3, r3, #12
 8005152:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005154:	4b94      	ldr	r3, [pc, #592]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f003 0303 	and.w	r3, r3, #3
 800515c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b0c      	cmp	r3, #12
 8005162:	d102      	bne.n	800516a <HAL_RCC_OscConfig+0x3e>
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b03      	cmp	r3, #3
 8005168:	d002      	beq.n	8005170 <HAL_RCC_OscConfig+0x44>
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b08      	cmp	r3, #8
 800516e:	d10b      	bne.n	8005188 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005170:	4b8d      	ldr	r3, [pc, #564]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d05b      	beq.n	8005234 <HAL_RCC_OscConfig+0x108>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d157      	bne.n	8005234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e2d9      	b.n	800573c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005190:	d106      	bne.n	80051a0 <HAL_RCC_OscConfig+0x74>
 8005192:	4b85      	ldr	r3, [pc, #532]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a84      	ldr	r2, [pc, #528]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 8005198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	e01d      	b.n	80051dc <HAL_RCC_OscConfig+0xb0>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051a8:	d10c      	bne.n	80051c4 <HAL_RCC_OscConfig+0x98>
 80051aa:	4b7f      	ldr	r3, [pc, #508]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a7e      	ldr	r2, [pc, #504]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 80051b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	4b7c      	ldr	r3, [pc, #496]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a7b      	ldr	r2, [pc, #492]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 80051bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	e00b      	b.n	80051dc <HAL_RCC_OscConfig+0xb0>
 80051c4:	4b78      	ldr	r3, [pc, #480]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a77      	ldr	r2, [pc, #476]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 80051ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	4b75      	ldr	r3, [pc, #468]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a74      	ldr	r2, [pc, #464]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 80051d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d013      	beq.n	800520c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e4:	f7fd fc16 	bl	8002a14 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051ec:	f7fd fc12 	bl	8002a14 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b64      	cmp	r3, #100	; 0x64
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e29e      	b.n	800573c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051fe:	4b6a      	ldr	r3, [pc, #424]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0f0      	beq.n	80051ec <HAL_RCC_OscConfig+0xc0>
 800520a:	e014      	b.n	8005236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fd fc02 	bl	8002a14 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005214:	f7fd fbfe 	bl	8002a14 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b64      	cmp	r3, #100	; 0x64
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e28a      	b.n	800573c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005226:	4b60      	ldr	r3, [pc, #384]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0xe8>
 8005232:	e000      	b.n	8005236 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d075      	beq.n	800532e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005242:	4b59      	ldr	r3, [pc, #356]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 030c 	and.w	r3, r3, #12
 800524a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800524c:	4b56      	ldr	r3, [pc, #344]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	2b0c      	cmp	r3, #12
 800525a:	d102      	bne.n	8005262 <HAL_RCC_OscConfig+0x136>
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2b02      	cmp	r3, #2
 8005260:	d002      	beq.n	8005268 <HAL_RCC_OscConfig+0x13c>
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	2b04      	cmp	r3, #4
 8005266:	d11f      	bne.n	80052a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005268:	4b4f      	ldr	r3, [pc, #316]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005270:	2b00      	cmp	r3, #0
 8005272:	d005      	beq.n	8005280 <HAL_RCC_OscConfig+0x154>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e25d      	b.n	800573c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005280:	4b49      	ldr	r3, [pc, #292]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	061b      	lsls	r3, r3, #24
 800528e:	4946      	ldr	r1, [pc, #280]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 8005290:	4313      	orrs	r3, r2
 8005292:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005294:	4b45      	ldr	r3, [pc, #276]	; (80053ac <HAL_RCC_OscConfig+0x280>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	f7fd fb6f 	bl	800297c <HAL_InitTick>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d043      	beq.n	800532c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e249      	b.n	800573c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d023      	beq.n	80052f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052b0:	4b3d      	ldr	r3, [pc, #244]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a3c      	ldr	r2, [pc, #240]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 80052b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052bc:	f7fd fbaa 	bl	8002a14 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052c4:	f7fd fba6 	bl	8002a14 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e232      	b.n	800573c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052d6:	4b34      	ldr	r3, [pc, #208]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e2:	4b31      	ldr	r3, [pc, #196]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	061b      	lsls	r3, r3, #24
 80052f0:	492d      	ldr	r1, [pc, #180]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	604b      	str	r3, [r1, #4]
 80052f6:	e01a      	b.n	800532e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052f8:	4b2b      	ldr	r3, [pc, #172]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a2a      	ldr	r2, [pc, #168]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 80052fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005304:	f7fd fb86 	bl	8002a14 <HAL_GetTick>
 8005308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800530c:	f7fd fb82 	bl	8002a14 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e20e      	b.n	800573c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800531e:	4b22      	ldr	r3, [pc, #136]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1f0      	bne.n	800530c <HAL_RCC_OscConfig+0x1e0>
 800532a:	e000      	b.n	800532e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800532c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d041      	beq.n	80053be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d01c      	beq.n	800537c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005342:	4b19      	ldr	r3, [pc, #100]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 8005344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005348:	4a17      	ldr	r2, [pc, #92]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 800534a:	f043 0301 	orr.w	r3, r3, #1
 800534e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005352:	f7fd fb5f 	bl	8002a14 <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800535a:	f7fd fb5b 	bl	8002a14 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e1e7      	b.n	800573c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800536c:	4b0e      	ldr	r3, [pc, #56]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 800536e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0ef      	beq.n	800535a <HAL_RCC_OscConfig+0x22e>
 800537a:	e020      	b.n	80053be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800537c:	4b0a      	ldr	r3, [pc, #40]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 800537e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005382:	4a09      	ldr	r2, [pc, #36]	; (80053a8 <HAL_RCC_OscConfig+0x27c>)
 8005384:	f023 0301 	bic.w	r3, r3, #1
 8005388:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800538c:	f7fd fb42 	bl	8002a14 <HAL_GetTick>
 8005390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005392:	e00d      	b.n	80053b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005394:	f7fd fb3e 	bl	8002a14 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d906      	bls.n	80053b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e1ca      	b.n	800573c <HAL_RCC_OscConfig+0x610>
 80053a6:	bf00      	nop
 80053a8:	40021000 	.word	0x40021000
 80053ac:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053b0:	4b8c      	ldr	r3, [pc, #560]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 80053b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1ea      	bne.n	8005394 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 80a6 	beq.w	8005518 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053cc:	2300      	movs	r3, #0
 80053ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053d0:	4b84      	ldr	r3, [pc, #528]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 80053d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <HAL_RCC_OscConfig+0x2b4>
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <HAL_RCC_OscConfig+0x2b6>
 80053e0:	2300      	movs	r3, #0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00d      	beq.n	8005402 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053e6:	4b7f      	ldr	r3, [pc, #508]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 80053e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ea:	4a7e      	ldr	r2, [pc, #504]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 80053ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f0:	6593      	str	r3, [r2, #88]	; 0x58
 80053f2:	4b7c      	ldr	r3, [pc, #496]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 80053f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053fe:	2301      	movs	r3, #1
 8005400:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005402:	4b79      	ldr	r3, [pc, #484]	; (80055e8 <HAL_RCC_OscConfig+0x4bc>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540a:	2b00      	cmp	r3, #0
 800540c:	d118      	bne.n	8005440 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800540e:	4b76      	ldr	r3, [pc, #472]	; (80055e8 <HAL_RCC_OscConfig+0x4bc>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a75      	ldr	r2, [pc, #468]	; (80055e8 <HAL_RCC_OscConfig+0x4bc>)
 8005414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800541a:	f7fd fafb 	bl	8002a14 <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005422:	f7fd faf7 	bl	8002a14 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e183      	b.n	800573c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005434:	4b6c      	ldr	r3, [pc, #432]	; (80055e8 <HAL_RCC_OscConfig+0x4bc>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f0      	beq.n	8005422 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d108      	bne.n	800545a <HAL_RCC_OscConfig+0x32e>
 8005448:	4b66      	ldr	r3, [pc, #408]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 800544a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544e:	4a65      	ldr	r2, [pc, #404]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 8005450:	f043 0301 	orr.w	r3, r3, #1
 8005454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005458:	e024      	b.n	80054a4 <HAL_RCC_OscConfig+0x378>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	2b05      	cmp	r3, #5
 8005460:	d110      	bne.n	8005484 <HAL_RCC_OscConfig+0x358>
 8005462:	4b60      	ldr	r3, [pc, #384]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 8005464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005468:	4a5e      	ldr	r2, [pc, #376]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 800546a:	f043 0304 	orr.w	r3, r3, #4
 800546e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005472:	4b5c      	ldr	r3, [pc, #368]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 8005474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005478:	4a5a      	ldr	r2, [pc, #360]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005482:	e00f      	b.n	80054a4 <HAL_RCC_OscConfig+0x378>
 8005484:	4b57      	ldr	r3, [pc, #348]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 8005486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548a:	4a56      	ldr	r2, [pc, #344]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 800548c:	f023 0301 	bic.w	r3, r3, #1
 8005490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005494:	4b53      	ldr	r3, [pc, #332]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549a:	4a52      	ldr	r2, [pc, #328]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 800549c:	f023 0304 	bic.w	r3, r3, #4
 80054a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d016      	beq.n	80054da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ac:	f7fd fab2 	bl	8002a14 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054b2:	e00a      	b.n	80054ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b4:	f7fd faae 	bl	8002a14 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e138      	b.n	800573c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054ca:	4b46      	ldr	r3, [pc, #280]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 80054cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0ed      	beq.n	80054b4 <HAL_RCC_OscConfig+0x388>
 80054d8:	e015      	b.n	8005506 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054da:	f7fd fa9b 	bl	8002a14 <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054e0:	e00a      	b.n	80054f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e2:	f7fd fa97 	bl	8002a14 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e121      	b.n	800573c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054f8:	4b3a      	ldr	r3, [pc, #232]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 80054fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1ed      	bne.n	80054e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005506:	7ffb      	ldrb	r3, [r7, #31]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d105      	bne.n	8005518 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800550c:	4b35      	ldr	r3, [pc, #212]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 800550e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005510:	4a34      	ldr	r2, [pc, #208]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 8005512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005516:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b00      	cmp	r3, #0
 8005522:	d03c      	beq.n	800559e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01c      	beq.n	8005566 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800552c:	4b2d      	ldr	r3, [pc, #180]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 800552e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005532:	4a2c      	ldr	r2, [pc, #176]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 8005534:	f043 0301 	orr.w	r3, r3, #1
 8005538:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553c:	f7fd fa6a 	bl	8002a14 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005544:	f7fd fa66 	bl	8002a14 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e0f2      	b.n	800573c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005556:	4b23      	ldr	r3, [pc, #140]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 8005558:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0ef      	beq.n	8005544 <HAL_RCC_OscConfig+0x418>
 8005564:	e01b      	b.n	800559e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005566:	4b1f      	ldr	r3, [pc, #124]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 8005568:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800556c:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 800556e:	f023 0301 	bic.w	r3, r3, #1
 8005572:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005576:	f7fd fa4d 	bl	8002a14 <HAL_GetTick>
 800557a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800557e:	f7fd fa49 	bl	8002a14 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e0d5      	b.n	800573c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005590:	4b14      	ldr	r3, [pc, #80]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 8005592:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1ef      	bne.n	800557e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 80c9 	beq.w	800573a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055a8:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 030c 	and.w	r3, r3, #12
 80055b0:	2b0c      	cmp	r3, #12
 80055b2:	f000 8083 	beq.w	80056bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d15e      	bne.n	800567c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055be:	4b09      	ldr	r3, [pc, #36]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a08      	ldr	r2, [pc, #32]	; (80055e4 <HAL_RCC_OscConfig+0x4b8>)
 80055c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ca:	f7fd fa23 	bl	8002a14 <HAL_GetTick>
 80055ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055d0:	e00c      	b.n	80055ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d2:	f7fd fa1f 	bl	8002a14 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d905      	bls.n	80055ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e0ab      	b.n	800573c <HAL_RCC_OscConfig+0x610>
 80055e4:	40021000 	.word	0x40021000
 80055e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055ec:	4b55      	ldr	r3, [pc, #340]	; (8005744 <HAL_RCC_OscConfig+0x618>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1ec      	bne.n	80055d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055f8:	4b52      	ldr	r3, [pc, #328]	; (8005744 <HAL_RCC_OscConfig+0x618>)
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	4b52      	ldr	r3, [pc, #328]	; (8005748 <HAL_RCC_OscConfig+0x61c>)
 80055fe:	4013      	ands	r3, r2
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6a11      	ldr	r1, [r2, #32]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005608:	3a01      	subs	r2, #1
 800560a:	0112      	lsls	r2, r2, #4
 800560c:	4311      	orrs	r1, r2
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005612:	0212      	lsls	r2, r2, #8
 8005614:	4311      	orrs	r1, r2
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800561a:	0852      	lsrs	r2, r2, #1
 800561c:	3a01      	subs	r2, #1
 800561e:	0552      	lsls	r2, r2, #21
 8005620:	4311      	orrs	r1, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005626:	0852      	lsrs	r2, r2, #1
 8005628:	3a01      	subs	r2, #1
 800562a:	0652      	lsls	r2, r2, #25
 800562c:	4311      	orrs	r1, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005632:	06d2      	lsls	r2, r2, #27
 8005634:	430a      	orrs	r2, r1
 8005636:	4943      	ldr	r1, [pc, #268]	; (8005744 <HAL_RCC_OscConfig+0x618>)
 8005638:	4313      	orrs	r3, r2
 800563a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800563c:	4b41      	ldr	r3, [pc, #260]	; (8005744 <HAL_RCC_OscConfig+0x618>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a40      	ldr	r2, [pc, #256]	; (8005744 <HAL_RCC_OscConfig+0x618>)
 8005642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005646:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005648:	4b3e      	ldr	r3, [pc, #248]	; (8005744 <HAL_RCC_OscConfig+0x618>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	4a3d      	ldr	r2, [pc, #244]	; (8005744 <HAL_RCC_OscConfig+0x618>)
 800564e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005652:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005654:	f7fd f9de 	bl	8002a14 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800565c:	f7fd f9da 	bl	8002a14 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e066      	b.n	800573c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800566e:	4b35      	ldr	r3, [pc, #212]	; (8005744 <HAL_RCC_OscConfig+0x618>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCC_OscConfig+0x530>
 800567a:	e05e      	b.n	800573a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800567c:	4b31      	ldr	r3, [pc, #196]	; (8005744 <HAL_RCC_OscConfig+0x618>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a30      	ldr	r2, [pc, #192]	; (8005744 <HAL_RCC_OscConfig+0x618>)
 8005682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005688:	f7fd f9c4 	bl	8002a14 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005690:	f7fd f9c0 	bl	8002a14 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e04c      	b.n	800573c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056a2:	4b28      	ldr	r3, [pc, #160]	; (8005744 <HAL_RCC_OscConfig+0x618>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f0      	bne.n	8005690 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80056ae:	4b25      	ldr	r3, [pc, #148]	; (8005744 <HAL_RCC_OscConfig+0x618>)
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	4924      	ldr	r1, [pc, #144]	; (8005744 <HAL_RCC_OscConfig+0x618>)
 80056b4:	4b25      	ldr	r3, [pc, #148]	; (800574c <HAL_RCC_OscConfig+0x620>)
 80056b6:	4013      	ands	r3, r2
 80056b8:	60cb      	str	r3, [r1, #12]
 80056ba:	e03e      	b.n	800573a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e039      	b.n	800573c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80056c8:	4b1e      	ldr	r3, [pc, #120]	; (8005744 <HAL_RCC_OscConfig+0x618>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f003 0203 	and.w	r2, r3, #3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d12c      	bne.n	8005736 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	3b01      	subs	r3, #1
 80056e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d123      	bne.n	8005736 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d11b      	bne.n	8005736 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800570a:	429a      	cmp	r2, r3
 800570c:	d113      	bne.n	8005736 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	085b      	lsrs	r3, r3, #1
 800571a:	3b01      	subs	r3, #1
 800571c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800571e:	429a      	cmp	r2, r3
 8005720:	d109      	bne.n	8005736 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572c:	085b      	lsrs	r3, r3, #1
 800572e:	3b01      	subs	r3, #1
 8005730:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005732:	429a      	cmp	r2, r3
 8005734:	d001      	beq.n	800573a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e000      	b.n	800573c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3720      	adds	r7, #32
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40021000 	.word	0x40021000
 8005748:	019f800c 	.word	0x019f800c
 800574c:	feeefffc 	.word	0xfeeefffc

08005750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800575a:	2300      	movs	r3, #0
 800575c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e11e      	b.n	80059a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005768:	4b91      	ldr	r3, [pc, #580]	; (80059b0 <HAL_RCC_ClockConfig+0x260>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d910      	bls.n	8005798 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005776:	4b8e      	ldr	r3, [pc, #568]	; (80059b0 <HAL_RCC_ClockConfig+0x260>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f023 020f 	bic.w	r2, r3, #15
 800577e:	498c      	ldr	r1, [pc, #560]	; (80059b0 <HAL_RCC_ClockConfig+0x260>)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	4313      	orrs	r3, r2
 8005784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005786:	4b8a      	ldr	r3, [pc, #552]	; (80059b0 <HAL_RCC_ClockConfig+0x260>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d001      	beq.n	8005798 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e106      	b.n	80059a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d073      	beq.n	800588c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	d129      	bne.n	8005800 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ac:	4b81      	ldr	r3, [pc, #516]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e0f4      	b.n	80059a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80057bc:	f000 f99e 	bl	8005afc <RCC_GetSysClockFreqFromPLLSource>
 80057c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4a7c      	ldr	r2, [pc, #496]	; (80059b8 <HAL_RCC_ClockConfig+0x268>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d93f      	bls.n	800584a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057ca:	4b7a      	ldr	r3, [pc, #488]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d009      	beq.n	80057ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d033      	beq.n	800584a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d12f      	bne.n	800584a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057ea:	4b72      	ldr	r3, [pc, #456]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057f2:	4a70      	ldr	r2, [pc, #448]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 80057f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057fa:	2380      	movs	r3, #128	; 0x80
 80057fc:	617b      	str	r3, [r7, #20]
 80057fe:	e024      	b.n	800584a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2b02      	cmp	r3, #2
 8005806:	d107      	bne.n	8005818 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005808:	4b6a      	ldr	r3, [pc, #424]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d109      	bne.n	8005828 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e0c6      	b.n	80059a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005818:	4b66      	ldr	r3, [pc, #408]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e0be      	b.n	80059a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005828:	f000 f8ce 	bl	80059c8 <HAL_RCC_GetSysClockFreq>
 800582c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	4a61      	ldr	r2, [pc, #388]	; (80059b8 <HAL_RCC_ClockConfig+0x268>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d909      	bls.n	800584a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005836:	4b5f      	ldr	r3, [pc, #380]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800583e:	4a5d      	ldr	r2, [pc, #372]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 8005840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005844:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005846:	2380      	movs	r3, #128	; 0x80
 8005848:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800584a:	4b5a      	ldr	r3, [pc, #360]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f023 0203 	bic.w	r2, r3, #3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	4957      	ldr	r1, [pc, #348]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 8005858:	4313      	orrs	r3, r2
 800585a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800585c:	f7fd f8da 	bl	8002a14 <HAL_GetTick>
 8005860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005862:	e00a      	b.n	800587a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005864:	f7fd f8d6 	bl	8002a14 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005872:	4293      	cmp	r3, r2
 8005874:	d901      	bls.n	800587a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e095      	b.n	80059a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800587a:	4b4e      	ldr	r3, [pc, #312]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 020c 	and.w	r2, r3, #12
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	429a      	cmp	r2, r3
 800588a:	d1eb      	bne.n	8005864 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d023      	beq.n	80058e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d005      	beq.n	80058b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058a4:	4b43      	ldr	r3, [pc, #268]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	4a42      	ldr	r2, [pc, #264]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 80058aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0308 	and.w	r3, r3, #8
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d007      	beq.n	80058cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80058bc:	4b3d      	ldr	r3, [pc, #244]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80058c4:	4a3b      	ldr	r2, [pc, #236]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 80058c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058cc:	4b39      	ldr	r3, [pc, #228]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	4936      	ldr	r1, [pc, #216]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	608b      	str	r3, [r1, #8]
 80058de:	e008      	b.n	80058f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2b80      	cmp	r3, #128	; 0x80
 80058e4:	d105      	bne.n	80058f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80058e6:	4b33      	ldr	r3, [pc, #204]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	4a32      	ldr	r2, [pc, #200]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 80058ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058f2:	4b2f      	ldr	r3, [pc, #188]	; (80059b0 <HAL_RCC_ClockConfig+0x260>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d21d      	bcs.n	800593c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005900:	4b2b      	ldr	r3, [pc, #172]	; (80059b0 <HAL_RCC_ClockConfig+0x260>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f023 020f 	bic.w	r2, r3, #15
 8005908:	4929      	ldr	r1, [pc, #164]	; (80059b0 <HAL_RCC_ClockConfig+0x260>)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	4313      	orrs	r3, r2
 800590e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005910:	f7fd f880 	bl	8002a14 <HAL_GetTick>
 8005914:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005916:	e00a      	b.n	800592e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005918:	f7fd f87c 	bl	8002a14 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	f241 3288 	movw	r2, #5000	; 0x1388
 8005926:	4293      	cmp	r3, r2
 8005928:	d901      	bls.n	800592e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e03b      	b.n	80059a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800592e:	4b20      	ldr	r3, [pc, #128]	; (80059b0 <HAL_RCC_ClockConfig+0x260>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d1ed      	bne.n	8005918 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	d008      	beq.n	800595a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005948:	4b1a      	ldr	r3, [pc, #104]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	4917      	ldr	r1, [pc, #92]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 8005956:	4313      	orrs	r3, r2
 8005958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d009      	beq.n	800597a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005966:	4b13      	ldr	r3, [pc, #76]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	490f      	ldr	r1, [pc, #60]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 8005976:	4313      	orrs	r3, r2
 8005978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800597a:	f000 f825 	bl	80059c8 <HAL_RCC_GetSysClockFreq>
 800597e:	4602      	mov	r2, r0
 8005980:	4b0c      	ldr	r3, [pc, #48]	; (80059b4 <HAL_RCC_ClockConfig+0x264>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	f003 030f 	and.w	r3, r3, #15
 800598a:	490c      	ldr	r1, [pc, #48]	; (80059bc <HAL_RCC_ClockConfig+0x26c>)
 800598c:	5ccb      	ldrb	r3, [r1, r3]
 800598e:	f003 031f 	and.w	r3, r3, #31
 8005992:	fa22 f303 	lsr.w	r3, r2, r3
 8005996:	4a0a      	ldr	r2, [pc, #40]	; (80059c0 <HAL_RCC_ClockConfig+0x270>)
 8005998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800599a:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <HAL_RCC_ClockConfig+0x274>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fc ffec 	bl	800297c <HAL_InitTick>
 80059a4:	4603      	mov	r3, r0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	40022000 	.word	0x40022000
 80059b4:	40021000 	.word	0x40021000
 80059b8:	04c4b400 	.word	0x04c4b400
 80059bc:	08009654 	.word	0x08009654
 80059c0:	20000004 	.word	0x20000004
 80059c4:	20000008 	.word	0x20000008

080059c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059ce:	4b2c      	ldr	r3, [pc, #176]	; (8005a80 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 030c 	and.w	r3, r3, #12
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d102      	bne.n	80059e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059da:	4b2a      	ldr	r3, [pc, #168]	; (8005a84 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059dc:	613b      	str	r3, [r7, #16]
 80059de:	e047      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80059e0:	4b27      	ldr	r3, [pc, #156]	; (8005a80 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f003 030c 	and.w	r3, r3, #12
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d102      	bne.n	80059f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059ec:	4b26      	ldr	r3, [pc, #152]	; (8005a88 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059ee:	613b      	str	r3, [r7, #16]
 80059f0:	e03e      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80059f2:	4b23      	ldr	r3, [pc, #140]	; (8005a80 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 030c 	and.w	r3, r3, #12
 80059fa:	2b0c      	cmp	r3, #12
 80059fc:	d136      	bne.n	8005a6c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059fe:	4b20      	ldr	r3, [pc, #128]	; (8005a80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a08:	4b1d      	ldr	r3, [pc, #116]	; (8005a80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	091b      	lsrs	r3, r3, #4
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	3301      	adds	r3, #1
 8005a14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d10c      	bne.n	8005a36 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a1c:	4a1a      	ldr	r2, [pc, #104]	; (8005a88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a24:	4a16      	ldr	r2, [pc, #88]	; (8005a80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a26:	68d2      	ldr	r2, [r2, #12]
 8005a28:	0a12      	lsrs	r2, r2, #8
 8005a2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a2e:	fb02 f303 	mul.w	r3, r2, r3
 8005a32:	617b      	str	r3, [r7, #20]
      break;
 8005a34:	e00c      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a36:	4a13      	ldr	r2, [pc, #76]	; (8005a84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3e:	4a10      	ldr	r2, [pc, #64]	; (8005a80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a40:	68d2      	ldr	r2, [r2, #12]
 8005a42:	0a12      	lsrs	r2, r2, #8
 8005a44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a48:	fb02 f303 	mul.w	r3, r2, r3
 8005a4c:	617b      	str	r3, [r7, #20]
      break;
 8005a4e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	0e5b      	lsrs	r3, r3, #25
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a68:	613b      	str	r3, [r7, #16]
 8005a6a:	e001      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a70:	693b      	ldr	r3, [r7, #16]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	40021000 	.word	0x40021000
 8005a84:	00f42400 	.word	0x00f42400
 8005a88:	016e3600 	.word	0x016e3600

08005a8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a90:	4b03      	ldr	r3, [pc, #12]	; (8005aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a92:	681b      	ldr	r3, [r3, #0]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	20000004 	.word	0x20000004

08005aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005aa8:	f7ff fff0 	bl	8005a8c <HAL_RCC_GetHCLKFreq>
 8005aac:	4602      	mov	r2, r0
 8005aae:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	0a1b      	lsrs	r3, r3, #8
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	4904      	ldr	r1, [pc, #16]	; (8005acc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005aba:	5ccb      	ldrb	r3, [r1, r3]
 8005abc:	f003 031f 	and.w	r3, r3, #31
 8005ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	40021000 	.word	0x40021000
 8005acc:	08009664 	.word	0x08009664

08005ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ad4:	f7ff ffda 	bl	8005a8c <HAL_RCC_GetHCLKFreq>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	0adb      	lsrs	r3, r3, #11
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	4904      	ldr	r1, [pc, #16]	; (8005af8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ae6:	5ccb      	ldrb	r3, [r1, r3]
 8005ae8:	f003 031f 	and.w	r3, r3, #31
 8005aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	40021000 	.word	0x40021000
 8005af8:	08009664 	.word	0x08009664

08005afc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b02:	4b1e      	ldr	r3, [pc, #120]	; (8005b7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f003 0303 	and.w	r3, r3, #3
 8005b0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b0c:	4b1b      	ldr	r3, [pc, #108]	; (8005b7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	091b      	lsrs	r3, r3, #4
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	3301      	adds	r3, #1
 8005b18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d10c      	bne.n	8005b3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b20:	4a17      	ldr	r2, [pc, #92]	; (8005b80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b28:	4a14      	ldr	r2, [pc, #80]	; (8005b7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b2a:	68d2      	ldr	r2, [r2, #12]
 8005b2c:	0a12      	lsrs	r2, r2, #8
 8005b2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b32:	fb02 f303 	mul.w	r3, r2, r3
 8005b36:	617b      	str	r3, [r7, #20]
    break;
 8005b38:	e00c      	b.n	8005b54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b3a:	4a12      	ldr	r2, [pc, #72]	; (8005b84 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b42:	4a0e      	ldr	r2, [pc, #56]	; (8005b7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b44:	68d2      	ldr	r2, [r2, #12]
 8005b46:	0a12      	lsrs	r2, r2, #8
 8005b48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b4c:	fb02 f303 	mul.w	r3, r2, r3
 8005b50:	617b      	str	r3, [r7, #20]
    break;
 8005b52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b54:	4b09      	ldr	r3, [pc, #36]	; (8005b7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	0e5b      	lsrs	r3, r3, #25
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	3301      	adds	r3, #1
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005b6e:	687b      	ldr	r3, [r7, #4]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	371c      	adds	r7, #28
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	016e3600 	.word	0x016e3600
 8005b84:	00f42400 	.word	0x00f42400

08005b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b90:	2300      	movs	r3, #0
 8005b92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b94:	2300      	movs	r3, #0
 8005b96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 8098 	beq.w	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005baa:	4b43      	ldr	r3, [pc, #268]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10d      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bb6:	4b40      	ldr	r3, [pc, #256]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bba:	4a3f      	ldr	r2, [pc, #252]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8005bc2:	4b3d      	ldr	r3, [pc, #244]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bca:	60bb      	str	r3, [r7, #8]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bd2:	4b3a      	ldr	r3, [pc, #232]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a39      	ldr	r2, [pc, #228]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bde:	f7fc ff19 	bl	8002a14 <HAL_GetTick>
 8005be2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005be4:	e009      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be6:	f7fc ff15 	bl	8002a14 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d902      	bls.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	74fb      	strb	r3, [r7, #19]
        break;
 8005bf8:	e005      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bfa:	4b30      	ldr	r3, [pc, #192]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0ef      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c06:	7cfb      	ldrb	r3, [r7, #19]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d159      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c0c:	4b2a      	ldr	r3, [pc, #168]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d01e      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d019      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c28:	4b23      	ldr	r3, [pc, #140]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c34:	4b20      	ldr	r3, [pc, #128]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3a:	4a1f      	ldr	r2, [pc, #124]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c44:	4b1c      	ldr	r3, [pc, #112]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4a:	4a1b      	ldr	r2, [pc, #108]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c54:	4a18      	ldr	r2, [pc, #96]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d016      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c66:	f7fc fed5 	bl	8002a14 <HAL_GetTick>
 8005c6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c6c:	e00b      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c6e:	f7fc fed1 	bl	8002a14 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d902      	bls.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	74fb      	strb	r3, [r7, #19]
            break;
 8005c84:	e006      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c86:	4b0c      	ldr	r3, [pc, #48]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0ec      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005c94:	7cfb      	ldrb	r3, [r7, #19]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10b      	bne.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c9a:	4b07      	ldr	r3, [pc, #28]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca8:	4903      	ldr	r1, [pc, #12]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cb0:	e008      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cb2:	7cfb      	ldrb	r3, [r7, #19]
 8005cb4:	74bb      	strb	r3, [r7, #18]
 8005cb6:	e005      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc0:	7cfb      	ldrb	r3, [r7, #19]
 8005cc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cc4:	7c7b      	ldrb	r3, [r7, #17]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d105      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cca:	4ba7      	ldr	r3, [pc, #668]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cce:	4aa6      	ldr	r2, [pc, #664]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ce2:	4ba1      	ldr	r3, [pc, #644]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce8:	f023 0203 	bic.w	r2, r3, #3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	499d      	ldr	r1, [pc, #628]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d04:	4b98      	ldr	r3, [pc, #608]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0a:	f023 020c 	bic.w	r2, r3, #12
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	4995      	ldr	r1, [pc, #596]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0304 	and.w	r3, r3, #4
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d26:	4b90      	ldr	r3, [pc, #576]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	498c      	ldr	r1, [pc, #560]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d48:	4b87      	ldr	r3, [pc, #540]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	4984      	ldr	r1, [pc, #528]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0310 	and.w	r3, r3, #16
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d6a:	4b7f      	ldr	r3, [pc, #508]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	497b      	ldr	r1, [pc, #492]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0320 	and.w	r3, r3, #32
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d8c:	4b76      	ldr	r3, [pc, #472]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	4973      	ldr	r1, [pc, #460]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00a      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dae:	4b6e      	ldr	r3, [pc, #440]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	496a      	ldr	r1, [pc, #424]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00a      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005dd0:	4b65      	ldr	r3, [pc, #404]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	4962      	ldr	r1, [pc, #392]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005df2:	4b5d      	ldr	r3, [pc, #372]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e00:	4959      	ldr	r1, [pc, #356]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e14:	4b54      	ldr	r3, [pc, #336]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e1a:	f023 0203 	bic.w	r2, r3, #3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	4951      	ldr	r1, [pc, #324]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e36:	4b4c      	ldr	r3, [pc, #304]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	4948      	ldr	r1, [pc, #288]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d015      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e58:	4b43      	ldr	r3, [pc, #268]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	4940      	ldr	r1, [pc, #256]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e76:	d105      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e78:	4b3b      	ldr	r3, [pc, #236]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	4a3a      	ldr	r2, [pc, #232]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d015      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e90:	4b35      	ldr	r3, [pc, #212]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9e:	4932      	ldr	r1, [pc, #200]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eae:	d105      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eb0:	4b2d      	ldr	r3, [pc, #180]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	4a2c      	ldr	r2, [pc, #176]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d015      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ec8:	4b27      	ldr	r3, [pc, #156]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ece:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	4924      	ldr	r1, [pc, #144]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ee6:	d105      	bne.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ee8:	4b1f      	ldr	r3, [pc, #124]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	4a1e      	ldr	r2, [pc, #120]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ef2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d015      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f00:	4b19      	ldr	r3, [pc, #100]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0e:	4916      	ldr	r1, [pc, #88]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f1e:	d105      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f20:	4b11      	ldr	r3, [pc, #68]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	4a10      	ldr	r2, [pc, #64]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f2a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d019      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f38:	4b0b      	ldr	r3, [pc, #44]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	4908      	ldr	r1, [pc, #32]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f56:	d109      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f58:	4b03      	ldr	r3, [pc, #12]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	4a02      	ldr	r2, [pc, #8]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f62:	60d3      	str	r3, [r2, #12]
 8005f64:	e002      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005f66:	bf00      	nop
 8005f68:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d015      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f78:	4b29      	ldr	r3, [pc, #164]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f86:	4926      	ldr	r1, [pc, #152]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f96:	d105      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f98:	4b21      	ldr	r3, [pc, #132]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	4a20      	ldr	r2, [pc, #128]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fa2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d015      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005fb0:	4b1b      	ldr	r3, [pc, #108]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fbe:	4918      	ldr	r1, [pc, #96]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fce:	d105      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fd0:	4b13      	ldr	r3, [pc, #76]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	4a12      	ldr	r2, [pc, #72]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fda:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d015      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005fe8:	4b0d      	ldr	r3, [pc, #52]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff6:	490a      	ldr	r1, [pc, #40]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006002:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006006:	d105      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006008:	4b05      	ldr	r3, [pc, #20]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	4a04      	ldr	r2, [pc, #16]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800600e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006012:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006014:	7cbb      	ldrb	r3, [r7, #18]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	40021000 	.word	0x40021000

08006024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e049      	b.n	80060ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d106      	bne.n	8006050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7fc fa9e 	bl	800258c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3304      	adds	r3, #4
 8006060:	4619      	mov	r1, r3
 8006062:	4610      	mov	r0, r2
 8006064:	f000 ff68 	bl	8006f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d001      	beq.n	80060ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e04c      	b.n	8006186 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a26      	ldr	r2, [pc, #152]	; (8006194 <HAL_TIM_Base_Start+0xc0>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d022      	beq.n	8006144 <HAL_TIM_Base_Start+0x70>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006106:	d01d      	beq.n	8006144 <HAL_TIM_Base_Start+0x70>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a22      	ldr	r2, [pc, #136]	; (8006198 <HAL_TIM_Base_Start+0xc4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d018      	beq.n	8006144 <HAL_TIM_Base_Start+0x70>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a21      	ldr	r2, [pc, #132]	; (800619c <HAL_TIM_Base_Start+0xc8>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d013      	beq.n	8006144 <HAL_TIM_Base_Start+0x70>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a1f      	ldr	r2, [pc, #124]	; (80061a0 <HAL_TIM_Base_Start+0xcc>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00e      	beq.n	8006144 <HAL_TIM_Base_Start+0x70>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a1e      	ldr	r2, [pc, #120]	; (80061a4 <HAL_TIM_Base_Start+0xd0>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d009      	beq.n	8006144 <HAL_TIM_Base_Start+0x70>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a1c      	ldr	r2, [pc, #112]	; (80061a8 <HAL_TIM_Base_Start+0xd4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d004      	beq.n	8006144 <HAL_TIM_Base_Start+0x70>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a1b      	ldr	r2, [pc, #108]	; (80061ac <HAL_TIM_Base_Start+0xd8>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d115      	bne.n	8006170 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689a      	ldr	r2, [r3, #8]
 800614a:	4b19      	ldr	r3, [pc, #100]	; (80061b0 <HAL_TIM_Base_Start+0xdc>)
 800614c:	4013      	ands	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b06      	cmp	r3, #6
 8006154:	d015      	beq.n	8006182 <HAL_TIM_Base_Start+0xae>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800615c:	d011      	beq.n	8006182 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 0201 	orr.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616e:	e008      	b.n	8006182 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0201 	orr.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	e000      	b.n	8006184 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006182:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	40012c00 	.word	0x40012c00
 8006198:	40000400 	.word	0x40000400
 800619c:	40000800 	.word	0x40000800
 80061a0:	40000c00 	.word	0x40000c00
 80061a4:	40013400 	.word	0x40013400
 80061a8:	40014000 	.word	0x40014000
 80061ac:	40015000 	.word	0x40015000
 80061b0:	00010007 	.word	0x00010007

080061b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d001      	beq.n	80061cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e054      	b.n	8006276 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a26      	ldr	r2, [pc, #152]	; (8006284 <HAL_TIM_Base_Start_IT+0xd0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d022      	beq.n	8006234 <HAL_TIM_Base_Start_IT+0x80>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f6:	d01d      	beq.n	8006234 <HAL_TIM_Base_Start_IT+0x80>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a22      	ldr	r2, [pc, #136]	; (8006288 <HAL_TIM_Base_Start_IT+0xd4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d018      	beq.n	8006234 <HAL_TIM_Base_Start_IT+0x80>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a21      	ldr	r2, [pc, #132]	; (800628c <HAL_TIM_Base_Start_IT+0xd8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d013      	beq.n	8006234 <HAL_TIM_Base_Start_IT+0x80>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1f      	ldr	r2, [pc, #124]	; (8006290 <HAL_TIM_Base_Start_IT+0xdc>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00e      	beq.n	8006234 <HAL_TIM_Base_Start_IT+0x80>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a1e      	ldr	r2, [pc, #120]	; (8006294 <HAL_TIM_Base_Start_IT+0xe0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d009      	beq.n	8006234 <HAL_TIM_Base_Start_IT+0x80>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a1c      	ldr	r2, [pc, #112]	; (8006298 <HAL_TIM_Base_Start_IT+0xe4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d004      	beq.n	8006234 <HAL_TIM_Base_Start_IT+0x80>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a1b      	ldr	r2, [pc, #108]	; (800629c <HAL_TIM_Base_Start_IT+0xe8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d115      	bne.n	8006260 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	4b19      	ldr	r3, [pc, #100]	; (80062a0 <HAL_TIM_Base_Start_IT+0xec>)
 800623c:	4013      	ands	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b06      	cmp	r3, #6
 8006244:	d015      	beq.n	8006272 <HAL_TIM_Base_Start_IT+0xbe>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800624c:	d011      	beq.n	8006272 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0201 	orr.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625e:	e008      	b.n	8006272 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0201 	orr.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	e000      	b.n	8006274 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006272:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	40012c00 	.word	0x40012c00
 8006288:	40000400 	.word	0x40000400
 800628c:	40000800 	.word	0x40000800
 8006290:	40000c00 	.word	0x40000c00
 8006294:	40013400 	.word	0x40013400
 8006298:	40014000 	.word	0x40014000
 800629c:	40015000 	.word	0x40015000
 80062a0:	00010007 	.word	0x00010007

080062a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e049      	b.n	800634a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d106      	bne.n	80062d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f841 	bl	8006352 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	3304      	adds	r3, #4
 80062e0:	4619      	mov	r1, r3
 80062e2:	4610      	mov	r0, r2
 80062e4:	f000 fe28 	bl	8006f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
	...

08006368 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d109      	bne.n	800638c <HAL_TIM_PWM_Start+0x24>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b01      	cmp	r3, #1
 8006382:	bf14      	ite	ne
 8006384:	2301      	movne	r3, #1
 8006386:	2300      	moveq	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	e03c      	b.n	8006406 <HAL_TIM_PWM_Start+0x9e>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b04      	cmp	r3, #4
 8006390:	d109      	bne.n	80063a6 <HAL_TIM_PWM_Start+0x3e>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b01      	cmp	r3, #1
 800639c:	bf14      	ite	ne
 800639e:	2301      	movne	r3, #1
 80063a0:	2300      	moveq	r3, #0
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	e02f      	b.n	8006406 <HAL_TIM_PWM_Start+0x9e>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d109      	bne.n	80063c0 <HAL_TIM_PWM_Start+0x58>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	bf14      	ite	ne
 80063b8:	2301      	movne	r3, #1
 80063ba:	2300      	moveq	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	e022      	b.n	8006406 <HAL_TIM_PWM_Start+0x9e>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2b0c      	cmp	r3, #12
 80063c4:	d109      	bne.n	80063da <HAL_TIM_PWM_Start+0x72>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	bf14      	ite	ne
 80063d2:	2301      	movne	r3, #1
 80063d4:	2300      	moveq	r3, #0
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	e015      	b.n	8006406 <HAL_TIM_PWM_Start+0x9e>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b10      	cmp	r3, #16
 80063de:	d109      	bne.n	80063f4 <HAL_TIM_PWM_Start+0x8c>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	bf14      	ite	ne
 80063ec:	2301      	movne	r3, #1
 80063ee:	2300      	moveq	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	e008      	b.n	8006406 <HAL_TIM_PWM_Start+0x9e>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	bf14      	ite	ne
 8006400:	2301      	movne	r3, #1
 8006402:	2300      	moveq	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e0a6      	b.n	800655c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d104      	bne.n	800641e <HAL_TIM_PWM_Start+0xb6>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800641c:	e023      	b.n	8006466 <HAL_TIM_PWM_Start+0xfe>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b04      	cmp	r3, #4
 8006422:	d104      	bne.n	800642e <HAL_TIM_PWM_Start+0xc6>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800642c:	e01b      	b.n	8006466 <HAL_TIM_PWM_Start+0xfe>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b08      	cmp	r3, #8
 8006432:	d104      	bne.n	800643e <HAL_TIM_PWM_Start+0xd6>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800643c:	e013      	b.n	8006466 <HAL_TIM_PWM_Start+0xfe>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b0c      	cmp	r3, #12
 8006442:	d104      	bne.n	800644e <HAL_TIM_PWM_Start+0xe6>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800644c:	e00b      	b.n	8006466 <HAL_TIM_PWM_Start+0xfe>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b10      	cmp	r3, #16
 8006452:	d104      	bne.n	800645e <HAL_TIM_PWM_Start+0xf6>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800645c:	e003      	b.n	8006466 <HAL_TIM_PWM_Start+0xfe>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2202      	movs	r2, #2
 8006462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2201      	movs	r2, #1
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f001 f9dc 	bl	800782c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a3a      	ldr	r2, [pc, #232]	; (8006564 <HAL_TIM_PWM_Start+0x1fc>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d018      	beq.n	80064b0 <HAL_TIM_PWM_Start+0x148>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a39      	ldr	r2, [pc, #228]	; (8006568 <HAL_TIM_PWM_Start+0x200>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d013      	beq.n	80064b0 <HAL_TIM_PWM_Start+0x148>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a37      	ldr	r2, [pc, #220]	; (800656c <HAL_TIM_PWM_Start+0x204>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d00e      	beq.n	80064b0 <HAL_TIM_PWM_Start+0x148>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a36      	ldr	r2, [pc, #216]	; (8006570 <HAL_TIM_PWM_Start+0x208>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d009      	beq.n	80064b0 <HAL_TIM_PWM_Start+0x148>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a34      	ldr	r2, [pc, #208]	; (8006574 <HAL_TIM_PWM_Start+0x20c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d004      	beq.n	80064b0 <HAL_TIM_PWM_Start+0x148>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a33      	ldr	r2, [pc, #204]	; (8006578 <HAL_TIM_PWM_Start+0x210>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d101      	bne.n	80064b4 <HAL_TIM_PWM_Start+0x14c>
 80064b0:	2301      	movs	r3, #1
 80064b2:	e000      	b.n	80064b6 <HAL_TIM_PWM_Start+0x14e>
 80064b4:	2300      	movs	r3, #0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d007      	beq.n	80064ca <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a25      	ldr	r2, [pc, #148]	; (8006564 <HAL_TIM_PWM_Start+0x1fc>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d022      	beq.n	800651a <HAL_TIM_PWM_Start+0x1b2>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064dc:	d01d      	beq.n	800651a <HAL_TIM_PWM_Start+0x1b2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a26      	ldr	r2, [pc, #152]	; (800657c <HAL_TIM_PWM_Start+0x214>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d018      	beq.n	800651a <HAL_TIM_PWM_Start+0x1b2>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a24      	ldr	r2, [pc, #144]	; (8006580 <HAL_TIM_PWM_Start+0x218>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d013      	beq.n	800651a <HAL_TIM_PWM_Start+0x1b2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a23      	ldr	r2, [pc, #140]	; (8006584 <HAL_TIM_PWM_Start+0x21c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d00e      	beq.n	800651a <HAL_TIM_PWM_Start+0x1b2>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a19      	ldr	r2, [pc, #100]	; (8006568 <HAL_TIM_PWM_Start+0x200>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d009      	beq.n	800651a <HAL_TIM_PWM_Start+0x1b2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a18      	ldr	r2, [pc, #96]	; (800656c <HAL_TIM_PWM_Start+0x204>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d004      	beq.n	800651a <HAL_TIM_PWM_Start+0x1b2>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a18      	ldr	r2, [pc, #96]	; (8006578 <HAL_TIM_PWM_Start+0x210>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d115      	bne.n	8006546 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	4b19      	ldr	r3, [pc, #100]	; (8006588 <HAL_TIM_PWM_Start+0x220>)
 8006522:	4013      	ands	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b06      	cmp	r3, #6
 800652a:	d015      	beq.n	8006558 <HAL_TIM_PWM_Start+0x1f0>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006532:	d011      	beq.n	8006558 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0201 	orr.w	r2, r2, #1
 8006542:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006544:	e008      	b.n	8006558 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f042 0201 	orr.w	r2, r2, #1
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	e000      	b.n	800655a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006558:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	40012c00 	.word	0x40012c00
 8006568:	40013400 	.word	0x40013400
 800656c:	40014000 	.word	0x40014000
 8006570:	40014400 	.word	0x40014400
 8006574:	40014800 	.word	0x40014800
 8006578:	40015000 	.word	0x40015000
 800657c:	40000400 	.word	0x40000400
 8006580:	40000800 	.word	0x40000800
 8006584:	40000c00 	.word	0x40000c00
 8006588:	00010007 	.word	0x00010007

0800658c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e097      	b.n	80066d0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d106      	bne.n	80065ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7fc f849 	bl	800264c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2202      	movs	r2, #2
 80065be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	6812      	ldr	r2, [r2, #0]
 80065cc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80065d0:	f023 0307 	bic.w	r3, r3, #7
 80065d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	3304      	adds	r3, #4
 80065de:	4619      	mov	r1, r3
 80065e0:	4610      	mov	r0, r2
 80065e2:	f000 fca9 	bl	8006f38 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800660e:	f023 0303 	bic.w	r3, r3, #3
 8006612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	021b      	lsls	r3, r3, #8
 800661e:	4313      	orrs	r3, r2
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	4313      	orrs	r3, r2
 8006624:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800662c:	f023 030c 	bic.w	r3, r3, #12
 8006630:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006638:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800663c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	68da      	ldr	r2, [r3, #12]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	021b      	lsls	r3, r3, #8
 8006648:	4313      	orrs	r3, r2
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	4313      	orrs	r3, r2
 800664e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	011a      	lsls	r2, r3, #4
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	031b      	lsls	r3, r3, #12
 800665c:	4313      	orrs	r3, r2
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	4313      	orrs	r3, r2
 8006662:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800666a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006672:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	4313      	orrs	r3, r2
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4313      	orrs	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3718      	adds	r7, #24
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006700:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d110      	bne.n	800672a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d102      	bne.n	8006714 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800670e:	7b7b      	ldrb	r3, [r7, #13]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d001      	beq.n	8006718 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e069      	b.n	80067ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006728:	e031      	b.n	800678e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b04      	cmp	r3, #4
 800672e:	d110      	bne.n	8006752 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006730:	7bbb      	ldrb	r3, [r7, #14]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d102      	bne.n	800673c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006736:	7b3b      	ldrb	r3, [r7, #12]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d001      	beq.n	8006740 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e055      	b.n	80067ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006750:	e01d      	b.n	800678e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006752:	7bfb      	ldrb	r3, [r7, #15]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d108      	bne.n	800676a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006758:	7bbb      	ldrb	r3, [r7, #14]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d105      	bne.n	800676a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800675e:	7b7b      	ldrb	r3, [r7, #13]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d102      	bne.n	800676a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006764:	7b3b      	ldrb	r3, [r7, #12]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d001      	beq.n	800676e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e03e      	b.n	80067ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2202      	movs	r2, #2
 8006772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2202      	movs	r2, #2
 800677a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2202      	movs	r2, #2
 8006782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2202      	movs	r2, #2
 800678a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d003      	beq.n	800679c <HAL_TIM_Encoder_Start+0xc4>
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2b04      	cmp	r3, #4
 8006798:	d008      	beq.n	80067ac <HAL_TIM_Encoder_Start+0xd4>
 800679a:	e00f      	b.n	80067bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2201      	movs	r2, #1
 80067a2:	2100      	movs	r1, #0
 80067a4:	4618      	mov	r0, r3
 80067a6:	f001 f841 	bl	800782c <TIM_CCxChannelCmd>
      break;
 80067aa:	e016      	b.n	80067da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2201      	movs	r2, #1
 80067b2:	2104      	movs	r1, #4
 80067b4:	4618      	mov	r0, r3
 80067b6:	f001 f839 	bl	800782c <TIM_CCxChannelCmd>
      break;
 80067ba:	e00e      	b.n	80067da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2201      	movs	r2, #1
 80067c2:	2100      	movs	r1, #0
 80067c4:	4618      	mov	r0, r3
 80067c6:	f001 f831 	bl	800782c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2201      	movs	r2, #1
 80067d0:	2104      	movs	r1, #4
 80067d2:	4618      	mov	r0, r3
 80067d4:	f001 f82a 	bl	800782c <TIM_CCxChannelCmd>
      break;
 80067d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f042 0201 	orr.w	r2, r2, #1
 80067e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d020      	beq.n	8006858 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01b      	beq.n	8006858 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f06f 0202 	mvn.w	r2, #2
 8006828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fb5c 	bl	8006efc <HAL_TIM_IC_CaptureCallback>
 8006844:	e005      	b.n	8006852 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fb4e 	bl	8006ee8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fb5f 	bl	8006f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f003 0304 	and.w	r3, r3, #4
 800685e:	2b00      	cmp	r3, #0
 8006860:	d020      	beq.n	80068a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01b      	beq.n	80068a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f06f 0204 	mvn.w	r2, #4
 8006874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2202      	movs	r2, #2
 800687a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fb36 	bl	8006efc <HAL_TIM_IC_CaptureCallback>
 8006890:	e005      	b.n	800689e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fb28 	bl	8006ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fb39 	bl	8006f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f003 0308 	and.w	r3, r3, #8
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d020      	beq.n	80068f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f003 0308 	and.w	r3, r3, #8
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d01b      	beq.n	80068f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f06f 0208 	mvn.w	r2, #8
 80068c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2204      	movs	r2, #4
 80068c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fb10 	bl	8006efc <HAL_TIM_IC_CaptureCallback>
 80068dc:	e005      	b.n	80068ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fb02 	bl	8006ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fb13 	bl	8006f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f003 0310 	and.w	r3, r3, #16
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d020      	beq.n	800693c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f003 0310 	and.w	r3, r3, #16
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01b      	beq.n	800693c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f06f 0210 	mvn.w	r2, #16
 800690c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2208      	movs	r2, #8
 8006912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 faea 	bl	8006efc <HAL_TIM_IC_CaptureCallback>
 8006928:	e005      	b.n	8006936 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fadc 	bl	8006ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 faed 	bl	8006f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00c      	beq.n	8006960 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d007      	beq.n	8006960 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f06f 0201 	mvn.w	r2, #1
 8006958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7fb fc2a 	bl	80021b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006966:	2b00      	cmp	r3, #0
 8006968:	d104      	bne.n	8006974 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00c      	beq.n	800698e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697a:	2b00      	cmp	r3, #0
 800697c:	d007      	beq.n	800698e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f001 f8a9 	bl	8007ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00c      	beq.n	80069b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d007      	beq.n	80069b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f001 f8a1 	bl	8007af4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00c      	beq.n	80069d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d007      	beq.n	80069d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 faa7 	bl	8006f24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f003 0320 	and.w	r3, r3, #32
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00c      	beq.n	80069fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d007      	beq.n	80069fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f06f 0220 	mvn.w	r2, #32
 80069f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 f869 	bl	8007acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00c      	beq.n	8006a1e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d007      	beq.n	8006a1e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 f875 	bl	8007b08 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00c      	beq.n	8006a42 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d007      	beq.n	8006a42 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 f86d 	bl	8007b1c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00c      	beq.n	8006a66 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d007      	beq.n	8006a66 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 f865 	bl	8007b30 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00c      	beq.n	8006a8a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d007      	beq.n	8006a8a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f001 f85d 	bl	8007b44 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a8a:	bf00      	nop
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d101      	bne.n	8006ab2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006aae:	2302      	movs	r3, #2
 8006ab0:	e0ff      	b.n	8006cb2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b14      	cmp	r3, #20
 8006abe:	f200 80f0 	bhi.w	8006ca2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006ac2:	a201      	add	r2, pc, #4	; (adr r2, 8006ac8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac8:	08006b1d 	.word	0x08006b1d
 8006acc:	08006ca3 	.word	0x08006ca3
 8006ad0:	08006ca3 	.word	0x08006ca3
 8006ad4:	08006ca3 	.word	0x08006ca3
 8006ad8:	08006b5d 	.word	0x08006b5d
 8006adc:	08006ca3 	.word	0x08006ca3
 8006ae0:	08006ca3 	.word	0x08006ca3
 8006ae4:	08006ca3 	.word	0x08006ca3
 8006ae8:	08006b9f 	.word	0x08006b9f
 8006aec:	08006ca3 	.word	0x08006ca3
 8006af0:	08006ca3 	.word	0x08006ca3
 8006af4:	08006ca3 	.word	0x08006ca3
 8006af8:	08006bdf 	.word	0x08006bdf
 8006afc:	08006ca3 	.word	0x08006ca3
 8006b00:	08006ca3 	.word	0x08006ca3
 8006b04:	08006ca3 	.word	0x08006ca3
 8006b08:	08006c21 	.word	0x08006c21
 8006b0c:	08006ca3 	.word	0x08006ca3
 8006b10:	08006ca3 	.word	0x08006ca3
 8006b14:	08006ca3 	.word	0x08006ca3
 8006b18:	08006c61 	.word	0x08006c61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 fabc 	bl	80070a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699a      	ldr	r2, [r3, #24]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f042 0208 	orr.w	r2, r2, #8
 8006b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0204 	bic.w	r2, r2, #4
 8006b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6999      	ldr	r1, [r3, #24]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	691a      	ldr	r2, [r3, #16]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	619a      	str	r2, [r3, #24]
      break;
 8006b5a:	e0a5      	b.n	8006ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68b9      	ldr	r1, [r7, #8]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fb36 	bl	80071d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6999      	ldr	r1, [r3, #24]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	021a      	lsls	r2, r3, #8
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	619a      	str	r2, [r3, #24]
      break;
 8006b9c:	e084      	b.n	8006ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fba9 	bl	80072fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 0208 	orr.w	r2, r2, #8
 8006bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0204 	bic.w	r2, r2, #4
 8006bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69d9      	ldr	r1, [r3, #28]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	691a      	ldr	r2, [r3, #16]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	61da      	str	r2, [r3, #28]
      break;
 8006bdc:	e064      	b.n	8006ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68b9      	ldr	r1, [r7, #8]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 fc1b 	bl	8007420 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69da      	ldr	r2, [r3, #28]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69da      	ldr	r2, [r3, #28]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69d9      	ldr	r1, [r3, #28]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	021a      	lsls	r2, r3, #8
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	61da      	str	r2, [r3, #28]
      break;
 8006c1e:	e043      	b.n	8006ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68b9      	ldr	r1, [r7, #8]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fc8e 	bl	8007548 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0208 	orr.w	r2, r2, #8
 8006c3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 0204 	bic.w	r2, r2, #4
 8006c4a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	691a      	ldr	r2, [r3, #16]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006c5e:	e023      	b.n	8006ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fcd8 	bl	800761c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c8a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	021a      	lsls	r2, r3, #8
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006ca0:	e002      	b.n	8006ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3718      	adds	r7, #24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop

08006cbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_TIM_ConfigClockSource+0x1c>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e0f6      	b.n	8006ec6 <HAL_TIM_ConfigClockSource+0x20a>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006cf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a6f      	ldr	r2, [pc, #444]	; (8006ed0 <HAL_TIM_ConfigClockSource+0x214>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	f000 80c1 	beq.w	8006e9a <HAL_TIM_ConfigClockSource+0x1de>
 8006d18:	4a6d      	ldr	r2, [pc, #436]	; (8006ed0 <HAL_TIM_ConfigClockSource+0x214>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	f200 80c6 	bhi.w	8006eac <HAL_TIM_ConfigClockSource+0x1f0>
 8006d20:	4a6c      	ldr	r2, [pc, #432]	; (8006ed4 <HAL_TIM_ConfigClockSource+0x218>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	f000 80b9 	beq.w	8006e9a <HAL_TIM_ConfigClockSource+0x1de>
 8006d28:	4a6a      	ldr	r2, [pc, #424]	; (8006ed4 <HAL_TIM_ConfigClockSource+0x218>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	f200 80be 	bhi.w	8006eac <HAL_TIM_ConfigClockSource+0x1f0>
 8006d30:	4a69      	ldr	r2, [pc, #420]	; (8006ed8 <HAL_TIM_ConfigClockSource+0x21c>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	f000 80b1 	beq.w	8006e9a <HAL_TIM_ConfigClockSource+0x1de>
 8006d38:	4a67      	ldr	r2, [pc, #412]	; (8006ed8 <HAL_TIM_ConfigClockSource+0x21c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	f200 80b6 	bhi.w	8006eac <HAL_TIM_ConfigClockSource+0x1f0>
 8006d40:	4a66      	ldr	r2, [pc, #408]	; (8006edc <HAL_TIM_ConfigClockSource+0x220>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	f000 80a9 	beq.w	8006e9a <HAL_TIM_ConfigClockSource+0x1de>
 8006d48:	4a64      	ldr	r2, [pc, #400]	; (8006edc <HAL_TIM_ConfigClockSource+0x220>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	f200 80ae 	bhi.w	8006eac <HAL_TIM_ConfigClockSource+0x1f0>
 8006d50:	4a63      	ldr	r2, [pc, #396]	; (8006ee0 <HAL_TIM_ConfigClockSource+0x224>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	f000 80a1 	beq.w	8006e9a <HAL_TIM_ConfigClockSource+0x1de>
 8006d58:	4a61      	ldr	r2, [pc, #388]	; (8006ee0 <HAL_TIM_ConfigClockSource+0x224>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	f200 80a6 	bhi.w	8006eac <HAL_TIM_ConfigClockSource+0x1f0>
 8006d60:	4a60      	ldr	r2, [pc, #384]	; (8006ee4 <HAL_TIM_ConfigClockSource+0x228>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	f000 8099 	beq.w	8006e9a <HAL_TIM_ConfigClockSource+0x1de>
 8006d68:	4a5e      	ldr	r2, [pc, #376]	; (8006ee4 <HAL_TIM_ConfigClockSource+0x228>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	f200 809e 	bhi.w	8006eac <HAL_TIM_ConfigClockSource+0x1f0>
 8006d70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006d74:	f000 8091 	beq.w	8006e9a <HAL_TIM_ConfigClockSource+0x1de>
 8006d78:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006d7c:	f200 8096 	bhi.w	8006eac <HAL_TIM_ConfigClockSource+0x1f0>
 8006d80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d84:	f000 8089 	beq.w	8006e9a <HAL_TIM_ConfigClockSource+0x1de>
 8006d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d8c:	f200 808e 	bhi.w	8006eac <HAL_TIM_ConfigClockSource+0x1f0>
 8006d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d94:	d03e      	beq.n	8006e14 <HAL_TIM_ConfigClockSource+0x158>
 8006d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d9a:	f200 8087 	bhi.w	8006eac <HAL_TIM_ConfigClockSource+0x1f0>
 8006d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da2:	f000 8086 	beq.w	8006eb2 <HAL_TIM_ConfigClockSource+0x1f6>
 8006da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006daa:	d87f      	bhi.n	8006eac <HAL_TIM_ConfigClockSource+0x1f0>
 8006dac:	2b70      	cmp	r3, #112	; 0x70
 8006dae:	d01a      	beq.n	8006de6 <HAL_TIM_ConfigClockSource+0x12a>
 8006db0:	2b70      	cmp	r3, #112	; 0x70
 8006db2:	d87b      	bhi.n	8006eac <HAL_TIM_ConfigClockSource+0x1f0>
 8006db4:	2b60      	cmp	r3, #96	; 0x60
 8006db6:	d050      	beq.n	8006e5a <HAL_TIM_ConfigClockSource+0x19e>
 8006db8:	2b60      	cmp	r3, #96	; 0x60
 8006dba:	d877      	bhi.n	8006eac <HAL_TIM_ConfigClockSource+0x1f0>
 8006dbc:	2b50      	cmp	r3, #80	; 0x50
 8006dbe:	d03c      	beq.n	8006e3a <HAL_TIM_ConfigClockSource+0x17e>
 8006dc0:	2b50      	cmp	r3, #80	; 0x50
 8006dc2:	d873      	bhi.n	8006eac <HAL_TIM_ConfigClockSource+0x1f0>
 8006dc4:	2b40      	cmp	r3, #64	; 0x40
 8006dc6:	d058      	beq.n	8006e7a <HAL_TIM_ConfigClockSource+0x1be>
 8006dc8:	2b40      	cmp	r3, #64	; 0x40
 8006dca:	d86f      	bhi.n	8006eac <HAL_TIM_ConfigClockSource+0x1f0>
 8006dcc:	2b30      	cmp	r3, #48	; 0x30
 8006dce:	d064      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x1de>
 8006dd0:	2b30      	cmp	r3, #48	; 0x30
 8006dd2:	d86b      	bhi.n	8006eac <HAL_TIM_ConfigClockSource+0x1f0>
 8006dd4:	2b20      	cmp	r3, #32
 8006dd6:	d060      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x1de>
 8006dd8:	2b20      	cmp	r3, #32
 8006dda:	d867      	bhi.n	8006eac <HAL_TIM_ConfigClockSource+0x1f0>
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d05c      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x1de>
 8006de0:	2b10      	cmp	r3, #16
 8006de2:	d05a      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x1de>
 8006de4:	e062      	b.n	8006eac <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006df6:	f000 fcf9 	bl	80077ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	609a      	str	r2, [r3, #8]
      break;
 8006e12:	e04f      	b.n	8006eb4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e24:	f000 fce2 	bl	80077ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689a      	ldr	r2, [r3, #8]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e36:	609a      	str	r2, [r3, #8]
      break;
 8006e38:	e03c      	b.n	8006eb4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e46:	461a      	mov	r2, r3
 8006e48:	f000 fc54 	bl	80076f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2150      	movs	r1, #80	; 0x50
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 fcad 	bl	80077b2 <TIM_ITRx_SetConfig>
      break;
 8006e58:	e02c      	b.n	8006eb4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e66:	461a      	mov	r2, r3
 8006e68:	f000 fc73 	bl	8007752 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2160      	movs	r1, #96	; 0x60
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 fc9d 	bl	80077b2 <TIM_ITRx_SetConfig>
      break;
 8006e78:	e01c      	b.n	8006eb4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e86:	461a      	mov	r2, r3
 8006e88:	f000 fc34 	bl	80076f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2140      	movs	r1, #64	; 0x40
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fc8d 	bl	80077b2 <TIM_ITRx_SetConfig>
      break;
 8006e98:	e00c      	b.n	8006eb4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	f000 fc84 	bl	80077b2 <TIM_ITRx_SetConfig>
      break;
 8006eaa:	e003      	b.n	8006eb4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	73fb      	strb	r3, [r7, #15]
      break;
 8006eb0:	e000      	b.n	8006eb4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006eb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	00100070 	.word	0x00100070
 8006ed4:	00100060 	.word	0x00100060
 8006ed8:	00100050 	.word	0x00100050
 8006edc:	00100040 	.word	0x00100040
 8006ee0:	00100030 	.word	0x00100030
 8006ee4:	00100020 	.word	0x00100020

08006ee8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a4c      	ldr	r2, [pc, #304]	; (800707c <TIM_Base_SetConfig+0x144>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d017      	beq.n	8006f80 <TIM_Base_SetConfig+0x48>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f56:	d013      	beq.n	8006f80 <TIM_Base_SetConfig+0x48>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a49      	ldr	r2, [pc, #292]	; (8007080 <TIM_Base_SetConfig+0x148>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00f      	beq.n	8006f80 <TIM_Base_SetConfig+0x48>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a48      	ldr	r2, [pc, #288]	; (8007084 <TIM_Base_SetConfig+0x14c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00b      	beq.n	8006f80 <TIM_Base_SetConfig+0x48>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a47      	ldr	r2, [pc, #284]	; (8007088 <TIM_Base_SetConfig+0x150>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d007      	beq.n	8006f80 <TIM_Base_SetConfig+0x48>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a46      	ldr	r2, [pc, #280]	; (800708c <TIM_Base_SetConfig+0x154>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d003      	beq.n	8006f80 <TIM_Base_SetConfig+0x48>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a45      	ldr	r2, [pc, #276]	; (8007090 <TIM_Base_SetConfig+0x158>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d108      	bne.n	8006f92 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a39      	ldr	r2, [pc, #228]	; (800707c <TIM_Base_SetConfig+0x144>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d023      	beq.n	8006fe2 <TIM_Base_SetConfig+0xaa>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa0:	d01f      	beq.n	8006fe2 <TIM_Base_SetConfig+0xaa>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a36      	ldr	r2, [pc, #216]	; (8007080 <TIM_Base_SetConfig+0x148>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d01b      	beq.n	8006fe2 <TIM_Base_SetConfig+0xaa>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a35      	ldr	r2, [pc, #212]	; (8007084 <TIM_Base_SetConfig+0x14c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d017      	beq.n	8006fe2 <TIM_Base_SetConfig+0xaa>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a34      	ldr	r2, [pc, #208]	; (8007088 <TIM_Base_SetConfig+0x150>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d013      	beq.n	8006fe2 <TIM_Base_SetConfig+0xaa>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a33      	ldr	r2, [pc, #204]	; (800708c <TIM_Base_SetConfig+0x154>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d00f      	beq.n	8006fe2 <TIM_Base_SetConfig+0xaa>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a33      	ldr	r2, [pc, #204]	; (8007094 <TIM_Base_SetConfig+0x15c>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d00b      	beq.n	8006fe2 <TIM_Base_SetConfig+0xaa>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a32      	ldr	r2, [pc, #200]	; (8007098 <TIM_Base_SetConfig+0x160>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d007      	beq.n	8006fe2 <TIM_Base_SetConfig+0xaa>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a31      	ldr	r2, [pc, #196]	; (800709c <TIM_Base_SetConfig+0x164>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d003      	beq.n	8006fe2 <TIM_Base_SetConfig+0xaa>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a2c      	ldr	r2, [pc, #176]	; (8007090 <TIM_Base_SetConfig+0x158>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d108      	bne.n	8006ff4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	689a      	ldr	r2, [r3, #8]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a18      	ldr	r2, [pc, #96]	; (800707c <TIM_Base_SetConfig+0x144>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d013      	beq.n	8007048 <TIM_Base_SetConfig+0x110>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a1a      	ldr	r2, [pc, #104]	; (800708c <TIM_Base_SetConfig+0x154>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d00f      	beq.n	8007048 <TIM_Base_SetConfig+0x110>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a1a      	ldr	r2, [pc, #104]	; (8007094 <TIM_Base_SetConfig+0x15c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d00b      	beq.n	8007048 <TIM_Base_SetConfig+0x110>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a19      	ldr	r2, [pc, #100]	; (8007098 <TIM_Base_SetConfig+0x160>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d007      	beq.n	8007048 <TIM_Base_SetConfig+0x110>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a18      	ldr	r2, [pc, #96]	; (800709c <TIM_Base_SetConfig+0x164>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d003      	beq.n	8007048 <TIM_Base_SetConfig+0x110>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a13      	ldr	r2, [pc, #76]	; (8007090 <TIM_Base_SetConfig+0x158>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d103      	bne.n	8007050 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	691a      	ldr	r2, [r3, #16]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b01      	cmp	r3, #1
 8007060:	d105      	bne.n	800706e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	f023 0201 	bic.w	r2, r3, #1
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	611a      	str	r2, [r3, #16]
  }
}
 800706e:	bf00      	nop
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	40012c00 	.word	0x40012c00
 8007080:	40000400 	.word	0x40000400
 8007084:	40000800 	.word	0x40000800
 8007088:	40000c00 	.word	0x40000c00
 800708c:	40013400 	.word	0x40013400
 8007090:	40015000 	.word	0x40015000
 8007094:	40014000 	.word	0x40014000
 8007098:	40014400 	.word	0x40014400
 800709c:	40014800 	.word	0x40014800

080070a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	f023 0201 	bic.w	r2, r3, #1
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 0303 	bic.w	r3, r3, #3
 80070da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f023 0302 	bic.w	r3, r3, #2
 80070ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a30      	ldr	r2, [pc, #192]	; (80071bc <TIM_OC1_SetConfig+0x11c>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d013      	beq.n	8007128 <TIM_OC1_SetConfig+0x88>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a2f      	ldr	r2, [pc, #188]	; (80071c0 <TIM_OC1_SetConfig+0x120>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00f      	beq.n	8007128 <TIM_OC1_SetConfig+0x88>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a2e      	ldr	r2, [pc, #184]	; (80071c4 <TIM_OC1_SetConfig+0x124>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d00b      	beq.n	8007128 <TIM_OC1_SetConfig+0x88>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a2d      	ldr	r2, [pc, #180]	; (80071c8 <TIM_OC1_SetConfig+0x128>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d007      	beq.n	8007128 <TIM_OC1_SetConfig+0x88>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a2c      	ldr	r2, [pc, #176]	; (80071cc <TIM_OC1_SetConfig+0x12c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d003      	beq.n	8007128 <TIM_OC1_SetConfig+0x88>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a2b      	ldr	r2, [pc, #172]	; (80071d0 <TIM_OC1_SetConfig+0x130>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d10c      	bne.n	8007142 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	f023 0308 	bic.w	r3, r3, #8
 800712e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	4313      	orrs	r3, r2
 8007138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f023 0304 	bic.w	r3, r3, #4
 8007140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a1d      	ldr	r2, [pc, #116]	; (80071bc <TIM_OC1_SetConfig+0x11c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d013      	beq.n	8007172 <TIM_OC1_SetConfig+0xd2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a1c      	ldr	r2, [pc, #112]	; (80071c0 <TIM_OC1_SetConfig+0x120>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d00f      	beq.n	8007172 <TIM_OC1_SetConfig+0xd2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a1b      	ldr	r2, [pc, #108]	; (80071c4 <TIM_OC1_SetConfig+0x124>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d00b      	beq.n	8007172 <TIM_OC1_SetConfig+0xd2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a1a      	ldr	r2, [pc, #104]	; (80071c8 <TIM_OC1_SetConfig+0x128>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d007      	beq.n	8007172 <TIM_OC1_SetConfig+0xd2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a19      	ldr	r2, [pc, #100]	; (80071cc <TIM_OC1_SetConfig+0x12c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d003      	beq.n	8007172 <TIM_OC1_SetConfig+0xd2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a18      	ldr	r2, [pc, #96]	; (80071d0 <TIM_OC1_SetConfig+0x130>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d111      	bne.n	8007196 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	4313      	orrs	r3, r2
 800718a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	4313      	orrs	r3, r2
 8007194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	685a      	ldr	r2, [r3, #4]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	621a      	str	r2, [r3, #32]
}
 80071b0:	bf00      	nop
 80071b2:	371c      	adds	r7, #28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	40012c00 	.word	0x40012c00
 80071c0:	40013400 	.word	0x40013400
 80071c4:	40014000 	.word	0x40014000
 80071c8:	40014400 	.word	0x40014400
 80071cc:	40014800 	.word	0x40014800
 80071d0:	40015000 	.word	0x40015000

080071d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	f023 0210 	bic.w	r2, r3, #16
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800720e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	021b      	lsls	r3, r3, #8
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	4313      	orrs	r3, r2
 800721a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f023 0320 	bic.w	r3, r3, #32
 8007222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	011b      	lsls	r3, r3, #4
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	4313      	orrs	r3, r2
 800722e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a2c      	ldr	r2, [pc, #176]	; (80072e4 <TIM_OC2_SetConfig+0x110>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d007      	beq.n	8007248 <TIM_OC2_SetConfig+0x74>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a2b      	ldr	r2, [pc, #172]	; (80072e8 <TIM_OC2_SetConfig+0x114>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d003      	beq.n	8007248 <TIM_OC2_SetConfig+0x74>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a2a      	ldr	r2, [pc, #168]	; (80072ec <TIM_OC2_SetConfig+0x118>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d10d      	bne.n	8007264 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800724e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	011b      	lsls	r3, r3, #4
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	4313      	orrs	r3, r2
 800725a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007262:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a1f      	ldr	r2, [pc, #124]	; (80072e4 <TIM_OC2_SetConfig+0x110>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d013      	beq.n	8007294 <TIM_OC2_SetConfig+0xc0>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a1e      	ldr	r2, [pc, #120]	; (80072e8 <TIM_OC2_SetConfig+0x114>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d00f      	beq.n	8007294 <TIM_OC2_SetConfig+0xc0>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a1e      	ldr	r2, [pc, #120]	; (80072f0 <TIM_OC2_SetConfig+0x11c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00b      	beq.n	8007294 <TIM_OC2_SetConfig+0xc0>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a1d      	ldr	r2, [pc, #116]	; (80072f4 <TIM_OC2_SetConfig+0x120>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d007      	beq.n	8007294 <TIM_OC2_SetConfig+0xc0>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a1c      	ldr	r2, [pc, #112]	; (80072f8 <TIM_OC2_SetConfig+0x124>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d003      	beq.n	8007294 <TIM_OC2_SetConfig+0xc0>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a17      	ldr	r2, [pc, #92]	; (80072ec <TIM_OC2_SetConfig+0x118>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d113      	bne.n	80072bc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800729a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	621a      	str	r2, [r3, #32]
}
 80072d6:	bf00      	nop
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	40012c00 	.word	0x40012c00
 80072e8:	40013400 	.word	0x40013400
 80072ec:	40015000 	.word	0x40015000
 80072f0:	40014000 	.word	0x40014000
 80072f4:	40014400 	.word	0x40014400
 80072f8:	40014800 	.word	0x40014800

080072fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800732a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f023 0303 	bic.w	r3, r3, #3
 8007336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	4313      	orrs	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	021b      	lsls	r3, r3, #8
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	4313      	orrs	r3, r2
 8007354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a2b      	ldr	r2, [pc, #172]	; (8007408 <TIM_OC3_SetConfig+0x10c>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d007      	beq.n	800736e <TIM_OC3_SetConfig+0x72>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a2a      	ldr	r2, [pc, #168]	; (800740c <TIM_OC3_SetConfig+0x110>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d003      	beq.n	800736e <TIM_OC3_SetConfig+0x72>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a29      	ldr	r2, [pc, #164]	; (8007410 <TIM_OC3_SetConfig+0x114>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d10d      	bne.n	800738a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007374:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	021b      	lsls	r3, r3, #8
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	4313      	orrs	r3, r2
 8007380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a1e      	ldr	r2, [pc, #120]	; (8007408 <TIM_OC3_SetConfig+0x10c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d013      	beq.n	80073ba <TIM_OC3_SetConfig+0xbe>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a1d      	ldr	r2, [pc, #116]	; (800740c <TIM_OC3_SetConfig+0x110>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d00f      	beq.n	80073ba <TIM_OC3_SetConfig+0xbe>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a1d      	ldr	r2, [pc, #116]	; (8007414 <TIM_OC3_SetConfig+0x118>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d00b      	beq.n	80073ba <TIM_OC3_SetConfig+0xbe>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a1c      	ldr	r2, [pc, #112]	; (8007418 <TIM_OC3_SetConfig+0x11c>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d007      	beq.n	80073ba <TIM_OC3_SetConfig+0xbe>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a1b      	ldr	r2, [pc, #108]	; (800741c <TIM_OC3_SetConfig+0x120>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d003      	beq.n	80073ba <TIM_OC3_SetConfig+0xbe>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a16      	ldr	r2, [pc, #88]	; (8007410 <TIM_OC3_SetConfig+0x114>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d113      	bne.n	80073e2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	011b      	lsls	r3, r3, #4
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	4313      	orrs	r3, r2
 80073e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	621a      	str	r2, [r3, #32]
}
 80073fc:	bf00      	nop
 80073fe:	371c      	adds	r7, #28
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	40012c00 	.word	0x40012c00
 800740c:	40013400 	.word	0x40013400
 8007410:	40015000 	.word	0x40015000
 8007414:	40014000 	.word	0x40014000
 8007418:	40014400 	.word	0x40014400
 800741c:	40014800 	.word	0x40014800

08007420 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800744e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800745a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	021b      	lsls	r3, r3, #8
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	4313      	orrs	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800746e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	031b      	lsls	r3, r3, #12
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	4313      	orrs	r3, r2
 800747a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a2c      	ldr	r2, [pc, #176]	; (8007530 <TIM_OC4_SetConfig+0x110>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d007      	beq.n	8007494 <TIM_OC4_SetConfig+0x74>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a2b      	ldr	r2, [pc, #172]	; (8007534 <TIM_OC4_SetConfig+0x114>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d003      	beq.n	8007494 <TIM_OC4_SetConfig+0x74>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a2a      	ldr	r2, [pc, #168]	; (8007538 <TIM_OC4_SetConfig+0x118>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d10d      	bne.n	80074b0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800749a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	031b      	lsls	r3, r3, #12
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a1f      	ldr	r2, [pc, #124]	; (8007530 <TIM_OC4_SetConfig+0x110>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d013      	beq.n	80074e0 <TIM_OC4_SetConfig+0xc0>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a1e      	ldr	r2, [pc, #120]	; (8007534 <TIM_OC4_SetConfig+0x114>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00f      	beq.n	80074e0 <TIM_OC4_SetConfig+0xc0>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a1e      	ldr	r2, [pc, #120]	; (800753c <TIM_OC4_SetConfig+0x11c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d00b      	beq.n	80074e0 <TIM_OC4_SetConfig+0xc0>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a1d      	ldr	r2, [pc, #116]	; (8007540 <TIM_OC4_SetConfig+0x120>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d007      	beq.n	80074e0 <TIM_OC4_SetConfig+0xc0>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a1c      	ldr	r2, [pc, #112]	; (8007544 <TIM_OC4_SetConfig+0x124>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d003      	beq.n	80074e0 <TIM_OC4_SetConfig+0xc0>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a17      	ldr	r2, [pc, #92]	; (8007538 <TIM_OC4_SetConfig+0x118>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d113      	bne.n	8007508 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074e6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074ee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	019b      	lsls	r3, r3, #6
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	019b      	lsls	r3, r3, #6
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	4313      	orrs	r3, r2
 8007506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	621a      	str	r2, [r3, #32]
}
 8007522:	bf00      	nop
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	40012c00 	.word	0x40012c00
 8007534:	40013400 	.word	0x40013400
 8007538:	40015000 	.word	0x40015000
 800753c:	40014000 	.word	0x40014000
 8007540:	40014400 	.word	0x40014400
 8007544:	40014800 	.word	0x40014800

08007548 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007548:	b480      	push	{r7}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800756e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	4313      	orrs	r3, r2
 8007584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800758c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	041b      	lsls	r3, r3, #16
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	4313      	orrs	r3, r2
 8007598:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a19      	ldr	r2, [pc, #100]	; (8007604 <TIM_OC5_SetConfig+0xbc>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d013      	beq.n	80075ca <TIM_OC5_SetConfig+0x82>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a18      	ldr	r2, [pc, #96]	; (8007608 <TIM_OC5_SetConfig+0xc0>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d00f      	beq.n	80075ca <TIM_OC5_SetConfig+0x82>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a17      	ldr	r2, [pc, #92]	; (800760c <TIM_OC5_SetConfig+0xc4>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d00b      	beq.n	80075ca <TIM_OC5_SetConfig+0x82>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a16      	ldr	r2, [pc, #88]	; (8007610 <TIM_OC5_SetConfig+0xc8>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d007      	beq.n	80075ca <TIM_OC5_SetConfig+0x82>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a15      	ldr	r2, [pc, #84]	; (8007614 <TIM_OC5_SetConfig+0xcc>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d003      	beq.n	80075ca <TIM_OC5_SetConfig+0x82>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a14      	ldr	r2, [pc, #80]	; (8007618 <TIM_OC5_SetConfig+0xd0>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d109      	bne.n	80075de <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	021b      	lsls	r3, r3, #8
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	4313      	orrs	r3, r2
 80075dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	621a      	str	r2, [r3, #32]
}
 80075f8:	bf00      	nop
 80075fa:	371c      	adds	r7, #28
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	40012c00 	.word	0x40012c00
 8007608:	40013400 	.word	0x40013400
 800760c:	40014000 	.word	0x40014000
 8007610:	40014400 	.word	0x40014400
 8007614:	40014800 	.word	0x40014800
 8007618:	40015000 	.word	0x40015000

0800761c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800761c:	b480      	push	{r7}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a1b      	ldr	r3, [r3, #32]
 8007630:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800764a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800764e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	021b      	lsls	r3, r3, #8
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	4313      	orrs	r3, r2
 800765a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007662:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	051b      	lsls	r3, r3, #20
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	4313      	orrs	r3, r2
 800766e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a1a      	ldr	r2, [pc, #104]	; (80076dc <TIM_OC6_SetConfig+0xc0>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d013      	beq.n	80076a0 <TIM_OC6_SetConfig+0x84>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a19      	ldr	r2, [pc, #100]	; (80076e0 <TIM_OC6_SetConfig+0xc4>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d00f      	beq.n	80076a0 <TIM_OC6_SetConfig+0x84>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a18      	ldr	r2, [pc, #96]	; (80076e4 <TIM_OC6_SetConfig+0xc8>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d00b      	beq.n	80076a0 <TIM_OC6_SetConfig+0x84>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a17      	ldr	r2, [pc, #92]	; (80076e8 <TIM_OC6_SetConfig+0xcc>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d007      	beq.n	80076a0 <TIM_OC6_SetConfig+0x84>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a16      	ldr	r2, [pc, #88]	; (80076ec <TIM_OC6_SetConfig+0xd0>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d003      	beq.n	80076a0 <TIM_OC6_SetConfig+0x84>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a15      	ldr	r2, [pc, #84]	; (80076f0 <TIM_OC6_SetConfig+0xd4>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d109      	bne.n	80076b4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	029b      	lsls	r3, r3, #10
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	621a      	str	r2, [r3, #32]
}
 80076ce:	bf00      	nop
 80076d0:	371c      	adds	r7, #28
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	40012c00 	.word	0x40012c00
 80076e0:	40013400 	.word	0x40013400
 80076e4:	40014000 	.word	0x40014000
 80076e8:	40014400 	.word	0x40014400
 80076ec:	40014800 	.word	0x40014800
 80076f0:	40015000 	.word	0x40015000

080076f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	f023 0201 	bic.w	r2, r3, #1
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800771e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	011b      	lsls	r3, r3, #4
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	4313      	orrs	r3, r2
 8007728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f023 030a 	bic.w	r3, r3, #10
 8007730:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4313      	orrs	r3, r2
 8007738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	621a      	str	r2, [r3, #32]
}
 8007746:	bf00      	nop
 8007748:	371c      	adds	r7, #28
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007752:	b480      	push	{r7}
 8007754:	b087      	sub	sp, #28
 8007756:	af00      	add	r7, sp, #0
 8007758:	60f8      	str	r0, [r7, #12]
 800775a:	60b9      	str	r1, [r7, #8]
 800775c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	f023 0210 	bic.w	r2, r3, #16
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800777c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	031b      	lsls	r3, r3, #12
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	4313      	orrs	r3, r2
 8007786:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800778e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	011b      	lsls	r3, r3, #4
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	4313      	orrs	r3, r2
 8007798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	621a      	str	r2, [r3, #32]
}
 80077a6:	bf00      	nop
 80077a8:	371c      	adds	r7, #28
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b085      	sub	sp, #20
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80077c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	f043 0307 	orr.w	r3, r3, #7
 80077d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	609a      	str	r2, [r3, #8]
}
 80077e0:	bf00      	nop
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
 80077f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007806:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	021a      	lsls	r2, r3, #8
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	431a      	orrs	r2, r3
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	4313      	orrs	r3, r2
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	4313      	orrs	r3, r2
 8007818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	609a      	str	r2, [r3, #8]
}
 8007820:	bf00      	nop
 8007822:	371c      	adds	r7, #28
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f003 031f 	and.w	r3, r3, #31
 800783e:	2201      	movs	r2, #1
 8007840:	fa02 f303 	lsl.w	r3, r2, r3
 8007844:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6a1a      	ldr	r2, [r3, #32]
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	43db      	mvns	r3, r3
 800784e:	401a      	ands	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6a1a      	ldr	r2, [r3, #32]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f003 031f 	and.w	r3, r3, #31
 800785e:	6879      	ldr	r1, [r7, #4]
 8007860:	fa01 f303 	lsl.w	r3, r1, r3
 8007864:	431a      	orrs	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	621a      	str	r2, [r3, #32]
}
 800786a:	bf00      	nop
 800786c:	371c      	adds	r7, #28
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
	...

08007878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007888:	2b01      	cmp	r3, #1
 800788a:	d101      	bne.n	8007890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800788c:	2302      	movs	r3, #2
 800788e:	e074      	b.n	800797a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2202      	movs	r2, #2
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a34      	ldr	r2, [pc, #208]	; (8007988 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d009      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a33      	ldr	r2, [pc, #204]	; (800798c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d004      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a31      	ldr	r2, [pc, #196]	; (8007990 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d108      	bne.n	80078e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80078d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	4313      	orrs	r3, r2
 80078de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80078e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a21      	ldr	r2, [pc, #132]	; (8007988 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d022      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007910:	d01d      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a1f      	ldr	r2, [pc, #124]	; (8007994 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d018      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a1d      	ldr	r2, [pc, #116]	; (8007998 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d013      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a1c      	ldr	r2, [pc, #112]	; (800799c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d00e      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a15      	ldr	r2, [pc, #84]	; (800798c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d009      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a18      	ldr	r2, [pc, #96]	; (80079a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d004      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a11      	ldr	r2, [pc, #68]	; (8007990 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d10c      	bne.n	8007968 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007954:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	4313      	orrs	r3, r2
 800795e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	40012c00 	.word	0x40012c00
 800798c:	40013400 	.word	0x40013400
 8007990:	40015000 	.word	0x40015000
 8007994:	40000400 	.word	0x40000400
 8007998:	40000800 	.word	0x40000800
 800799c:	40000c00 	.word	0x40000c00
 80079a0:	40014000 	.word	0x40014000

080079a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80079ae:	2300      	movs	r3, #0
 80079b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d101      	bne.n	80079c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80079bc:	2302      	movs	r3, #2
 80079be:	e078      	b.n	8007ab2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	695b      	ldr	r3, [r3, #20]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	041b      	lsls	r3, r3, #16
 8007a36:	4313      	orrs	r3, r2
 8007a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a1c      	ldr	r2, [pc, #112]	; (8007ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d009      	beq.n	8007a66 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a1b      	ldr	r2, [pc, #108]	; (8007ac4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d004      	beq.n	8007a66 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a19      	ldr	r2, [pc, #100]	; (8007ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d11c      	bne.n	8007aa0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a70:	051b      	lsls	r3, r3, #20
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	6a1b      	ldr	r3, [r3, #32]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	40012c00 	.word	0x40012c00
 8007ac4:	40013400 	.word	0x40013400
 8007ac8:	40015000 	.word	0x40015000

08007acc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e042      	b.n	8007bf0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d106      	bne.n	8007b82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7fa fc49 	bl	8002414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2224      	movs	r2, #36	; 0x24
 8007b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f022 0201 	bic.w	r2, r2, #1
 8007b98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 ffc4 	bl	8008b30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fcc5 	bl	8008538 <UART_SetConfig>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d101      	bne.n	8007bb8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e01b      	b.n	8007bf0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689a      	ldr	r2, [r3, #8]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0201 	orr.w	r2, r2, #1
 8007be6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 f843 	bl	8008c74 <UART_CheckIdleState>
 8007bee:	4603      	mov	r3, r0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08a      	sub	sp, #40	; 0x28
 8007bfc:	af02      	add	r7, sp, #8
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	603b      	str	r3, [r7, #0]
 8007c04:	4613      	mov	r3, r2
 8007c06:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c0e:	2b20      	cmp	r3, #32
 8007c10:	f040 80b5 	bne.w	8007d7e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <HAL_UART_Receive+0x28>
 8007c1a:	88fb      	ldrh	r3, [r7, #6]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e0ad      	b.n	8007d80 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2222      	movs	r2, #34	; 0x22
 8007c30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c3a:	f7fa feeb 	bl	8002a14 <HAL_GetTick>
 8007c3e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	88fa      	ldrh	r2, [r7, #6]
 8007c44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	88fa      	ldrh	r2, [r7, #6]
 8007c4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c58:	d10e      	bne.n	8007c78 <HAL_UART_Receive+0x80>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d105      	bne.n	8007c6e <HAL_UART_Receive+0x76>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007c68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c6c:	e02d      	b.n	8007cca <HAL_UART_Receive+0xd2>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	22ff      	movs	r2, #255	; 0xff
 8007c72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c76:	e028      	b.n	8007cca <HAL_UART_Receive+0xd2>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10d      	bne.n	8007c9c <HAL_UART_Receive+0xa4>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d104      	bne.n	8007c92 <HAL_UART_Receive+0x9a>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	22ff      	movs	r2, #255	; 0xff
 8007c8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c90:	e01b      	b.n	8007cca <HAL_UART_Receive+0xd2>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	227f      	movs	r2, #127	; 0x7f
 8007c96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007c9a:	e016      	b.n	8007cca <HAL_UART_Receive+0xd2>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ca4:	d10d      	bne.n	8007cc2 <HAL_UART_Receive+0xca>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d104      	bne.n	8007cb8 <HAL_UART_Receive+0xc0>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	227f      	movs	r2, #127	; 0x7f
 8007cb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007cb6:	e008      	b.n	8007cca <HAL_UART_Receive+0xd2>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	223f      	movs	r2, #63	; 0x3f
 8007cbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007cc0:	e003      	b.n	8007cca <HAL_UART_Receive+0xd2>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007cd0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cda:	d108      	bne.n	8007cee <HAL_UART_Receive+0xf6>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d104      	bne.n	8007cee <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	61bb      	str	r3, [r7, #24]
 8007cec:	e003      	b.n	8007cf6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007cf6:	e036      	b.n	8007d66 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2120      	movs	r1, #32
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f001 f860 	bl	8008dc8 <UART_WaitOnFlagUntilTimeout>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d005      	beq.n	8007d1a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2220      	movs	r2, #32
 8007d12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e032      	b.n	8007d80 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10c      	bne.n	8007d3a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	8a7b      	ldrh	r3, [r7, #18]
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	3302      	adds	r3, #2
 8007d36:	61bb      	str	r3, [r7, #24]
 8007d38:	e00c      	b.n	8007d54 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	8a7b      	ldrh	r3, [r7, #18]
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	4013      	ands	r3, r2
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	3301      	adds	r3, #1
 8007d52:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1c2      	bne.n	8007cf8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2220      	movs	r2, #32
 8007d76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	e000      	b.n	8007d80 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8007d7e:	2302      	movs	r3, #2
  }
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3720      	adds	r7, #32
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b091      	sub	sp, #68	; 0x44
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	4613      	mov	r3, r2
 8007d94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d9c:	2b20      	cmp	r3, #32
 8007d9e:	d178      	bne.n	8007e92 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d002      	beq.n	8007dac <HAL_UART_Transmit_IT+0x24>
 8007da6:	88fb      	ldrh	r3, [r7, #6]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e071      	b.n	8007e94 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	88fa      	ldrh	r2, [r7, #6]
 8007dba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	88fa      	ldrh	r2, [r7, #6]
 8007dc2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2221      	movs	r2, #33	; 0x21
 8007dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007de4:	d12a      	bne.n	8007e3c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dee:	d107      	bne.n	8007e00 <HAL_UART_Transmit_IT+0x78>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d103      	bne.n	8007e00 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	4a29      	ldr	r2, [pc, #164]	; (8007ea0 <HAL_UART_Transmit_IT+0x118>)
 8007dfc:	679a      	str	r2, [r3, #120]	; 0x78
 8007dfe:	e002      	b.n	8007e06 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4a28      	ldr	r2, [pc, #160]	; (8007ea4 <HAL_UART_Transmit_IT+0x11c>)
 8007e04:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e10:	e853 3f00 	ldrex	r3, [r3]
 8007e14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3308      	adds	r3, #8
 8007e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e26:	637a      	str	r2, [r7, #52]	; 0x34
 8007e28:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e5      	bne.n	8007e06 <HAL_UART_Transmit_IT+0x7e>
 8007e3a:	e028      	b.n	8007e8e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e44:	d107      	bne.n	8007e56 <HAL_UART_Transmit_IT+0xce>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d103      	bne.n	8007e56 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	4a15      	ldr	r2, [pc, #84]	; (8007ea8 <HAL_UART_Transmit_IT+0x120>)
 8007e52:	679a      	str	r2, [r3, #120]	; 0x78
 8007e54:	e002      	b.n	8007e5c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	4a14      	ldr	r2, [pc, #80]	; (8007eac <HAL_UART_Transmit_IT+0x124>)
 8007e5a:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	613b      	str	r3, [r7, #16]
   return(result);
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7a:	623b      	str	r3, [r7, #32]
 8007e7c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	69f9      	ldr	r1, [r7, #28]
 8007e80:	6a3a      	ldr	r2, [r7, #32]
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e6      	bne.n	8007e5c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	e000      	b.n	8007e94 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007e92:	2302      	movs	r3, #2
  }
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3744      	adds	r7, #68	; 0x44
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	080091f5 	.word	0x080091f5
 8007ea4:	08009115 	.word	0x08009115
 8007ea8:	08009053 	.word	0x08009053
 8007eac:	08008f9b 	.word	0x08008f9b

08007eb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b0ba      	sub	sp, #232	; 0xe8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ed6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007eda:	f640 030f 	movw	r3, #2063	; 0x80f
 8007ede:	4013      	ands	r3, r2
 8007ee0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007ee4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d11b      	bne.n	8007f24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ef0:	f003 0320 	and.w	r3, r3, #32
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d015      	beq.n	8007f24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007efc:	f003 0320 	and.w	r3, r3, #32
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d105      	bne.n	8007f10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d009      	beq.n	8007f24 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 82e3 	beq.w	80084e0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	4798      	blx	r3
      }
      return;
 8007f22:	e2dd      	b.n	80084e0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 8123 	beq.w	8008174 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007f2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007f32:	4b8d      	ldr	r3, [pc, #564]	; (8008168 <HAL_UART_IRQHandler+0x2b8>)
 8007f34:	4013      	ands	r3, r2
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d106      	bne.n	8007f48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007f3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007f3e:	4b8b      	ldr	r3, [pc, #556]	; (800816c <HAL_UART_IRQHandler+0x2bc>)
 8007f40:	4013      	ands	r3, r2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f000 8116 	beq.w	8008174 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f4c:	f003 0301 	and.w	r3, r3, #1
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d011      	beq.n	8007f78 <HAL_UART_IRQHandler+0xc8>
 8007f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00b      	beq.n	8007f78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2201      	movs	r2, #1
 8007f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f6e:	f043 0201 	orr.w	r2, r3, #1
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f7c:	f003 0302 	and.w	r3, r3, #2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d011      	beq.n	8007fa8 <HAL_UART_IRQHandler+0xf8>
 8007f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f88:	f003 0301 	and.w	r3, r3, #1
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00b      	beq.n	8007fa8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2202      	movs	r2, #2
 8007f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f9e:	f043 0204 	orr.w	r2, r3, #4
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fac:	f003 0304 	and.w	r3, r3, #4
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d011      	beq.n	8007fd8 <HAL_UART_IRQHandler+0x128>
 8007fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fb8:	f003 0301 	and.w	r3, r3, #1
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00b      	beq.n	8007fd8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2204      	movs	r2, #4
 8007fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fce:	f043 0202 	orr.w	r2, r3, #2
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fdc:	f003 0308 	and.w	r3, r3, #8
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d017      	beq.n	8008014 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fe8:	f003 0320 	and.w	r3, r3, #32
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d105      	bne.n	8007ffc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007ff0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007ff4:	4b5c      	ldr	r3, [pc, #368]	; (8008168 <HAL_UART_IRQHandler+0x2b8>)
 8007ff6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00b      	beq.n	8008014 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2208      	movs	r2, #8
 8008002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800800a:	f043 0208 	orr.w	r2, r3, #8
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800801c:	2b00      	cmp	r3, #0
 800801e:	d012      	beq.n	8008046 <HAL_UART_IRQHandler+0x196>
 8008020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008024:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00c      	beq.n	8008046 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008034:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800803c:	f043 0220 	orr.w	r2, r3, #32
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 8249 	beq.w	80084e4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008056:	f003 0320 	and.w	r3, r3, #32
 800805a:	2b00      	cmp	r3, #0
 800805c:	d013      	beq.n	8008086 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800805e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008062:	f003 0320 	and.w	r3, r3, #32
 8008066:	2b00      	cmp	r3, #0
 8008068:	d105      	bne.n	8008076 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800806a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800806e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d007      	beq.n	8008086 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800808c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809a:	2b40      	cmp	r3, #64	; 0x40
 800809c:	d005      	beq.n	80080aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800809e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d054      	beq.n	8008154 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fef9 	bl	8008ea2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ba:	2b40      	cmp	r3, #64	; 0x40
 80080bc:	d146      	bne.n	800814c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3308      	adds	r3, #8
 80080c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080cc:	e853 3f00 	ldrex	r3, [r3]
 80080d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80080d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3308      	adds	r3, #8
 80080e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80080ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80080ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80080f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80080fa:	e841 2300 	strex	r3, r2, [r1]
 80080fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1d9      	bne.n	80080be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008110:	2b00      	cmp	r3, #0
 8008112:	d017      	beq.n	8008144 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800811a:	4a15      	ldr	r2, [pc, #84]	; (8008170 <HAL_UART_IRQHandler+0x2c0>)
 800811c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008124:	4618      	mov	r0, r3
 8008126:	f7fc fba7 	bl	8004878 <HAL_DMA_Abort_IT>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d019      	beq.n	8008164 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800813e:	4610      	mov	r0, r2
 8008140:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008142:	e00f      	b.n	8008164 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f9e1 	bl	800850c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800814a:	e00b      	b.n	8008164 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f9dd 	bl	800850c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008152:	e007      	b.n	8008164 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f9d9 	bl	800850c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008162:	e1bf      	b.n	80084e4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008164:	bf00      	nop
    return;
 8008166:	e1bd      	b.n	80084e4 <HAL_UART_IRQHandler+0x634>
 8008168:	10000001 	.word	0x10000001
 800816c:	04000120 	.word	0x04000120
 8008170:	08008f6f 	.word	0x08008f6f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008178:	2b01      	cmp	r3, #1
 800817a:	f040 8153 	bne.w	8008424 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800817e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008182:	f003 0310 	and.w	r3, r3, #16
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 814c 	beq.w	8008424 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800818c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008190:	f003 0310 	and.w	r3, r3, #16
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 8145 	beq.w	8008424 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2210      	movs	r2, #16
 80081a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ac:	2b40      	cmp	r3, #64	; 0x40
 80081ae:	f040 80bb 	bne.w	8008328 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 818f 	beq.w	80084e8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081d4:	429a      	cmp	r2, r3
 80081d6:	f080 8187 	bcs.w	80084e8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0320 	and.w	r3, r3, #32
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f040 8087 	bne.w	8008306 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008200:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800820c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008214:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	461a      	mov	r2, r3
 800821e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008222:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008226:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800822e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008232:	e841 2300 	strex	r3, r2, [r1]
 8008236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800823a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1da      	bne.n	80081f8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3308      	adds	r3, #8
 8008248:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008252:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008254:	f023 0301 	bic.w	r3, r3, #1
 8008258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3308      	adds	r3, #8
 8008262:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008266:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800826a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800826e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008272:	e841 2300 	strex	r3, r2, [r1]
 8008276:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1e1      	bne.n	8008242 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3308      	adds	r3, #8
 8008284:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008288:	e853 3f00 	ldrex	r3, [r3]
 800828c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800828e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008294:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3308      	adds	r3, #8
 800829e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80082a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80082a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082aa:	e841 2300 	strex	r3, r2, [r1]
 80082ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1e3      	bne.n	800827e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082cc:	e853 3f00 	ldrex	r3, [r3]
 80082d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082d4:	f023 0310 	bic.w	r3, r3, #16
 80082d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	461a      	mov	r2, r3
 80082e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80082e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082ee:	e841 2300 	strex	r3, r2, [r1]
 80082f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1e4      	bne.n	80082c4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008300:	4618      	mov	r0, r3
 8008302:	f7fc fa60 	bl	80047c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2202      	movs	r2, #2
 800830a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008318:	b29b      	uxth	r3, r3
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	b29b      	uxth	r3, r3
 800831e:	4619      	mov	r1, r3
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f8fd 	bl	8008520 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008326:	e0df      	b.n	80084e8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008334:	b29b      	uxth	r3, r3
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008342:	b29b      	uxth	r3, r3
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 80d1 	beq.w	80084ec <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800834a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 80cc 	beq.w	80084ec <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008364:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008368:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	461a      	mov	r2, r3
 8008372:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008376:	647b      	str	r3, [r7, #68]	; 0x44
 8008378:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800837c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800837e:	e841 2300 	strex	r3, r2, [r1]
 8008382:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1e4      	bne.n	8008354 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3308      	adds	r3, #8
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008394:	e853 3f00 	ldrex	r3, [r3]
 8008398:	623b      	str	r3, [r7, #32]
   return(result);
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083a0:	f023 0301 	bic.w	r3, r3, #1
 80083a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3308      	adds	r3, #8
 80083ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80083b2:	633a      	str	r2, [r7, #48]	; 0x30
 80083b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ba:	e841 2300 	strex	r3, r2, [r1]
 80083be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1e1      	bne.n	800838a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2220      	movs	r2, #32
 80083ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	e853 3f00 	ldrex	r3, [r3]
 80083e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f023 0310 	bic.w	r3, r3, #16
 80083ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	461a      	mov	r2, r3
 80083f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80083fc:	61fb      	str	r3, [r7, #28]
 80083fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008400:	69b9      	ldr	r1, [r7, #24]
 8008402:	69fa      	ldr	r2, [r7, #28]
 8008404:	e841 2300 	strex	r3, r2, [r1]
 8008408:	617b      	str	r3, [r7, #20]
   return(result);
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1e4      	bne.n	80083da <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2202      	movs	r2, #2
 8008414:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008416:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800841a:	4619      	mov	r1, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f87f 	bl	8008520 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008422:	e063      	b.n	80084ec <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00e      	beq.n	800844e <HAL_UART_IRQHandler+0x59e>
 8008430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d008      	beq.n	800844e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008444:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 ff74 	bl	8009334 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800844c:	e051      	b.n	80084f2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800844e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008456:	2b00      	cmp	r3, #0
 8008458:	d014      	beq.n	8008484 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800845a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800845e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008462:	2b00      	cmp	r3, #0
 8008464:	d105      	bne.n	8008472 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800846a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d008      	beq.n	8008484 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008476:	2b00      	cmp	r3, #0
 8008478:	d03a      	beq.n	80084f0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	4798      	blx	r3
    }
    return;
 8008482:	e035      	b.n	80084f0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848c:	2b00      	cmp	r3, #0
 800848e:	d009      	beq.n	80084a4 <HAL_UART_IRQHandler+0x5f4>
 8008490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008498:	2b00      	cmp	r3, #0
 800849a:	d003      	beq.n	80084a4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 ff1e 	bl	80092de <UART_EndTransmit_IT>
    return;
 80084a2:	e026      	b.n	80084f2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80084a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d009      	beq.n	80084c4 <HAL_UART_IRQHandler+0x614>
 80084b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d003      	beq.n	80084c4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 ff4d 	bl	800935c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084c2:	e016      	b.n	80084f2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80084c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d010      	beq.n	80084f2 <HAL_UART_IRQHandler+0x642>
 80084d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	da0c      	bge.n	80084f2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 ff35 	bl	8009348 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084de:	e008      	b.n	80084f2 <HAL_UART_IRQHandler+0x642>
      return;
 80084e0:	bf00      	nop
 80084e2:	e006      	b.n	80084f2 <HAL_UART_IRQHandler+0x642>
    return;
 80084e4:	bf00      	nop
 80084e6:	e004      	b.n	80084f2 <HAL_UART_IRQHandler+0x642>
      return;
 80084e8:	bf00      	nop
 80084ea:	e002      	b.n	80084f2 <HAL_UART_IRQHandler+0x642>
      return;
 80084ec:	bf00      	nop
 80084ee:	e000      	b.n	80084f2 <HAL_UART_IRQHandler+0x642>
    return;
 80084f0:	bf00      	nop
  }
}
 80084f2:	37e8      	adds	r7, #232	; 0xe8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800853c:	b08c      	sub	sp, #48	; 0x30
 800853e:	af00      	add	r7, sp, #0
 8008540:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	689a      	ldr	r2, [r3, #8]
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	431a      	orrs	r2, r3
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	431a      	orrs	r2, r3
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	69db      	ldr	r3, [r3, #28]
 800855c:	4313      	orrs	r3, r2
 800855e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	4baa      	ldr	r3, [pc, #680]	; (8008810 <UART_SetConfig+0x2d8>)
 8008568:	4013      	ands	r3, r2
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	6812      	ldr	r2, [r2, #0]
 800856e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008570:	430b      	orrs	r3, r1
 8008572:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	68da      	ldr	r2, [r3, #12]
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	430a      	orrs	r2, r1
 8008588:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a9f      	ldr	r2, [pc, #636]	; (8008814 <UART_SetConfig+0x2dc>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d004      	beq.n	80085a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085a0:	4313      	orrs	r3, r2
 80085a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80085ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	6812      	ldr	r2, [r2, #0]
 80085b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085b8:	430b      	orrs	r3, r1
 80085ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c2:	f023 010f 	bic.w	r1, r3, #15
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a90      	ldr	r2, [pc, #576]	; (8008818 <UART_SetConfig+0x2e0>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d125      	bne.n	8008628 <UART_SetConfig+0xf0>
 80085dc:	4b8f      	ldr	r3, [pc, #572]	; (800881c <UART_SetConfig+0x2e4>)
 80085de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085e2:	f003 0303 	and.w	r3, r3, #3
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d81a      	bhi.n	8008620 <UART_SetConfig+0xe8>
 80085ea:	a201      	add	r2, pc, #4	; (adr r2, 80085f0 <UART_SetConfig+0xb8>)
 80085ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f0:	08008601 	.word	0x08008601
 80085f4:	08008611 	.word	0x08008611
 80085f8:	08008609 	.word	0x08008609
 80085fc:	08008619 	.word	0x08008619
 8008600:	2301      	movs	r3, #1
 8008602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008606:	e116      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008608:	2302      	movs	r3, #2
 800860a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800860e:	e112      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008610:	2304      	movs	r3, #4
 8008612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008616:	e10e      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008618:	2308      	movs	r3, #8
 800861a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800861e:	e10a      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008620:	2310      	movs	r3, #16
 8008622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008626:	e106      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a7c      	ldr	r2, [pc, #496]	; (8008820 <UART_SetConfig+0x2e8>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d138      	bne.n	80086a4 <UART_SetConfig+0x16c>
 8008632:	4b7a      	ldr	r3, [pc, #488]	; (800881c <UART_SetConfig+0x2e4>)
 8008634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008638:	f003 030c 	and.w	r3, r3, #12
 800863c:	2b0c      	cmp	r3, #12
 800863e:	d82d      	bhi.n	800869c <UART_SetConfig+0x164>
 8008640:	a201      	add	r2, pc, #4	; (adr r2, 8008648 <UART_SetConfig+0x110>)
 8008642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008646:	bf00      	nop
 8008648:	0800867d 	.word	0x0800867d
 800864c:	0800869d 	.word	0x0800869d
 8008650:	0800869d 	.word	0x0800869d
 8008654:	0800869d 	.word	0x0800869d
 8008658:	0800868d 	.word	0x0800868d
 800865c:	0800869d 	.word	0x0800869d
 8008660:	0800869d 	.word	0x0800869d
 8008664:	0800869d 	.word	0x0800869d
 8008668:	08008685 	.word	0x08008685
 800866c:	0800869d 	.word	0x0800869d
 8008670:	0800869d 	.word	0x0800869d
 8008674:	0800869d 	.word	0x0800869d
 8008678:	08008695 	.word	0x08008695
 800867c:	2300      	movs	r3, #0
 800867e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008682:	e0d8      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008684:	2302      	movs	r3, #2
 8008686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800868a:	e0d4      	b.n	8008836 <UART_SetConfig+0x2fe>
 800868c:	2304      	movs	r3, #4
 800868e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008692:	e0d0      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008694:	2308      	movs	r3, #8
 8008696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800869a:	e0cc      	b.n	8008836 <UART_SetConfig+0x2fe>
 800869c:	2310      	movs	r3, #16
 800869e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086a2:	e0c8      	b.n	8008836 <UART_SetConfig+0x2fe>
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a5e      	ldr	r2, [pc, #376]	; (8008824 <UART_SetConfig+0x2ec>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d125      	bne.n	80086fa <UART_SetConfig+0x1c2>
 80086ae:	4b5b      	ldr	r3, [pc, #364]	; (800881c <UART_SetConfig+0x2e4>)
 80086b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80086b8:	2b30      	cmp	r3, #48	; 0x30
 80086ba:	d016      	beq.n	80086ea <UART_SetConfig+0x1b2>
 80086bc:	2b30      	cmp	r3, #48	; 0x30
 80086be:	d818      	bhi.n	80086f2 <UART_SetConfig+0x1ba>
 80086c0:	2b20      	cmp	r3, #32
 80086c2:	d00a      	beq.n	80086da <UART_SetConfig+0x1a2>
 80086c4:	2b20      	cmp	r3, #32
 80086c6:	d814      	bhi.n	80086f2 <UART_SetConfig+0x1ba>
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <UART_SetConfig+0x19a>
 80086cc:	2b10      	cmp	r3, #16
 80086ce:	d008      	beq.n	80086e2 <UART_SetConfig+0x1aa>
 80086d0:	e00f      	b.n	80086f2 <UART_SetConfig+0x1ba>
 80086d2:	2300      	movs	r3, #0
 80086d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086d8:	e0ad      	b.n	8008836 <UART_SetConfig+0x2fe>
 80086da:	2302      	movs	r3, #2
 80086dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086e0:	e0a9      	b.n	8008836 <UART_SetConfig+0x2fe>
 80086e2:	2304      	movs	r3, #4
 80086e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086e8:	e0a5      	b.n	8008836 <UART_SetConfig+0x2fe>
 80086ea:	2308      	movs	r3, #8
 80086ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086f0:	e0a1      	b.n	8008836 <UART_SetConfig+0x2fe>
 80086f2:	2310      	movs	r3, #16
 80086f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086f8:	e09d      	b.n	8008836 <UART_SetConfig+0x2fe>
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a4a      	ldr	r2, [pc, #296]	; (8008828 <UART_SetConfig+0x2f0>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d125      	bne.n	8008750 <UART_SetConfig+0x218>
 8008704:	4b45      	ldr	r3, [pc, #276]	; (800881c <UART_SetConfig+0x2e4>)
 8008706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800870a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800870e:	2bc0      	cmp	r3, #192	; 0xc0
 8008710:	d016      	beq.n	8008740 <UART_SetConfig+0x208>
 8008712:	2bc0      	cmp	r3, #192	; 0xc0
 8008714:	d818      	bhi.n	8008748 <UART_SetConfig+0x210>
 8008716:	2b80      	cmp	r3, #128	; 0x80
 8008718:	d00a      	beq.n	8008730 <UART_SetConfig+0x1f8>
 800871a:	2b80      	cmp	r3, #128	; 0x80
 800871c:	d814      	bhi.n	8008748 <UART_SetConfig+0x210>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <UART_SetConfig+0x1f0>
 8008722:	2b40      	cmp	r3, #64	; 0x40
 8008724:	d008      	beq.n	8008738 <UART_SetConfig+0x200>
 8008726:	e00f      	b.n	8008748 <UART_SetConfig+0x210>
 8008728:	2300      	movs	r3, #0
 800872a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800872e:	e082      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008730:	2302      	movs	r3, #2
 8008732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008736:	e07e      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008738:	2304      	movs	r3, #4
 800873a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800873e:	e07a      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008740:	2308      	movs	r3, #8
 8008742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008746:	e076      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008748:	2310      	movs	r3, #16
 800874a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800874e:	e072      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a35      	ldr	r2, [pc, #212]	; (800882c <UART_SetConfig+0x2f4>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d12a      	bne.n	80087b0 <UART_SetConfig+0x278>
 800875a:	4b30      	ldr	r3, [pc, #192]	; (800881c <UART_SetConfig+0x2e4>)
 800875c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008764:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008768:	d01a      	beq.n	80087a0 <UART_SetConfig+0x268>
 800876a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800876e:	d81b      	bhi.n	80087a8 <UART_SetConfig+0x270>
 8008770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008774:	d00c      	beq.n	8008790 <UART_SetConfig+0x258>
 8008776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800877a:	d815      	bhi.n	80087a8 <UART_SetConfig+0x270>
 800877c:	2b00      	cmp	r3, #0
 800877e:	d003      	beq.n	8008788 <UART_SetConfig+0x250>
 8008780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008784:	d008      	beq.n	8008798 <UART_SetConfig+0x260>
 8008786:	e00f      	b.n	80087a8 <UART_SetConfig+0x270>
 8008788:	2300      	movs	r3, #0
 800878a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800878e:	e052      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008790:	2302      	movs	r3, #2
 8008792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008796:	e04e      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008798:	2304      	movs	r3, #4
 800879a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800879e:	e04a      	b.n	8008836 <UART_SetConfig+0x2fe>
 80087a0:	2308      	movs	r3, #8
 80087a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087a6:	e046      	b.n	8008836 <UART_SetConfig+0x2fe>
 80087a8:	2310      	movs	r3, #16
 80087aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ae:	e042      	b.n	8008836 <UART_SetConfig+0x2fe>
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a17      	ldr	r2, [pc, #92]	; (8008814 <UART_SetConfig+0x2dc>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d13a      	bne.n	8008830 <UART_SetConfig+0x2f8>
 80087ba:	4b18      	ldr	r3, [pc, #96]	; (800881c <UART_SetConfig+0x2e4>)
 80087bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80087c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087c8:	d01a      	beq.n	8008800 <UART_SetConfig+0x2c8>
 80087ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087ce:	d81b      	bhi.n	8008808 <UART_SetConfig+0x2d0>
 80087d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087d4:	d00c      	beq.n	80087f0 <UART_SetConfig+0x2b8>
 80087d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087da:	d815      	bhi.n	8008808 <UART_SetConfig+0x2d0>
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d003      	beq.n	80087e8 <UART_SetConfig+0x2b0>
 80087e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087e4:	d008      	beq.n	80087f8 <UART_SetConfig+0x2c0>
 80087e6:	e00f      	b.n	8008808 <UART_SetConfig+0x2d0>
 80087e8:	2300      	movs	r3, #0
 80087ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ee:	e022      	b.n	8008836 <UART_SetConfig+0x2fe>
 80087f0:	2302      	movs	r3, #2
 80087f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087f6:	e01e      	b.n	8008836 <UART_SetConfig+0x2fe>
 80087f8:	2304      	movs	r3, #4
 80087fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087fe:	e01a      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008800:	2308      	movs	r3, #8
 8008802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008806:	e016      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008808:	2310      	movs	r3, #16
 800880a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800880e:	e012      	b.n	8008836 <UART_SetConfig+0x2fe>
 8008810:	cfff69f3 	.word	0xcfff69f3
 8008814:	40008000 	.word	0x40008000
 8008818:	40013800 	.word	0x40013800
 800881c:	40021000 	.word	0x40021000
 8008820:	40004400 	.word	0x40004400
 8008824:	40004800 	.word	0x40004800
 8008828:	40004c00 	.word	0x40004c00
 800882c:	40005000 	.word	0x40005000
 8008830:	2310      	movs	r3, #16
 8008832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4aae      	ldr	r2, [pc, #696]	; (8008af4 <UART_SetConfig+0x5bc>)
 800883c:	4293      	cmp	r3, r2
 800883e:	f040 8097 	bne.w	8008970 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008842:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008846:	2b08      	cmp	r3, #8
 8008848:	d823      	bhi.n	8008892 <UART_SetConfig+0x35a>
 800884a:	a201      	add	r2, pc, #4	; (adr r2, 8008850 <UART_SetConfig+0x318>)
 800884c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008850:	08008875 	.word	0x08008875
 8008854:	08008893 	.word	0x08008893
 8008858:	0800887d 	.word	0x0800887d
 800885c:	08008893 	.word	0x08008893
 8008860:	08008883 	.word	0x08008883
 8008864:	08008893 	.word	0x08008893
 8008868:	08008893 	.word	0x08008893
 800886c:	08008893 	.word	0x08008893
 8008870:	0800888b 	.word	0x0800888b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008874:	f7fd f916 	bl	8005aa4 <HAL_RCC_GetPCLK1Freq>
 8008878:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800887a:	e010      	b.n	800889e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800887c:	4b9e      	ldr	r3, [pc, #632]	; (8008af8 <UART_SetConfig+0x5c0>)
 800887e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008880:	e00d      	b.n	800889e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008882:	f7fd f8a1 	bl	80059c8 <HAL_RCC_GetSysClockFreq>
 8008886:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008888:	e009      	b.n	800889e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800888a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800888e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008890:	e005      	b.n	800889e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800889c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 8130 	beq.w	8008b06 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088aa:	4a94      	ldr	r2, [pc, #592]	; (8008afc <UART_SetConfig+0x5c4>)
 80088ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088b0:	461a      	mov	r2, r3
 80088b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80088b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	4613      	mov	r3, r2
 80088c0:	005b      	lsls	r3, r3, #1
 80088c2:	4413      	add	r3, r2
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d305      	bcc.n	80088d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088d0:	69ba      	ldr	r2, [r7, #24]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d903      	bls.n	80088de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80088dc:	e113      	b.n	8008b06 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e0:	2200      	movs	r2, #0
 80088e2:	60bb      	str	r3, [r7, #8]
 80088e4:	60fa      	str	r2, [r7, #12]
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ea:	4a84      	ldr	r2, [pc, #528]	; (8008afc <UART_SetConfig+0x5c4>)
 80088ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	2200      	movs	r2, #0
 80088f4:	603b      	str	r3, [r7, #0]
 80088f6:	607a      	str	r2, [r7, #4]
 80088f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008900:	f7f8 f978 	bl	8000bf4 <__aeabi_uldivmod>
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	4610      	mov	r0, r2
 800890a:	4619      	mov	r1, r3
 800890c:	f04f 0200 	mov.w	r2, #0
 8008910:	f04f 0300 	mov.w	r3, #0
 8008914:	020b      	lsls	r3, r1, #8
 8008916:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800891a:	0202      	lsls	r2, r0, #8
 800891c:	6979      	ldr	r1, [r7, #20]
 800891e:	6849      	ldr	r1, [r1, #4]
 8008920:	0849      	lsrs	r1, r1, #1
 8008922:	2000      	movs	r0, #0
 8008924:	460c      	mov	r4, r1
 8008926:	4605      	mov	r5, r0
 8008928:	eb12 0804 	adds.w	r8, r2, r4
 800892c:	eb43 0905 	adc.w	r9, r3, r5
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	469a      	mov	sl, r3
 8008938:	4693      	mov	fp, r2
 800893a:	4652      	mov	r2, sl
 800893c:	465b      	mov	r3, fp
 800893e:	4640      	mov	r0, r8
 8008940:	4649      	mov	r1, r9
 8008942:	f7f8 f957 	bl	8000bf4 <__aeabi_uldivmod>
 8008946:	4602      	mov	r2, r0
 8008948:	460b      	mov	r3, r1
 800894a:	4613      	mov	r3, r2
 800894c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800894e:	6a3b      	ldr	r3, [r7, #32]
 8008950:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008954:	d308      	bcc.n	8008968 <UART_SetConfig+0x430>
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800895c:	d204      	bcs.n	8008968 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6a3a      	ldr	r2, [r7, #32]
 8008964:	60da      	str	r2, [r3, #12]
 8008966:	e0ce      	b.n	8008b06 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800896e:	e0ca      	b.n	8008b06 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008978:	d166      	bne.n	8008a48 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800897a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800897e:	2b08      	cmp	r3, #8
 8008980:	d827      	bhi.n	80089d2 <UART_SetConfig+0x49a>
 8008982:	a201      	add	r2, pc, #4	; (adr r2, 8008988 <UART_SetConfig+0x450>)
 8008984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008988:	080089ad 	.word	0x080089ad
 800898c:	080089b5 	.word	0x080089b5
 8008990:	080089bd 	.word	0x080089bd
 8008994:	080089d3 	.word	0x080089d3
 8008998:	080089c3 	.word	0x080089c3
 800899c:	080089d3 	.word	0x080089d3
 80089a0:	080089d3 	.word	0x080089d3
 80089a4:	080089d3 	.word	0x080089d3
 80089a8:	080089cb 	.word	0x080089cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089ac:	f7fd f87a 	bl	8005aa4 <HAL_RCC_GetPCLK1Freq>
 80089b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089b2:	e014      	b.n	80089de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089b4:	f7fd f88c 	bl	8005ad0 <HAL_RCC_GetPCLK2Freq>
 80089b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089ba:	e010      	b.n	80089de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089bc:	4b4e      	ldr	r3, [pc, #312]	; (8008af8 <UART_SetConfig+0x5c0>)
 80089be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089c0:	e00d      	b.n	80089de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089c2:	f7fd f801 	bl	80059c8 <HAL_RCC_GetSysClockFreq>
 80089c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089c8:	e009      	b.n	80089de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089d0:	e005      	b.n	80089de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80089d2:	2300      	movs	r3, #0
 80089d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80089dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 8090 	beq.w	8008b06 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	4a44      	ldr	r2, [pc, #272]	; (8008afc <UART_SetConfig+0x5c4>)
 80089ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089f0:	461a      	mov	r2, r3
 80089f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80089f8:	005a      	lsls	r2, r3, #1
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	085b      	lsrs	r3, r3, #1
 8008a00:	441a      	add	r2, r3
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	2b0f      	cmp	r3, #15
 8008a10:	d916      	bls.n	8008a40 <UART_SetConfig+0x508>
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a18:	d212      	bcs.n	8008a40 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	f023 030f 	bic.w	r3, r3, #15
 8008a22:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a24:	6a3b      	ldr	r3, [r7, #32]
 8008a26:	085b      	lsrs	r3, r3, #1
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	f003 0307 	and.w	r3, r3, #7
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	8bfb      	ldrh	r3, [r7, #30]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	8bfa      	ldrh	r2, [r7, #30]
 8008a3c:	60da      	str	r2, [r3, #12]
 8008a3e:	e062      	b.n	8008b06 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a46:	e05e      	b.n	8008b06 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a4c:	2b08      	cmp	r3, #8
 8008a4e:	d828      	bhi.n	8008aa2 <UART_SetConfig+0x56a>
 8008a50:	a201      	add	r2, pc, #4	; (adr r2, 8008a58 <UART_SetConfig+0x520>)
 8008a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a56:	bf00      	nop
 8008a58:	08008a7d 	.word	0x08008a7d
 8008a5c:	08008a85 	.word	0x08008a85
 8008a60:	08008a8d 	.word	0x08008a8d
 8008a64:	08008aa3 	.word	0x08008aa3
 8008a68:	08008a93 	.word	0x08008a93
 8008a6c:	08008aa3 	.word	0x08008aa3
 8008a70:	08008aa3 	.word	0x08008aa3
 8008a74:	08008aa3 	.word	0x08008aa3
 8008a78:	08008a9b 	.word	0x08008a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a7c:	f7fd f812 	bl	8005aa4 <HAL_RCC_GetPCLK1Freq>
 8008a80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a82:	e014      	b.n	8008aae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a84:	f7fd f824 	bl	8005ad0 <HAL_RCC_GetPCLK2Freq>
 8008a88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a8a:	e010      	b.n	8008aae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a8c:	4b1a      	ldr	r3, [pc, #104]	; (8008af8 <UART_SetConfig+0x5c0>)
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a90:	e00d      	b.n	8008aae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a92:	f7fc ff99 	bl	80059c8 <HAL_RCC_GetSysClockFreq>
 8008a96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a98:	e009      	b.n	8008aae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008aa0:	e005      	b.n	8008aae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008aac:	bf00      	nop
    }

    if (pclk != 0U)
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d028      	beq.n	8008b06 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab8:	4a10      	ldr	r2, [pc, #64]	; (8008afc <UART_SetConfig+0x5c4>)
 8008aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	085b      	lsrs	r3, r3, #1
 8008acc:	441a      	add	r2, r3
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	2b0f      	cmp	r3, #15
 8008adc:	d910      	bls.n	8008b00 <UART_SetConfig+0x5c8>
 8008ade:	6a3b      	ldr	r3, [r7, #32]
 8008ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ae4:	d20c      	bcs.n	8008b00 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	60da      	str	r2, [r3, #12]
 8008af0:	e009      	b.n	8008b06 <UART_SetConfig+0x5ce>
 8008af2:	bf00      	nop
 8008af4:	40008000 	.word	0x40008000
 8008af8:	00f42400 	.word	0x00f42400
 8008afc:	0800966c 	.word	0x0800966c
      }
      else
      {
        ret = HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008b22:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3730      	adds	r7, #48	; 0x30
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008b30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3c:	f003 0308 	and.w	r3, r3, #8
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00a      	beq.n	8008b5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	430a      	orrs	r2, r1
 8008b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5e:	f003 0301 	and.w	r3, r3, #1
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00a      	beq.n	8008b7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b80:	f003 0302 	and.w	r3, r3, #2
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00a      	beq.n	8008b9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba2:	f003 0304 	and.w	r3, r3, #4
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc4:	f003 0310 	and.w	r3, r3, #16
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00a      	beq.n	8008be2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be6:	f003 0320 	and.w	r3, r3, #32
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00a      	beq.n	8008c04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	430a      	orrs	r2, r1
 8008c02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d01a      	beq.n	8008c46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c2e:	d10a      	bne.n	8008c46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	430a      	orrs	r2, r1
 8008c44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00a      	beq.n	8008c68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	430a      	orrs	r2, r1
 8008c66:	605a      	str	r2, [r3, #4]
  }
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b098      	sub	sp, #96	; 0x60
 8008c78:	af02      	add	r7, sp, #8
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c84:	f7f9 fec6 	bl	8002a14 <HAL_GetTick>
 8008c88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0308 	and.w	r3, r3, #8
 8008c94:	2b08      	cmp	r3, #8
 8008c96:	d12f      	bne.n	8008cf8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f88e 	bl	8008dc8 <UART_WaitOnFlagUntilTimeout>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d022      	beq.n	8008cf8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cba:	e853 3f00 	ldrex	r3, [r3]
 8008cbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cc6:	653b      	str	r3, [r7, #80]	; 0x50
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8008cd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008cd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cd8:	e841 2300 	strex	r3, r2, [r1]
 8008cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1e6      	bne.n	8008cb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2220      	movs	r2, #32
 8008ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	e063      	b.n	8008dc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0304 	and.w	r3, r3, #4
 8008d02:	2b04      	cmp	r3, #4
 8008d04:	d149      	bne.n	8008d9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 f857 	bl	8008dc8 <UART_WaitOnFlagUntilTimeout>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d03c      	beq.n	8008d9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d28:	e853 3f00 	ldrex	r3, [r3]
 8008d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d2e:	6a3b      	ldr	r3, [r7, #32]
 8008d30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d3e:	633b      	str	r3, [r7, #48]	; 0x30
 8008d40:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d46:	e841 2300 	strex	r3, r2, [r1]
 8008d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1e6      	bne.n	8008d20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3308      	adds	r3, #8
 8008d58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	e853 3f00 	ldrex	r3, [r3]
 8008d60:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f023 0301 	bic.w	r3, r3, #1
 8008d68:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3308      	adds	r3, #8
 8008d70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d72:	61fa      	str	r2, [r7, #28]
 8008d74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d76:	69b9      	ldr	r1, [r7, #24]
 8008d78:	69fa      	ldr	r2, [r7, #28]
 8008d7a:	e841 2300 	strex	r3, r2, [r1]
 8008d7e:	617b      	str	r3, [r7, #20]
   return(result);
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1e5      	bne.n	8008d52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2220      	movs	r2, #32
 8008d8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e012      	b.n	8008dc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2220      	movs	r2, #32
 8008d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2220      	movs	r2, #32
 8008da6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3758      	adds	r7, #88	; 0x58
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	603b      	str	r3, [r7, #0]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dd8:	e04f      	b.n	8008e7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de0:	d04b      	beq.n	8008e7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008de2:	f7f9 fe17 	bl	8002a14 <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	69ba      	ldr	r2, [r7, #24]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d302      	bcc.n	8008df8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e04e      	b.n	8008e9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0304 	and.w	r3, r3, #4
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d037      	beq.n	8008e7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b80      	cmp	r3, #128	; 0x80
 8008e0e:	d034      	beq.n	8008e7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2b40      	cmp	r3, #64	; 0x40
 8008e14:	d031      	beq.n	8008e7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	69db      	ldr	r3, [r3, #28]
 8008e1c:	f003 0308 	and.w	r3, r3, #8
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	d110      	bne.n	8008e46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2208      	movs	r2, #8
 8008e2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f000 f838 	bl	8008ea2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2208      	movs	r2, #8
 8008e36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e029      	b.n	8008e9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	69db      	ldr	r3, [r3, #28]
 8008e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e54:	d111      	bne.n	8008e7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f000 f81e 	bl	8008ea2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2220      	movs	r2, #32
 8008e6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e00f      	b.n	8008e9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	69da      	ldr	r2, [r3, #28]
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	4013      	ands	r3, r2
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	bf0c      	ite	eq
 8008e8a:	2301      	moveq	r3, #1
 8008e8c:	2300      	movne	r3, #0
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	461a      	mov	r2, r3
 8008e92:	79fb      	ldrb	r3, [r7, #7]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d0a0      	beq.n	8008dda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b095      	sub	sp, #84	; 0x54
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb2:	e853 3f00 	ldrex	r3, [r3]
 8008eb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8008eca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ecc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ece:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ed0:	e841 2300 	strex	r3, r2, [r1]
 8008ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1e6      	bne.n	8008eaa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	61fb      	str	r3, [r7, #28]
   return(result);
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ef2:	f023 0301 	bic.w	r3, r3, #1
 8008ef6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	3308      	adds	r3, #8
 8008efe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f08:	e841 2300 	strex	r3, r2, [r1]
 8008f0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1e3      	bne.n	8008edc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d118      	bne.n	8008f4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	e853 3f00 	ldrex	r3, [r3]
 8008f28:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	f023 0310 	bic.w	r3, r3, #16
 8008f30:	647b      	str	r3, [r7, #68]	; 0x44
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	461a      	mov	r2, r3
 8008f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f3a:	61bb      	str	r3, [r7, #24]
 8008f3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3e:	6979      	ldr	r1, [r7, #20]
 8008f40:	69ba      	ldr	r2, [r7, #24]
 8008f42:	e841 2300 	strex	r3, r2, [r1]
 8008f46:	613b      	str	r3, [r7, #16]
   return(result);
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1e6      	bne.n	8008f1c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2220      	movs	r2, #32
 8008f52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008f62:	bf00      	nop
 8008f64:	3754      	adds	r7, #84	; 0x54
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f7ff fabd 	bl	800850c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f92:	bf00      	nop
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008f9a:	b480      	push	{r7}
 8008f9c:	b08f      	sub	sp, #60	; 0x3c
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fa8:	2b21      	cmp	r3, #33	; 0x21
 8008faa:	d14c      	bne.n	8009046 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d132      	bne.n	800901e <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	e853 3f00 	ldrex	r3, [r3]
 8008fc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fd8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fde:	e841 2300 	strex	r3, r2, [r1]
 8008fe2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1e6      	bne.n	8008fb8 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	e853 3f00 	ldrex	r3, [r3]
 8008ff6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffe:	633b      	str	r3, [r7, #48]	; 0x30
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	461a      	mov	r2, r3
 8009006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009008:	61bb      	str	r3, [r7, #24]
 800900a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900c:	6979      	ldr	r1, [r7, #20]
 800900e:	69ba      	ldr	r2, [r7, #24]
 8009010:	e841 2300 	strex	r3, r2, [r1]
 8009014:	613b      	str	r3, [r7, #16]
   return(result);
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1e6      	bne.n	8008fea <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800901c:	e013      	b.n	8009046 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009022:	781a      	ldrb	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800903a:	b29b      	uxth	r3, r3
 800903c:	3b01      	subs	r3, #1
 800903e:	b29a      	uxth	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8009046:	bf00      	nop
 8009048:	373c      	adds	r7, #60	; 0x3c
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009052:	b480      	push	{r7}
 8009054:	b091      	sub	sp, #68	; 0x44
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009060:	2b21      	cmp	r3, #33	; 0x21
 8009062:	d151      	bne.n	8009108 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800906a:	b29b      	uxth	r3, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	d132      	bne.n	80090d6 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	e853 3f00 	ldrex	r3, [r3]
 800907c:	623b      	str	r3, [r7, #32]
   return(result);
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009084:	63bb      	str	r3, [r7, #56]	; 0x38
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	461a      	mov	r2, r3
 800908c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908e:	633b      	str	r3, [r7, #48]	; 0x30
 8009090:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009096:	e841 2300 	strex	r3, r2, [r1]
 800909a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1e6      	bne.n	8009070 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	e853 3f00 	ldrex	r3, [r3]
 80090ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090b6:	637b      	str	r3, [r7, #52]	; 0x34
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	461a      	mov	r2, r3
 80090be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c0:	61fb      	str	r3, [r7, #28]
 80090c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c4:	69b9      	ldr	r1, [r7, #24]
 80090c6:	69fa      	ldr	r2, [r7, #28]
 80090c8:	e841 2300 	strex	r3, r2, [r1]
 80090cc:	617b      	str	r3, [r7, #20]
   return(result);
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1e6      	bne.n	80090a2 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80090d4:	e018      	b.n	8009108 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090da:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80090dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	461a      	mov	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090ea:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090f0:	1c9a      	adds	r2, r3, #2
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	3b01      	subs	r3, #1
 8009100:	b29a      	uxth	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8009108:	bf00      	nop
 800910a:	3744      	adds	r7, #68	; 0x44
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009114:	b480      	push	{r7}
 8009116:	b091      	sub	sp, #68	; 0x44
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009122:	2b21      	cmp	r3, #33	; 0x21
 8009124:	d160      	bne.n	80091e8 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800912c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800912e:	e057      	b.n	80091e0 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009136:	b29b      	uxth	r3, r3
 8009138:	2b00      	cmp	r3, #0
 800913a:	d133      	bne.n	80091a4 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3308      	adds	r3, #8
 8009142:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	e853 3f00 	ldrex	r3, [r3]
 800914a:	623b      	str	r3, [r7, #32]
   return(result);
 800914c:	6a3b      	ldr	r3, [r7, #32]
 800914e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009152:	63bb      	str	r3, [r7, #56]	; 0x38
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	3308      	adds	r3, #8
 800915a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800915c:	633a      	str	r2, [r7, #48]	; 0x30
 800915e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009160:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009164:	e841 2300 	strex	r3, r2, [r1]
 8009168:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800916a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1e5      	bne.n	800913c <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	e853 3f00 	ldrex	r3, [r3]
 800917c:	60fb      	str	r3, [r7, #12]
   return(result);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009184:	637b      	str	r3, [r7, #52]	; 0x34
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918e:	61fb      	str	r3, [r7, #28]
 8009190:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009192:	69b9      	ldr	r1, [r7, #24]
 8009194:	69fa      	ldr	r2, [r7, #28]
 8009196:	e841 2300 	strex	r3, r2, [r1]
 800919a:	617b      	str	r3, [r7, #20]
   return(result);
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1e6      	bne.n	8009170 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80091a2:	e021      	b.n	80091e8 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d013      	beq.n	80091da <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091b6:	781a      	ldrb	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c2:	1c5a      	adds	r2, r3, #1
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	3b01      	subs	r3, #1
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80091da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80091dc:	3b01      	subs	r3, #1
 80091de:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80091e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1a4      	bne.n	8009130 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80091e6:	e7ff      	b.n	80091e8 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80091e8:	bf00      	nop
 80091ea:	3744      	adds	r7, #68	; 0x44
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b091      	sub	sp, #68	; 0x44
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009202:	2b21      	cmp	r3, #33	; 0x21
 8009204:	d165      	bne.n	80092d2 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800920c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800920e:	e05c      	b.n	80092ca <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009216:	b29b      	uxth	r3, r3
 8009218:	2b00      	cmp	r3, #0
 800921a:	d133      	bne.n	8009284 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3308      	adds	r3, #8
 8009222:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009224:	6a3b      	ldr	r3, [r7, #32]
 8009226:	e853 3f00 	ldrex	r3, [r3]
 800922a:	61fb      	str	r3, [r7, #28]
   return(result);
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009232:	637b      	str	r3, [r7, #52]	; 0x34
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3308      	adds	r3, #8
 800923a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800923c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800923e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009244:	e841 2300 	strex	r3, r2, [r1]
 8009248:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1e5      	bne.n	800921c <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	e853 3f00 	ldrex	r3, [r3]
 800925c:	60bb      	str	r3, [r7, #8]
   return(result);
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009264:	633b      	str	r3, [r7, #48]	; 0x30
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	461a      	mov	r2, r3
 800926c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926e:	61bb      	str	r3, [r7, #24]
 8009270:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009272:	6979      	ldr	r1, [r7, #20]
 8009274:	69ba      	ldr	r2, [r7, #24]
 8009276:	e841 2300 	strex	r3, r2, [r1]
 800927a:	613b      	str	r3, [r7, #16]
   return(result);
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1e6      	bne.n	8009250 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009282:	e026      	b.n	80092d2 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	69db      	ldr	r3, [r3, #28]
 800928a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800928e:	2b00      	cmp	r3, #0
 8009290:	d018      	beq.n	80092c4 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009296:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929a:	881b      	ldrh	r3, [r3, #0]
 800929c:	461a      	mov	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092a6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ac:	1c9a      	adds	r2, r3, #2
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	3b01      	subs	r3, #1
 80092bc:	b29a      	uxth	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80092c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80092c6:	3b01      	subs	r3, #1
 80092c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80092ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d19f      	bne.n	8009210 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80092d0:	e7ff      	b.n	80092d2 <UART_TxISR_16BIT_FIFOEN+0xde>
 80092d2:	bf00      	nop
 80092d4:	3744      	adds	r7, #68	; 0x44
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b088      	sub	sp, #32
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	e853 3f00 	ldrex	r3, [r3]
 80092f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092fa:	61fb      	str	r3, [r7, #28]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	461a      	mov	r2, r3
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	61bb      	str	r3, [r7, #24]
 8009306:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009308:	6979      	ldr	r1, [r7, #20]
 800930a:	69ba      	ldr	r2, [r7, #24]
 800930c:	e841 2300 	strex	r3, r2, [r1]
 8009310:	613b      	str	r3, [r7, #16]
   return(result);
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1e6      	bne.n	80092e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2220      	movs	r2, #32
 800931c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7ff f8e6 	bl	80084f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800932c:	bf00      	nop
 800932e:	3720      	adds	r7, #32
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800937e:	2b01      	cmp	r3, #1
 8009380:	d101      	bne.n	8009386 <HAL_UARTEx_DisableFifoMode+0x16>
 8009382:	2302      	movs	r3, #2
 8009384:	e027      	b.n	80093d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2201      	movs	r2, #1
 800938a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2224      	movs	r2, #36	; 0x24
 8009392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f022 0201 	bic.w	r2, r2, #1
 80093ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80093b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2220      	movs	r2, #32
 80093c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b084      	sub	sp, #16
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d101      	bne.n	80093fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80093f6:	2302      	movs	r3, #2
 80093f8:	e02d      	b.n	8009456 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2224      	movs	r2, #36	; 0x24
 8009406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f022 0201 	bic.w	r2, r2, #1
 8009420:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	430a      	orrs	r2, r1
 8009434:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f850 	bl	80094dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2220      	movs	r2, #32
 8009448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b084      	sub	sp, #16
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800946e:	2b01      	cmp	r3, #1
 8009470:	d101      	bne.n	8009476 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009472:	2302      	movs	r3, #2
 8009474:	e02d      	b.n	80094d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2224      	movs	r2, #36	; 0x24
 8009482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f022 0201 	bic.w	r2, r2, #1
 800949c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f812 	bl	80094dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2220      	movs	r2, #32
 80094c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
	...

080094dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d108      	bne.n	80094fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80094fc:	e031      	b.n	8009562 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80094fe:	2308      	movs	r3, #8
 8009500:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009502:	2308      	movs	r3, #8
 8009504:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	0e5b      	lsrs	r3, r3, #25
 800950e:	b2db      	uxtb	r3, r3
 8009510:	f003 0307 	and.w	r3, r3, #7
 8009514:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	0f5b      	lsrs	r3, r3, #29
 800951e:	b2db      	uxtb	r3, r3
 8009520:	f003 0307 	and.w	r3, r3, #7
 8009524:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009526:	7bbb      	ldrb	r3, [r7, #14]
 8009528:	7b3a      	ldrb	r2, [r7, #12]
 800952a:	4911      	ldr	r1, [pc, #68]	; (8009570 <UARTEx_SetNbDataToProcess+0x94>)
 800952c:	5c8a      	ldrb	r2, [r1, r2]
 800952e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009532:	7b3a      	ldrb	r2, [r7, #12]
 8009534:	490f      	ldr	r1, [pc, #60]	; (8009574 <UARTEx_SetNbDataToProcess+0x98>)
 8009536:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009538:	fb93 f3f2 	sdiv	r3, r3, r2
 800953c:	b29a      	uxth	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009544:	7bfb      	ldrb	r3, [r7, #15]
 8009546:	7b7a      	ldrb	r2, [r7, #13]
 8009548:	4909      	ldr	r1, [pc, #36]	; (8009570 <UARTEx_SetNbDataToProcess+0x94>)
 800954a:	5c8a      	ldrb	r2, [r1, r2]
 800954c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009550:	7b7a      	ldrb	r2, [r7, #13]
 8009552:	4908      	ldr	r1, [pc, #32]	; (8009574 <UARTEx_SetNbDataToProcess+0x98>)
 8009554:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009556:	fb93 f3f2 	sdiv	r3, r3, r2
 800955a:	b29a      	uxth	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009562:	bf00      	nop
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	08009684 	.word	0x08009684
 8009574:	0800968c 	.word	0x0800968c

08009578 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	ed93 7a06 	vldr	s14, [r3, #24]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	edd3 7a07 	vldr	s15, [r3, #28]
 800958e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	edd3 7a08 	vldr	s15, [r3, #32]
 8009598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80095a8:	eeb1 7a67 	vneg.f32	s14, s15
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80095b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80095b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a1a      	ldr	r2, [r3, #32]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d006      	beq.n	80095dc <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	330c      	adds	r3, #12
 80095d2:	220c      	movs	r2, #12
 80095d4:	2100      	movs	r1, #0
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 f804 	bl	80095e4 <memset>
  }

}
 80095dc:	bf00      	nop
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <memset>:
 80095e4:	4402      	add	r2, r0
 80095e6:	4603      	mov	r3, r0
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d100      	bne.n	80095ee <memset+0xa>
 80095ec:	4770      	bx	lr
 80095ee:	f803 1b01 	strb.w	r1, [r3], #1
 80095f2:	e7f9      	b.n	80095e8 <memset+0x4>

080095f4 <__libc_init_array>:
 80095f4:	b570      	push	{r4, r5, r6, lr}
 80095f6:	4d0d      	ldr	r5, [pc, #52]	; (800962c <__libc_init_array+0x38>)
 80095f8:	4c0d      	ldr	r4, [pc, #52]	; (8009630 <__libc_init_array+0x3c>)
 80095fa:	1b64      	subs	r4, r4, r5
 80095fc:	10a4      	asrs	r4, r4, #2
 80095fe:	2600      	movs	r6, #0
 8009600:	42a6      	cmp	r6, r4
 8009602:	d109      	bne.n	8009618 <__libc_init_array+0x24>
 8009604:	4d0b      	ldr	r5, [pc, #44]	; (8009634 <__libc_init_array+0x40>)
 8009606:	4c0c      	ldr	r4, [pc, #48]	; (8009638 <__libc_init_array+0x44>)
 8009608:	f000 f818 	bl	800963c <_init>
 800960c:	1b64      	subs	r4, r4, r5
 800960e:	10a4      	asrs	r4, r4, #2
 8009610:	2600      	movs	r6, #0
 8009612:	42a6      	cmp	r6, r4
 8009614:	d105      	bne.n	8009622 <__libc_init_array+0x2e>
 8009616:	bd70      	pop	{r4, r5, r6, pc}
 8009618:	f855 3b04 	ldr.w	r3, [r5], #4
 800961c:	4798      	blx	r3
 800961e:	3601      	adds	r6, #1
 8009620:	e7ee      	b.n	8009600 <__libc_init_array+0xc>
 8009622:	f855 3b04 	ldr.w	r3, [r5], #4
 8009626:	4798      	blx	r3
 8009628:	3601      	adds	r6, #1
 800962a:	e7f2      	b.n	8009612 <__libc_init_array+0x1e>
 800962c:	0800969c 	.word	0x0800969c
 8009630:	0800969c 	.word	0x0800969c
 8009634:	0800969c 	.word	0x0800969c
 8009638:	080096a0 	.word	0x080096a0

0800963c <_init>:
 800963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963e:	bf00      	nop
 8009640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009642:	bc08      	pop	{r3}
 8009644:	469e      	mov	lr, r3
 8009646:	4770      	bx	lr

08009648 <_fini>:
 8009648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964a:	bf00      	nop
 800964c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800964e:	bc08      	pop	{r3}
 8009650:	469e      	mov	lr, r3
 8009652:	4770      	bx	lr
